[
    {
        "reqid": "R20-D",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Autonomously detect the presence\nof high solar irradiation and get\naway if possible, by using chemical\npropulsion.",
        "comments": "",
        "fulltext": "Whenever solar_irradiation >Normal_solar_radiation BepiColmbo shall immediately satisfy get_away_chemically",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "solar_irradiation",
                "Normal_solar_radiation",
                "get_away_chemically"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition": "(solar_irradiation > Normal_solar_radiation)",
            "conditionTextRange": [
                0,
                49
            ],
            "component_name": "BepiColmbo",
            "componentTextRange": [
                51,
                60
            ],
            "timingTextRange": [
                68,
                78
            ],
            "post_condition": "(get_away_chemically)",
            "responseTextRange": [
                80,
                106
            ],
            "diagramVariables": "CC = <b><i>(solar_irradiation > Normal_solar_radiation)</i></b>, Response = <b><i>(get_away_chemically)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(solar_irradiation > Normal_solar_radiation)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition_unexp_ft": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition_unexp_pctl": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition_SMV_pt": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition_SMV_ft": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition_PRISM_pctl": "(solar_irradiation > Normal_solar_radiation)",
            "post_condition_unexp_pt": "get_away_chemically",
            "post_condition_unexp_ft": "get_away_chemically",
            "post_condition_unexp_pctl": "get_away_chemically",
            "post_condition_SMV_pt": "get_away_chemically",
            "post_condition_SMV_ft": "get_away_chemically",
            "post_condition_PRISM_pctl": "get_away_chemically",
            "ft": "(LAST V ((solar_irradiation > Normal_solar_radiation) -> get_away_chemically))",
            "pt": "(H ((solar_irradiation > Normal_solar_radiation) -> get_away_chemically))",
            "pctl": "P>=1[(G ((solar_irradiation > Normal_solar_radiation) => (P>=1[get_away_chemically])))]",
            "ptExpanded": "(H ((solar_irradiation > Normal_solar_radiation) -> get_away_chemically))",
            "CoCoSpecCode": "H(((solar_irradiation > Normal_solar_radiation) => get_away_chemically))",
            "ftExpanded": "(LAST V ((solar_irradiation > Normal_solar_radiation) -> get_away_chemically))",
            "pctlExpanded": "P>=1[(G ((solar_irradiation > Normal_solar_radiation) => (P>=1[get_away_chemically])))]",
            "ftInfAUExpanded": "(G ((solar_irradiation > Normal_solar_radiation) -> get_away_chemically))",
            "component": "BepiColmbo"
        },
        "status": "",
        "_id": "eafc38f0-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R58-D",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Once ground signal has been reac-\nquired, Astrobee resumes down-\nlinking the live video stream to the\nControl Station.",
        "comments": "",
        "fulltext": "Whenever ISSConnection & Groundsignal & !Stream Astrobee shall until Stream satisfy downlink",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "ISSConnection",
                "Groundsignal",
                "Stream",
                "downlink"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(ISSConnection & Groundsignal & ! Stream)",
            "regular_condition": "(ISSConnection & Groundsignal & ! Stream)",
            "conditionTextRange": [
                0,
                46
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                48,
                55
            ],
            "stop_condition": "(Stream)",
            "timingTextRange": [
                63,
                74
            ],
            "post_condition": "(downlink)",
            "responseTextRange": [
                76,
                91
            ],
            "diagramVariables": "CC = <b><i>(ISSConnection & Groundsignal & ! Stream)</i></b>, SC = <b><i>(Stream)</i></b>, Response = <b><i>(downlink)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(ISSConnection & Groundsignal & ! Stream)</i></b> is true.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "((ISSConnection & Groundsignal) & (! Stream))",
            "regular_condition_unexp_ft": "((ISSConnection & Groundsignal) & (! Stream))",
            "regular_condition_unexp_pctl": "((ISSConnection & Groundsignal) & (! Stream))",
            "regular_condition_SMV_pt": "((ISSConnection & Groundsignal) & (! Stream))",
            "regular_condition_SMV_ft": "((ISSConnection & Groundsignal) & (! Stream))",
            "regular_condition_PRISM_pctl": "((ISSConnection & Groundsignal) & (! Stream))",
            "post_condition_unexp_pt": "downlink",
            "post_condition_unexp_ft": "downlink",
            "post_condition_unexp_pctl": "downlink",
            "post_condition_SMV_pt": "downlink",
            "post_condition_SMV_ft": "downlink",
            "post_condition_PRISM_pctl": "downlink",
            "stop_condition_unexp_pt": "Stream",
            "stop_condition_unexp_ft": "Stream",
            "stop_condition_PRISM_pctl": "Stream",
            "stop_condition_SMV_pt": "Stream",
            "stop_condition_SMV_ft": "Stream",
            "ft": "(LAST V (((ISSConnection & Groundsignal) & (! Stream)) -> ((Stream V (downlink | Stream)) | (LAST V downlink))))",
            "pt": "(H ((H (! ((ISSConnection & Groundsignal) & (! Stream)))) | (((! Stream) S ((! Stream) & ((ISSConnection & Groundsignal) & (! Stream)))) -> downlink)))",
            "pctl": "P>=1[(G (((ISSConnection & Groundsignal) & (! Stream)) => (P>=1[((undefined R (downlink | undefined)) | (LAST R downlink))])))]",
            "ptExpanded": "(H ((H (! ((ISSConnection & Groundsignal) & (! Stream)))) | (((! Stream) S ((! Stream) & ((ISSConnection & Groundsignal) & (! Stream)))) -> downlink)))",
            "CoCoSpecCode": "H((H(not (((ISSConnection and Groundsignal) and not (Stream)))) or (SI(((ISSConnection and Groundsignal) and not (Stream)),not (Stream)) => downlink)))",
            "ftExpanded": "(LAST V (((ISSConnection & Groundsignal) & (! Stream)) -> ((Stream V (downlink | Stream)) | (LAST V downlink))))",
            "pctlExpanded": "P>=1[(G (((ISSConnection & Groundsignal) & (! Stream)) => (P>=1[((Stream R (downlink | Stream)) | (false R downlink))])))]",
            "ftInfAUExpanded": "(G (((ISSConnection & Groundsignal) & (! Stream)) -> (Stream V (downlink | Stream))))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc38f1-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R7",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Only once the rover is safely on\nthe martian surface will flight soft-\nware command the preparation and\ndownlink of EDL Camera images\nand microphone data.",
        "comments": "",
        "fulltext": "Upon SafeLanding EDL shall at the next timepoint satisfy Preparation & DownLink",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "SafeLanding",
                "Preparation",
                "DownLink"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(SafeLanding)",
            "regular_condition": "(SafeLanding)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "EDL",
            "componentTextRange": [
                17,
                19
            ],
            "timingTextRange": [
                27,
                47
            ],
            "post_condition": "(Preparation & DownLink)",
            "responseTextRange": [
                49,
                78
            ],
            "diagramVariables": "TC = <b><i>(SafeLanding)</i></b>, Response = <b><i>(Preparation & DownLink)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(SafeLanding)</i></b> is true and any point in the interval where <b><i>(SafeLanding)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "SafeLanding",
            "regular_condition_unexp_ft": "SafeLanding",
            "regular_condition_unexp_pctl": "SafeLanding",
            "regular_condition_SMV_pt": "SafeLanding",
            "regular_condition_SMV_ft": "SafeLanding",
            "regular_condition_PRISM_pctl": "SafeLanding",
            "post_condition_unexp_pt": "(Preparation & DownLink)",
            "post_condition_unexp_ft": "(Preparation & DownLink)",
            "post_condition_unexp_pctl": "(Preparation & DownLink)",
            "post_condition_SMV_pt": "(Preparation & DownLink)",
            "post_condition_SMV_ft": "(Preparation & DownLink)",
            "post_condition_PRISM_pctl": "(Preparation & DownLink)",
            "ft": "((LAST V (((! SafeLanding) & ((! LAST) & (X SafeLanding))) -> (X (LAST | (X (Preparation & DownLink)))))) & (SafeLanding -> (LAST | (X (Preparation & DownLink)))))",
            "pt": "(H ((Y (SafeLanding & (Z (! SafeLanding)))) -> ((Preparation & DownLink) | (Z FALSE))))",
            "pctl": "P>=1[((G (((! SafeLanding) & (X SafeLanding)) => (X (P>=1[(LAST | (X (Preparation & DownLink)))])))) & (SafeLanding => (P>=1[(LAST | (X (Preparation & DownLink)))])))]",
            "ptExpanded": "(H ((Y (SafeLanding & (Z (! SafeLanding)))) -> ((Preparation & DownLink) | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre((SafeLanding and ZtoPre(not (SafeLanding)))) => ((Preparation and DownLink) or ZtoPre(false))))",
            "ftExpanded": "((LAST V (((! SafeLanding) & ((! LAST) & (X SafeLanding))) -> (X (LAST | (X (Preparation & DownLink)))))) & (SafeLanding -> (LAST | (X (Preparation & DownLink)))))",
            "pctlExpanded": "P>=1[((G (((! SafeLanding) & (X SafeLanding)) => (X (P>=1[(false | (X (Preparation & DownLink)))])))) & (SafeLanding => (P>=1[(false | (X (Preparation & DownLink)))])))]",
            "ftInfAUExpanded": "((G (((! SafeLanding) & (X SafeLanding)) -> (X (X (Preparation & DownLink))))) & (SafeLanding -> (X (Preparation & DownLink))))",
            "component": "EDL"
        },
        "status": "",
        "_id": "eafc38f2-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R31",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Pressing the Transfer Switch shall\nalways change the pilot flying side.",
        "comments": "",
        "fulltext": "Upon TransferSwitch FGS shall immediately satisfy SwitchSides",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "TransferSwitch",
                "SwitchSides"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(TransferSwitch)",
            "regular_condition": "(TransferSwitch)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "FGS",
            "componentTextRange": [
                20,
                22
            ],
            "timingTextRange": [
                30,
                40
            ],
            "post_condition": "(SwitchSides)",
            "responseTextRange": [
                42,
                60
            ],
            "diagramVariables": "TC = <b><i>(TransferSwitch)</i></b>, Response = <b><i>(SwitchSides)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(TransferSwitch)</i></b> is true and any point in the interval where <b><i>(TransferSwitch)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "TransferSwitch",
            "regular_condition_unexp_ft": "TransferSwitch",
            "regular_condition_unexp_pctl": "TransferSwitch",
            "regular_condition_SMV_pt": "TransferSwitch",
            "regular_condition_SMV_ft": "TransferSwitch",
            "regular_condition_PRISM_pctl": "TransferSwitch",
            "post_condition_unexp_pt": "SwitchSides",
            "post_condition_unexp_ft": "SwitchSides",
            "post_condition_unexp_pctl": "SwitchSides",
            "post_condition_SMV_pt": "SwitchSides",
            "post_condition_SMV_ft": "SwitchSides",
            "post_condition_PRISM_pctl": "SwitchSides",
            "ft": "((LAST V (((! TransferSwitch) & ((! LAST) & (X TransferSwitch))) -> (X SwitchSides))) & (TransferSwitch -> SwitchSides))",
            "pt": "(H ((TransferSwitch & (Z (! TransferSwitch))) -> SwitchSides))",
            "pctl": "P>=1[((G (((! TransferSwitch) & (X TransferSwitch)) => (X (P>=1[SwitchSides])))) & (TransferSwitch => (P>=1[SwitchSides])))]",
            "ptExpanded": "(H ((TransferSwitch & (Z (! TransferSwitch))) -> SwitchSides))",
            "CoCoSpecCode": "H(((TransferSwitch and ZtoPre(not (TransferSwitch))) => SwitchSides))",
            "ftExpanded": "((LAST V (((! TransferSwitch) & ((! LAST) & (X TransferSwitch))) -> (X SwitchSides))) & (TransferSwitch -> SwitchSides))",
            "pctlExpanded": "P>=1[((G (((! TransferSwitch) & (X TransferSwitch)) => (X (P>=1[SwitchSides])))) & (TransferSwitch => (P>=1[SwitchSides])))]",
            "ftInfAUExpanded": "((G (((! TransferSwitch) & (X TransferSwitch)) -> (X SwitchSides))) & (TransferSwitch -> SwitchSides))",
            "component": "FGS"
        },
        "status": "",
        "_id": "eafc38f3-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R13-I",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "During the Undocking delivery\nPhase a mode of operation in use\nis STANDBY which should both be\ndone when the IM is in a deployed\nconfiguration",
        "comments": "",
        "fulltext": "In UNDOCKINGPHASE whenever deployed IM shall eventually satisfy STANDBY",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "UNDOCKINGPHASE",
                "deployed",
                "STANDBY"
            ],
            "scope_mode": "UNDOCKINGPHASE",
            "scopeTextRange": [
                0,
                16
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(deployed)",
            "regular_condition": "(deployed)",
            "conditionTextRange": [
                18,
                34
            ],
            "component_name": "IM",
            "componentTextRange": [
                36,
                37
            ],
            "timingTextRange": [
                45,
                54
            ],
            "post_condition": "(STANDBY)",
            "responseTextRange": [
                56,
                70
            ],
            "diagramVariables": "M = <b><i>UNDOCKINGPHASE</i></b>, CC = <b><i>(deployed)</i></b>, Response = <b><i>(STANDBY)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>UNDOCKINGPHASE</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(deployed)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "UNDOCKINGPHASE",
            "scope_mode_ft": "UNDOCKINGPHASE",
            "scope_mode_pctl": "UNDOCKINGPHASE",
            "regular_condition_unexp_pt": "deployed",
            "regular_condition_unexp_ft": "deployed",
            "regular_condition_unexp_pctl": "deployed",
            "regular_condition_SMV_pt": "deployed",
            "regular_condition_SMV_ft": "deployed",
            "regular_condition_PRISM_pctl": "deployed",
            "post_condition_unexp_pt": "STANDBY",
            "post_condition_unexp_ft": "STANDBY",
            "post_condition_unexp_pctl": "STANDBY",
            "post_condition_SMV_pt": "STANDBY",
            "post_condition_SMV_ft": "STANDBY",
            "post_condition_PRISM_pctl": "STANDBY",
            "ft": "((LAST V ((! (Fin_UNDOCKINGPHASE & (! LAST))) | (X ((Lin_UNDOCKINGPHASE | LAST) V (deployed -> ((! (Lin_UNDOCKINGPHASE | LAST)) U STANDBY)))))) & (UNDOCKINGPHASE -> ((Lin_UNDOCKINGPHASE | LAST) V (deployed -> ((! (Lin_UNDOCKINGPHASE | LAST)) U STANDBY)))))",
            "pt": "((H (Lin_UNDOCKINGPHASE -> (Y (((! deployed) S ((! deployed) & Fin_UNDOCKINGPHASE)) | (! ((! STANDBY) S ((! STANDBY) & deployed))))))) & (((! Lin_UNDOCKINGPHASE) S ((! Lin_UNDOCKINGPHASE) & Fin_UNDOCKINGPHASE)) -> (((! deployed) S ((! deployed) & Fin_UNDOCKINGPHASE)) | (! ((! STANDBY) S ((! STANDBY) & deployed))))))",
            "pctl": "P>=1[((G ((! (Fin_UNDOCKINGPHASE & (! LAST))) | (X (Lin_UNDOCKINGPHASE R (deployed => (P>=1[((! Lin_UNDOCKINGPHASE) U STANDBY)])))))) & (UNDOCKINGPHASE => (Lin_UNDOCKINGPHASE | (Lin_UNDOCKINGPHASE R (deployed => (P>=1[((! Lin_UNDOCKINGPHASE) U STANDBY)]))))))]",
            "ptExpanded": "((H (((! UNDOCKINGPHASE) & (Y UNDOCKINGPHASE)) -> (Y (((! deployed) S ((! deployed) & (UNDOCKINGPHASE & (Z (! UNDOCKINGPHASE))))) | (! ((! STANDBY) S ((! STANDBY) & deployed))))))) & (((! ((! UNDOCKINGPHASE) & (Y UNDOCKINGPHASE))) S ((! ((! UNDOCKINGPHASE) & (Y UNDOCKINGPHASE))) & (UNDOCKINGPHASE & (Z (! UNDOCKINGPHASE))))) -> (((! deployed) S ((! deployed) & (UNDOCKINGPHASE & (Z (! UNDOCKINGPHASE))))) | (! ((! STANDBY) S ((! STANDBY) & deployed))))))",
            "CoCoSpecCode": "(H(((not (UNDOCKINGPHASE) and YtoPre(UNDOCKINGPHASE)) => YtoPre((SI((UNDOCKINGPHASE and ZtoPre(not (UNDOCKINGPHASE))),not (deployed)) or not (SI(deployed,not (STANDBY))))))) and (SI((UNDOCKINGPHASE and ZtoPre(not (UNDOCKINGPHASE))),not ((not (UNDOCKINGPHASE) and YtoPre(UNDOCKINGPHASE)))) => (SI((UNDOCKINGPHASE and ZtoPre(not (UNDOCKINGPHASE))),not (deployed)) or not (SI(deployed,not (STANDBY))))))",
            "ftExpanded": "((LAST V ((! ((((! UNDOCKINGPHASE) & (! LAST)) & (X UNDOCKINGPHASE)) & (! LAST))) | (X ((((UNDOCKINGPHASE & (! LAST)) & (X (! UNDOCKINGPHASE))) | LAST) V (deployed -> ((! (((UNDOCKINGPHASE & (! LAST)) & (X (! UNDOCKINGPHASE))) | LAST)) U STANDBY)))))) & (UNDOCKINGPHASE -> ((((UNDOCKINGPHASE & (! LAST)) & (X (! UNDOCKINGPHASE))) | LAST) V (deployed -> ((! (((UNDOCKINGPHASE & (! LAST)) & (X (! UNDOCKINGPHASE))) | LAST)) U STANDBY)))))",
            "pctlExpanded": "P>=1[((G ((! (((! UNDOCKINGPHASE) & (X UNDOCKINGPHASE)) & (! false))) | (X ((UNDOCKINGPHASE & (X (! UNDOCKINGPHASE))) R (deployed => (P>=1[((! (UNDOCKINGPHASE & (X (! UNDOCKINGPHASE)))) U STANDBY)])))))) & (UNDOCKINGPHASE => ((UNDOCKINGPHASE & (X (! UNDOCKINGPHASE))) | ((UNDOCKINGPHASE & (X (! UNDOCKINGPHASE))) R (deployed => (P>=1[((! (UNDOCKINGPHASE & (X (! UNDOCKINGPHASE)))) U STANDBY)]))))))]",
            "ftInfAUExpanded": "((G ((! ((! UNDOCKINGPHASE) & (X UNDOCKINGPHASE))) | (X ((UNDOCKINGPHASE & (X (! UNDOCKINGPHASE))) V (deployed -> ((! (UNDOCKINGPHASE & (X (! UNDOCKINGPHASE)))) U STANDBY)))))) & (UNDOCKINGPHASE -> ((UNDOCKINGPHASE & (X (! UNDOCKINGPHASE))) V (deployed -> ((! (UNDOCKINGPHASE & (X (! UNDOCKINGPHASE)))) U STANDBY)))))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc38f4-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R64",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Automated change detection and\ntrending. Once a baseline sensor\nmap is available, changes at the\nnext update can indicate developing\nproblems at an early stage",
        "comments": "",
        "fulltext": "Whenever SurveyDone Astrobee shall eventually satisfy CompareMaps",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "SurveyDone",
                "CompareMaps"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(SurveyDone)",
            "regular_condition": "(SurveyDone)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                20,
                27
            ],
            "timingTextRange": [
                35,
                44
            ],
            "post_condition": "(CompareMaps)",
            "responseTextRange": [
                46,
                64
            ],
            "diagramVariables": "CC = <b><i>(SurveyDone)</i></b>, Response = <b><i>(CompareMaps)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(SurveyDone)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "SurveyDone",
            "regular_condition_unexp_ft": "SurveyDone",
            "regular_condition_unexp_pctl": "SurveyDone",
            "regular_condition_SMV_pt": "SurveyDone",
            "regular_condition_SMV_ft": "SurveyDone",
            "regular_condition_PRISM_pctl": "SurveyDone",
            "post_condition_unexp_pt": "CompareMaps",
            "post_condition_unexp_ft": "CompareMaps",
            "post_condition_unexp_pctl": "CompareMaps",
            "post_condition_SMV_pt": "CompareMaps",
            "post_condition_SMV_ft": "CompareMaps",
            "post_condition_PRISM_pctl": "CompareMaps",
            "ft": "(LAST V (SurveyDone -> ((! LAST) U CompareMaps)))",
            "pt": "((H (! SurveyDone)) | (! ((! CompareMaps) S ((! CompareMaps) & SurveyDone))))",
            "pctl": "P>=1[(G (SurveyDone => (P>=1[(F CompareMaps)])))]",
            "ptExpanded": "((H (! SurveyDone)) | (! ((! CompareMaps) S ((! CompareMaps) & SurveyDone))))",
            "CoCoSpecCode": "(H(not (SurveyDone)) or not (SI(SurveyDone,not (CompareMaps))))",
            "ftExpanded": "(LAST V (SurveyDone -> ((! LAST) U CompareMaps)))",
            "pctlExpanded": "P>=1[(G (SurveyDone => (P>=1[(F CompareMaps)])))]",
            "ftInfAUExpanded": "(G (SurveyDone -> (F CompareMaps)))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc38f5-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R43",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "On the other hand, during the higher\nspeeds of the en-route phase, the\nwings provide lift, the rear propeller\nprovides thrust, and the lifting ro-\ntors are inactive (wing-borne mode,\nWB)",
        "comments": "",
        "fulltext": "In EnRoute LPC shall always satisfy !LiftingRotors & ThrustRearPropeller & WingsLift",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "EnRoute",
                "LiftingRotors",
                "ThrustRearPropeller",
                "WingsLift"
            ],
            "scope_mode": "EnRoute",
            "scopeTextRange": [
                0,
                9
            ],
            "component_name": "LPC",
            "componentTextRange": [
                11,
                13
            ],
            "timingTextRange": [
                21,
                26
            ],
            "post_condition": "(! LiftingRotors & ThrustRearPropeller & WingsLift)",
            "responseTextRange": [
                28,
                83
            ],
            "diagramVariables": "M = <b><i>EnRoute</i></b>, Response = <b><i>(! LiftingRotors & ThrustRearPropeller & WingsLift)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>EnRoute</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "EnRoute",
            "scope_mode_ft": "EnRoute",
            "scope_mode_pctl": "EnRoute",
            "post_condition_unexp_pt": "(((! LiftingRotors) & ThrustRearPropeller) & WingsLift)",
            "post_condition_unexp_ft": "(((! LiftingRotors) & ThrustRearPropeller) & WingsLift)",
            "post_condition_unexp_pctl": "(((! LiftingRotors) & ThrustRearPropeller) & WingsLift)",
            "post_condition_SMV_pt": "(((! LiftingRotors) & ThrustRearPropeller) & WingsLift)",
            "post_condition_SMV_ft": "(((! LiftingRotors) & ThrustRearPropeller) & WingsLift)",
            "post_condition_PRISM_pctl": "(((! LiftingRotors) & ThrustRearPropeller) & WingsLift)",
            "ft": "(LAST V (EnRoute -> (((! LiftingRotors) & ThrustRearPropeller) & WingsLift)))",
            "pt": "(H (EnRoute -> (((! LiftingRotors) & ThrustRearPropeller) & WingsLift)))",
            "pctl": "P>=1[((G ((! (Fin_EnRoute & (! LAST))) | (X (P>=1[(Lin_EnRoute R (((! LiftingRotors) & ThrustRearPropeller) & WingsLift))])))) & (EnRoute => (Lin_EnRoute | (P>=1[(Lin_EnRoute R (((! LiftingRotors) & ThrustRearPropeller) & WingsLift))]))))]",
            "ptExpanded": "(H (EnRoute -> (((! LiftingRotors) & ThrustRearPropeller) & WingsLift)))",
            "CoCoSpecCode": "H((EnRoute => ((not (LiftingRotors) and ThrustRearPropeller) and WingsLift)))",
            "ftExpanded": "(LAST V (EnRoute -> (((! LiftingRotors) & ThrustRearPropeller) & WingsLift)))",
            "pctlExpanded": "P>=1[((G ((! (((! EnRoute) & (X EnRoute)) & (! false))) | (X (P>=1[((EnRoute & (X (! EnRoute))) R (((! LiftingRotors) & ThrustRearPropeller) & WingsLift))])))) & (EnRoute => ((EnRoute & (X (! EnRoute))) | (P>=1[((EnRoute & (X (! EnRoute))) R (((! LiftingRotors) & ThrustRearPropeller) & WingsLift))]))))]",
            "ftInfAUExpanded": "(G (EnRoute -> (((! LiftingRotors) & ThrustRearPropeller) & WingsLift)))",
            "component": "LPC"
        },
        "status": "",
        "_id": "eafc38f6-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R21",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Autonomously maintain the on-\nboard equipment and the space-\ncraft structure in proper temperature\nrange.",
        "comments": "",
        "fulltext": "BepiColmbo shall always satisfy MaintainEquipment & MaintainTemperature",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "MaintainEquipment",
                "MaintainTemperature"
            ],
            "component_name": "BepiColmbo",
            "componentTextRange": [
                0,
                9
            ],
            "timingTextRange": [
                17,
                22
            ],
            "post_condition": "(MaintainEquipment & MaintainTemperature)",
            "responseTextRange": [
                24,
                70
            ],
            "diagramVariables": "Response = <b><i>(MaintainEquipment & MaintainTemperature)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(MaintainEquipment & MaintainTemperature)",
            "post_condition_unexp_ft": "(MaintainEquipment & MaintainTemperature)",
            "post_condition_unexp_pctl": "(MaintainEquipment & MaintainTemperature)",
            "post_condition_SMV_pt": "(MaintainEquipment & MaintainTemperature)",
            "post_condition_SMV_ft": "(MaintainEquipment & MaintainTemperature)",
            "post_condition_PRISM_pctl": "(MaintainEquipment & MaintainTemperature)",
            "ft": "(LAST V (MaintainEquipment & MaintainTemperature))",
            "pt": "(H (MaintainEquipment & MaintainTemperature))",
            "pctl": "(P>=1[(G (MaintainEquipment & MaintainTemperature))])",
            "ptExpanded": "((H MaintainEquipment) & (H MaintainTemperature))",
            "CoCoSpecCode": "(H(MaintainEquipment) and H(MaintainTemperature))",
            "ftExpanded": "(LAST V (MaintainEquipment & MaintainTemperature))",
            "pctlExpanded": "(P>=1[(G (MaintainEquipment & MaintainTemperature))])",
            "ftInfAUExpanded": "(G (MaintainEquipment & MaintainTemperature))",
            "component": "BepiColmbo"
        },
        "status": "",
        "_id": "eafc38f7-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R13-J",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "During the Undocking delivery\nPhase a mode of operation in use is\nSAFE which should both be done\nwhen the IM is in a deployed or\nstowed configuration",
        "comments": "",
        "fulltext": "In UNDOCKINGPHASE whenever (stowed|deployed) IM shall eventually satisfy SAFE",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "UNDOCKINGPHASE",
                "stowed",
                "deployed",
                "SAFE"
            ],
            "scope_mode": "UNDOCKINGPHASE",
            "scopeTextRange": [
                0,
                16
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(( stowed | deployed ))",
            "regular_condition": "(( stowed | deployed ))",
            "conditionTextRange": [
                18,
                43
            ],
            "component_name": "IM",
            "componentTextRange": [
                45,
                46
            ],
            "timingTextRange": [
                54,
                63
            ],
            "post_condition": "(SAFE)",
            "responseTextRange": [
                65,
                76
            ],
            "diagramVariables": "M = <b><i>UNDOCKINGPHASE</i></b>, CC = <b><i>(( stowed | deployed ))</i></b>, Response = <b><i>(SAFE)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>UNDOCKINGPHASE</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(( stowed | deployed ))</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "UNDOCKINGPHASE",
            "scope_mode_ft": "UNDOCKINGPHASE",
            "scope_mode_pctl": "UNDOCKINGPHASE",
            "regular_condition_unexp_pt": "(stowed | deployed)",
            "regular_condition_unexp_ft": "(stowed | deployed)",
            "regular_condition_unexp_pctl": "(stowed | deployed)",
            "regular_condition_SMV_pt": "(stowed | deployed)",
            "regular_condition_SMV_ft": "(stowed | deployed)",
            "regular_condition_PRISM_pctl": "(stowed | deployed)",
            "post_condition_unexp_pt": "SAFE",
            "post_condition_unexp_ft": "SAFE",
            "post_condition_unexp_pctl": "SAFE",
            "post_condition_SMV_pt": "SAFE",
            "post_condition_SMV_ft": "SAFE",
            "post_condition_PRISM_pctl": "SAFE",
            "ft": "((LAST V ((! (Fin_UNDOCKINGPHASE & (! LAST))) | (X ((Lin_UNDOCKINGPHASE | LAST) V ((stowed | deployed) -> ((! (Lin_UNDOCKINGPHASE | LAST)) U SAFE)))))) & (UNDOCKINGPHASE -> ((Lin_UNDOCKINGPHASE | LAST) V ((stowed | deployed) -> ((! (Lin_UNDOCKINGPHASE | LAST)) U SAFE)))))",
            "pt": "((H (Lin_UNDOCKINGPHASE -> (Y (((! (stowed | deployed)) S ((! (stowed | deployed)) & Fin_UNDOCKINGPHASE)) | (! ((! SAFE) S ((! SAFE) & (stowed | deployed)))))))) & (((! Lin_UNDOCKINGPHASE) S ((! Lin_UNDOCKINGPHASE) & Fin_UNDOCKINGPHASE)) -> (((! (stowed | deployed)) S ((! (stowed | deployed)) & Fin_UNDOCKINGPHASE)) | (! ((! SAFE) S ((! SAFE) & (stowed | deployed)))))))",
            "pctl": "P>=1[((G ((! (Fin_UNDOCKINGPHASE & (! LAST))) | (X (Lin_UNDOCKINGPHASE R ((stowed | deployed) => (P>=1[((! Lin_UNDOCKINGPHASE) U SAFE)])))))) & (UNDOCKINGPHASE => (Lin_UNDOCKINGPHASE | (Lin_UNDOCKINGPHASE R ((stowed | deployed) => (P>=1[((! Lin_UNDOCKINGPHASE) U SAFE)]))))))]",
            "ptExpanded": "((H (((! UNDOCKINGPHASE) & (Y UNDOCKINGPHASE)) -> (Y (((! (stowed | deployed)) S ((! (stowed | deployed)) & (UNDOCKINGPHASE & (Z (! UNDOCKINGPHASE))))) | (! ((! SAFE) S ((! SAFE) & (stowed | deployed)))))))) & (((! ((! UNDOCKINGPHASE) & (Y UNDOCKINGPHASE))) S ((! ((! UNDOCKINGPHASE) & (Y UNDOCKINGPHASE))) & (UNDOCKINGPHASE & (Z (! UNDOCKINGPHASE))))) -> (((! (stowed | deployed)) S ((! (stowed | deployed)) & (UNDOCKINGPHASE & (Z (! UNDOCKINGPHASE))))) | (! ((! SAFE) S ((! SAFE) & (stowed | deployed)))))))",
            "CoCoSpecCode": "(H(((not (UNDOCKINGPHASE) and YtoPre(UNDOCKINGPHASE)) => YtoPre((SI((UNDOCKINGPHASE and ZtoPre(not (UNDOCKINGPHASE))),not ((stowed or deployed))) or not (SI((stowed or deployed),not (SAFE))))))) and (SI((UNDOCKINGPHASE and ZtoPre(not (UNDOCKINGPHASE))),not ((not (UNDOCKINGPHASE) and YtoPre(UNDOCKINGPHASE)))) => (SI((UNDOCKINGPHASE and ZtoPre(not (UNDOCKINGPHASE))),not ((stowed or deployed))) or not (SI((stowed or deployed),not (SAFE))))))",
            "ftExpanded": "((LAST V ((! ((((! UNDOCKINGPHASE) & (! LAST)) & (X UNDOCKINGPHASE)) & (! LAST))) | (X ((((UNDOCKINGPHASE & (! LAST)) & (X (! UNDOCKINGPHASE))) | LAST) V ((stowed | deployed) -> ((! (((UNDOCKINGPHASE & (! LAST)) & (X (! UNDOCKINGPHASE))) | LAST)) U SAFE)))))) & (UNDOCKINGPHASE -> ((((UNDOCKINGPHASE & (! LAST)) & (X (! UNDOCKINGPHASE))) | LAST) V ((stowed | deployed) -> ((! (((UNDOCKINGPHASE & (! LAST)) & (X (! UNDOCKINGPHASE))) | LAST)) U SAFE)))))",
            "pctlExpanded": "P>=1[((G ((! (((! UNDOCKINGPHASE) & (X UNDOCKINGPHASE)) & (! false))) | (X ((UNDOCKINGPHASE & (X (! UNDOCKINGPHASE))) R ((stowed | deployed) => (P>=1[((! (UNDOCKINGPHASE & (X (! UNDOCKINGPHASE)))) U SAFE)])))))) & (UNDOCKINGPHASE => ((UNDOCKINGPHASE & (X (! UNDOCKINGPHASE))) | ((UNDOCKINGPHASE & (X (! UNDOCKINGPHASE))) R ((stowed | deployed) => (P>=1[((! (UNDOCKINGPHASE & (X (! UNDOCKINGPHASE)))) U SAFE)]))))))]",
            "ftInfAUExpanded": "((G ((! ((! UNDOCKINGPHASE) & (X UNDOCKINGPHASE))) | (X ((UNDOCKINGPHASE & (X (! UNDOCKINGPHASE))) V ((stowed | deployed) -> ((! (UNDOCKINGPHASE & (X (! UNDOCKINGPHASE)))) U SAFE)))))) & (UNDOCKINGPHASE -> ((UNDOCKINGPHASE & (X (! UNDOCKINGPHASE))) V ((stowed | deployed) -> ((! (UNDOCKINGPHASE & (X (! UNDOCKINGPHASE)))) U SAFE)))))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc38f8-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R59-A",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Astrobee is programmed to stop\nwhen it detects an obstacle",
        "comments": "",
        "fulltext": "Upon ObstacleDetected Astrobee shall immediately satisfy Stop",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "ObstacleDetected",
                "Stop"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ObstacleDetected)",
            "regular_condition": "(ObstacleDetected)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                22,
                29
            ],
            "timingTextRange": [
                37,
                47
            ],
            "post_condition": "(Stop)",
            "responseTextRange": [
                49,
                60
            ],
            "diagramVariables": "TC = <b><i>(ObstacleDetected)</i></b>, Response = <b><i>(Stop)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ObstacleDetected)</i></b> is true and any point in the interval where <b><i>(ObstacleDetected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ObstacleDetected",
            "regular_condition_unexp_ft": "ObstacleDetected",
            "regular_condition_unexp_pctl": "ObstacleDetected",
            "regular_condition_SMV_pt": "ObstacleDetected",
            "regular_condition_SMV_ft": "ObstacleDetected",
            "regular_condition_PRISM_pctl": "ObstacleDetected",
            "post_condition_unexp_pt": "Stop",
            "post_condition_unexp_ft": "Stop",
            "post_condition_unexp_pctl": "Stop",
            "post_condition_SMV_pt": "Stop",
            "post_condition_SMV_ft": "Stop",
            "post_condition_PRISM_pctl": "Stop",
            "ft": "((LAST V (((! ObstacleDetected) & ((! LAST) & (X ObstacleDetected))) -> (X Stop))) & (ObstacleDetected -> Stop))",
            "pt": "(H ((ObstacleDetected & (Z (! ObstacleDetected))) -> Stop))",
            "pctl": "P>=1[((G (((! ObstacleDetected) & (X ObstacleDetected)) => (X (P>=1[Stop])))) & (ObstacleDetected => (P>=1[Stop])))]",
            "ptExpanded": "(H ((ObstacleDetected & (Z (! ObstacleDetected))) -> Stop))",
            "CoCoSpecCode": "H(((ObstacleDetected and ZtoPre(not (ObstacleDetected))) => Stop))",
            "ftExpanded": "((LAST V (((! ObstacleDetected) & ((! LAST) & (X ObstacleDetected))) -> (X Stop))) & (ObstacleDetected -> Stop))",
            "pctlExpanded": "P>=1[((G (((! ObstacleDetected) & (X ObstacleDetected)) => (X (P>=1[Stop])))) & (ObstacleDetected => (P>=1[Stop])))]",
            "ftInfAUExpanded": "((G (((! ObstacleDetected) & (X ObstacleDetected)) -> (X Stop))) & (ObstacleDetected -> Stop))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc38f9-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R8",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Stand-by mode: In IM stand-by\nmode only components necessary to\nmonitor the system and to survive\nthe external environment shall be\nactive",
        "comments": "",
        "fulltext": "In STANDBYMODE IM shall always satisfy necessary_components_only",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "STANDBYMODE",
                "necessary_components_only"
            ],
            "scope_mode": "STANDBYMODE",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "IM",
            "componentTextRange": [
                15,
                16
            ],
            "timingTextRange": [
                24,
                29
            ],
            "post_condition": "(necessary_components_only)",
            "responseTextRange": [
                31,
                63
            ],
            "diagramVariables": "M = <b><i>STANDBYMODE</i></b>, Response = <b><i>(necessary_components_only)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>STANDBYMODE</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "STANDBYMODE",
            "scope_mode_ft": "STANDBYMODE",
            "scope_mode_pctl": "STANDBYMODE",
            "post_condition_unexp_pt": "necessary_components_only",
            "post_condition_unexp_ft": "necessary_components_only",
            "post_condition_unexp_pctl": "necessary_components_only",
            "post_condition_SMV_pt": "necessary_components_only",
            "post_condition_SMV_ft": "necessary_components_only",
            "post_condition_PRISM_pctl": "necessary_components_only",
            "ft": "(LAST V (STANDBYMODE -> necessary_components_only))",
            "pt": "(H (STANDBYMODE -> necessary_components_only))",
            "pctl": "P>=1[((G ((! (Fin_STANDBYMODE & (! LAST))) | (X (P>=1[(Lin_STANDBYMODE R necessary_components_only)])))) & (STANDBYMODE => (Lin_STANDBYMODE | (P>=1[(Lin_STANDBYMODE R necessary_components_only)]))))]",
            "ptExpanded": "(H (STANDBYMODE -> necessary_components_only))",
            "CoCoSpecCode": "H((STANDBYMODE => necessary_components_only))",
            "ftExpanded": "(LAST V (STANDBYMODE -> necessary_components_only))",
            "pctlExpanded": "P>=1[((G ((! (((! STANDBYMODE) & (X STANDBYMODE)) & (! false))) | (X (P>=1[((STANDBYMODE & (X (! STANDBYMODE))) R necessary_components_only)])))) & (STANDBYMODE => ((STANDBYMODE & (X (! STANDBYMODE))) | (P>=1[((STANDBYMODE & (X (! STANDBYMODE))) R necessary_components_only)]))))]",
            "ftInfAUExpanded": "(G (STANDBYMODE -> necessary_components_only))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc38fa-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R32",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The system shall start with the Pri-\nmary Side as the pilot flying side.",
        "comments": "",
        "fulltext": "Upon Startup FGS shall at the next timepoint satisfy PrimarySide",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "Startup",
                "PrimarySide"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(Startup)",
            "regular_condition": "(Startup)",
            "conditionTextRange": [
                0,
                11
            ],
            "component_name": "FGS",
            "componentTextRange": [
                13,
                15
            ],
            "timingTextRange": [
                23,
                43
            ],
            "post_condition": "(PrimarySide)",
            "responseTextRange": [
                45,
                63
            ],
            "diagramVariables": "TC = <b><i>(Startup)</i></b>, Response = <b><i>(PrimarySide)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(Startup)</i></b> is true and any point in the interval where <b><i>(Startup)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "Startup",
            "regular_condition_unexp_ft": "Startup",
            "regular_condition_unexp_pctl": "Startup",
            "regular_condition_SMV_pt": "Startup",
            "regular_condition_SMV_ft": "Startup",
            "regular_condition_PRISM_pctl": "Startup",
            "post_condition_unexp_pt": "PrimarySide",
            "post_condition_unexp_ft": "PrimarySide",
            "post_condition_unexp_pctl": "PrimarySide",
            "post_condition_SMV_pt": "PrimarySide",
            "post_condition_SMV_ft": "PrimarySide",
            "post_condition_PRISM_pctl": "PrimarySide",
            "ft": "((LAST V (((! Startup) & ((! LAST) & (X Startup))) -> (X (LAST | (X PrimarySide))))) & (Startup -> (LAST | (X PrimarySide))))",
            "pt": "(H ((Y (Startup & (Z (! Startup)))) -> (PrimarySide | (Z FALSE))))",
            "pctl": "P>=1[((G (((! Startup) & (X Startup)) => (X (P>=1[(LAST | (X PrimarySide))])))) & (Startup => (P>=1[(LAST | (X PrimarySide))])))]",
            "ptExpanded": "(H ((Y (Startup & (Z (! Startup)))) -> (PrimarySide | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre((Startup and ZtoPre(not (Startup)))) => (PrimarySide or ZtoPre(false))))",
            "ftExpanded": "((LAST V (((! Startup) & ((! LAST) & (X Startup))) -> (X (LAST | (X PrimarySide))))) & (Startup -> (LAST | (X PrimarySide))))",
            "pctlExpanded": "P>=1[((G (((! Startup) & (X Startup)) => (X (P>=1[(false | (X PrimarySide))])))) & (Startup => (P>=1[(false | (X PrimarySide))])))]",
            "ftInfAUExpanded": "((G (((! Startup) & (X Startup)) -> (X (X PrimarySide)))) & (Startup -> (X PrimarySide)))",
            "component": "FGS"
        },
        "status": "",
        "_id": "eafc38fb-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R44",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "In a SLM survey, crew takes mea-\nsurements at locations described in\nprocedures, attempting to take the\nmeasurement as close to the de-\nscribed point as possible",
        "comments": "",
        "fulltext": "Astrobee shall eventually satisfy SoundLocation & SLMSurvey",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "SoundLocation",
                "SLMSurvey"
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                24
            ],
            "post_condition": "(SoundLocation & SLMSurvey)",
            "responseTextRange": [
                26,
                58
            ],
            "diagramVariables": "Response = <b><i>(SoundLocation & SLMSurvey)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(SoundLocation & SLMSurvey)",
            "post_condition_unexp_ft": "(SoundLocation & SLMSurvey)",
            "post_condition_unexp_pctl": "(SoundLocation & SLMSurvey)",
            "post_condition_SMV_pt": "(SoundLocation & SLMSurvey)",
            "post_condition_SMV_ft": "(SoundLocation & SLMSurvey)",
            "post_condition_PRISM_pctl": "(SoundLocation & SLMSurvey)",
            "ft": "((! LAST) U (SoundLocation & SLMSurvey))",
            "pt": "(O (SoundLocation & SLMSurvey))",
            "pctl": "(P>=1[(F (SoundLocation & SLMSurvey))])",
            "ptExpanded": "(O (SoundLocation & SLMSurvey))",
            "CoCoSpecCode": "O((SoundLocation and SLMSurvey))",
            "ftExpanded": "((! LAST) U (SoundLocation & SLMSurvey))",
            "pctlExpanded": "(P>=1[(F (SoundLocation & SLMSurvey))])",
            "ftInfAUExpanded": "(F (SoundLocation & SLMSurvey))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc38fc-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R73",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "If the variances immediately de-\ncrease below lower thresholds, the\nimpact cause is presumed to be an\nimpulsive external force, and the\nInt-Ball2 tries to maintain its cur-\nrent pose",
        "comments": "",
        "fulltext": "In CollisionMode if (VelocityVariances <LowerVelocityThreshold) & (AccelerationVariances <LowerAccelerationThreshold) IntBall2 shall immediately satisfy MaintainCurrentPose",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "CollisionMode",
                "VelocityVariances",
                "LowerVelocityThreshold",
                "AccelerationVariances",
                "LowerAccelerationThreshold",
                "MaintainCurrentPose"
            ],
            "scope_mode": "CollisionMode",
            "scopeTextRange": [
                0,
                15
            ],
            "qualifier_word": "if",
            "pre_condition": "(( VelocityVariances < LowerVelocityThreshold ) & ( AccelerationVariances < LowerAccelerationThreshold ))",
            "regular_condition": "(( VelocityVariances < LowerVelocityThreshold ) & ( AccelerationVariances < LowerAccelerationThreshold ))",
            "conditionTextRange": [
                17,
                116
            ],
            "component_name": "IntBall2",
            "componentTextRange": [
                118,
                125
            ],
            "timingTextRange": [
                133,
                143
            ],
            "post_condition": "(MaintainCurrentPose)",
            "responseTextRange": [
                145,
                171
            ],
            "diagramVariables": "M = <b><i>CollisionMode</i></b>, TC = <b><i>(( VelocityVariances < LowerVelocityThreshold ) & ( AccelerationVariances < LowerAccelerationThreshold ))</i></b>, Response = <b><i>(MaintainCurrentPose)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>CollisionMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(( VelocityVariances < LowerVelocityThreshold ) & ( AccelerationVariances < LowerAccelerationThreshold ))</i></b> is true and any point in the interval where <b><i>(( VelocityVariances < LowerVelocityThreshold ) & ( AccelerationVariances < LowerAccelerationThreshold ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "CollisionMode",
            "scope_mode_ft": "CollisionMode",
            "scope_mode_pctl": "CollisionMode",
            "regular_condition_unexp_pt": "((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))",
            "regular_condition_unexp_ft": "((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))",
            "regular_condition_unexp_pctl": "((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))",
            "regular_condition_SMV_pt": "((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))",
            "regular_condition_SMV_ft": "((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))",
            "regular_condition_PRISM_pctl": "((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))",
            "post_condition_unexp_pt": "MaintainCurrentPose",
            "post_condition_unexp_ft": "MaintainCurrentPose",
            "post_condition_unexp_pctl": "MaintainCurrentPose",
            "post_condition_SMV_pt": "MaintainCurrentPose",
            "post_condition_SMV_ft": "MaintainCurrentPose",
            "post_condition_PRISM_pctl": "MaintainCurrentPose",
            "ft": "((LAST V ((! (Fin_CollisionMode & (! LAST))) | (X (((Lin_CollisionMode | LAST) V (((! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & ((! LAST) & ((X ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & (! (Lin_CollisionMode | LAST))))) -> ((X MaintainCurrentPose) & (! (Lin_CollisionMode | LAST))))) & (((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) -> MaintainCurrentPose))))) & (CollisionMode -> (((Lin_CollisionMode | LAST) V (((! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & ((! LAST) & ((X ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & (! (Lin_CollisionMode | LAST))))) -> ((X MaintainCurrentPose) & (! (Lin_CollisionMode | LAST))))) & (((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) -> MaintainCurrentPose))))",
            "pt": "((H (Lin_CollisionMode -> (Y (((((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) & ((Y (! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)))) | Fin_CollisionMode)) -> MaintainCurrentPose) S (((((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) & ((Y (! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)))) | Fin_CollisionMode)) -> MaintainCurrentPose) & Fin_CollisionMode))))) & (((! Lin_CollisionMode) S ((! Lin_CollisionMode) & Fin_CollisionMode)) -> (((((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) & ((Y (! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)))) | Fin_CollisionMode)) -> MaintainCurrentPose) S (((((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) & ((Y (! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)))) | Fin_CollisionMode)) -> MaintainCurrentPose) & Fin_CollisionMode))))",
            "pctl": "P>=1[((G ((! (Fin_CollisionMode & (! LAST))) | (X ((Lin_CollisionMode R (((! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & ((X ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & (! Lin_CollisionMode))) => ((X (P>=1[MaintainCurrentPose])) & (! Lin_CollisionMode)))) & (((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) => (P>=1[MaintainCurrentPose])))))) & (CollisionMode => (Lin_CollisionMode | ((Lin_CollisionMode R (((! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & ((X ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & (! Lin_CollisionMode))) => ((X (P>=1[MaintainCurrentPose])) & (! Lin_CollisionMode)))) & (((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) => (P>=1[MaintainCurrentPose]))))))]",
            "ptExpanded": "((H (((! CollisionMode) & (Y CollisionMode)) -> (Y (((((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) & ((Y (! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)))) | (CollisionMode & (Z (! CollisionMode))))) -> MaintainCurrentPose) S (((((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) & ((Y (! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)))) | (CollisionMode & (Z (! CollisionMode))))) -> MaintainCurrentPose) & (CollisionMode & (Z (! CollisionMode)))))))) & (((! ((! CollisionMode) & (Y CollisionMode))) S ((! ((! CollisionMode) & (Y CollisionMode))) & (CollisionMode & (Z (! CollisionMode))))) -> (((((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) & ((Y (! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)))) | (CollisionMode & (Z (! CollisionMode))))) -> MaintainCurrentPose) S (((((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) & ((Y (! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)))) | (CollisionMode & (Z (! CollisionMode))))) -> MaintainCurrentPose) & (CollisionMode & (Z (! CollisionMode)))))))",
            "CoCoSpecCode": "(H(((not (CollisionMode) and YtoPre(CollisionMode)) => YtoPre(SI((CollisionMode and ZtoPre(not (CollisionMode))),((((VelocityVariances < LowerVelocityThreshold) and (AccelerationVariances < LowerAccelerationThreshold)) and (YtoPre(not (((VelocityVariances < LowerVelocityThreshold) and (AccelerationVariances < LowerAccelerationThreshold)))) or (CollisionMode and ZtoPre(not (CollisionMode))))) => MaintainCurrentPose))))) and (SI((CollisionMode and ZtoPre(not (CollisionMode))),not ((not (CollisionMode) and YtoPre(CollisionMode)))) => SI((CollisionMode and ZtoPre(not (CollisionMode))),((((VelocityVariances < LowerVelocityThreshold) and (AccelerationVariances < LowerAccelerationThreshold)) and (YtoPre(not (((VelocityVariances < LowerVelocityThreshold) and (AccelerationVariances < LowerAccelerationThreshold)))) or (CollisionMode and ZtoPre(not (CollisionMode))))) => MaintainCurrentPose))))",
            "ftExpanded": "((LAST V ((! ((((! CollisionMode) & (! LAST)) & (X CollisionMode)) & (! LAST))) | (X (((((CollisionMode & (! LAST)) & (X (! CollisionMode))) | LAST) V (((! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & ((! LAST) & ((X ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & (! (((CollisionMode & (! LAST)) & (X (! CollisionMode))) | LAST))))) -> ((X MaintainCurrentPose) & (! (((CollisionMode & (! LAST)) & (X (! CollisionMode))) | LAST))))) & (((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) -> MaintainCurrentPose))))) & (CollisionMode -> (((((CollisionMode & (! LAST)) & (X (! CollisionMode))) | LAST) V (((! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & ((! LAST) & ((X ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & (! (((CollisionMode & (! LAST)) & (X (! CollisionMode))) | LAST))))) -> ((X MaintainCurrentPose) & (! (((CollisionMode & (! LAST)) & (X (! CollisionMode))) | LAST))))) & (((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) -> MaintainCurrentPose))))",
            "pctlExpanded": "P>=1[((G ((! (((! CollisionMode) & (X CollisionMode)) & (! false))) | (X (((CollisionMode & (X (! CollisionMode))) R (((! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & ((X ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & (! (CollisionMode & (X (! CollisionMode)))))) => ((X (P>=1[MaintainCurrentPose])) & (! (CollisionMode & (X (! CollisionMode))))))) & (((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) => (P>=1[MaintainCurrentPose])))))) & (CollisionMode => ((CollisionMode & (X (! CollisionMode))) | (((CollisionMode & (X (! CollisionMode))) R (((! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & ((X ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & (! (CollisionMode & (X (! CollisionMode)))))) => ((X (P>=1[MaintainCurrentPose])) & (! (CollisionMode & (X (! CollisionMode))))))) & (((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) => (P>=1[MaintainCurrentPose]))))))]",
            "ftInfAUExpanded": "((G ((! ((! CollisionMode) & (X CollisionMode))) | (X (((CollisionMode & (X (! CollisionMode))) V (((! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & ((X ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & (! (CollisionMode & (X (! CollisionMode)))))) -> ((X MaintainCurrentPose) & (! (CollisionMode & (X (! CollisionMode))))))) & (((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) -> MaintainCurrentPose))))) & (CollisionMode -> (((CollisionMode & (X (! CollisionMode))) V (((! ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & ((X ((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold))) & (! (CollisionMode & (X (! CollisionMode)))))) -> ((X MaintainCurrentPose) & (! (CollisionMode & (X (! CollisionMode))))))) & (((VelocityVariances < LowerVelocityThreshold) & (AccelerationVariances < LowerAccelerationThreshold)) -> MaintainCurrentPose))))",
            "component": "IntBall2"
        },
        "status": "",
        "_id": "eafc38fd-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R22",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The algorithm first selects the\nvernier jet or the group of pri-\nmary jets whose acceleration has\nthe largest scalar (dot) product with\nthe desired rotational acceleration\nvector.",
        "comments": "",
        "fulltext": "SRC shall at the next timepoint satisfy (SelectFirstJet | SelectPrimaryJets) & !(SelectFirstJet & SelectPrimaryJets)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "SelectFirstJet",
                "SelectPrimaryJets"
            ],
            "component_name": "SRC",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                30
            ],
            "post_condition": "(( SelectFirstJet | SelectPrimaryJets ) & ! ( SelectFirstJet & SelectPrimaryJets ))",
            "responseTextRange": [
                32,
                115
            ],
            "diagramVariables": "Response = <b><i>(( SelectFirstJet | SelectPrimaryJets ) & ! ( SelectFirstJet & SelectPrimaryJets ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((SelectFirstJet | SelectPrimaryJets) & (! (SelectFirstJet & SelectPrimaryJets)))",
            "post_condition_unexp_ft": "((SelectFirstJet | SelectPrimaryJets) & (! (SelectFirstJet & SelectPrimaryJets)))",
            "post_condition_unexp_pctl": "((SelectFirstJet | SelectPrimaryJets) & (! (SelectFirstJet & SelectPrimaryJets)))",
            "post_condition_SMV_pt": "((SelectFirstJet | SelectPrimaryJets) & (! (SelectFirstJet & SelectPrimaryJets)))",
            "post_condition_SMV_ft": "((SelectFirstJet | SelectPrimaryJets) & (! (SelectFirstJet & SelectPrimaryJets)))",
            "post_condition_PRISM_pctl": "((SelectFirstJet | SelectPrimaryJets) & (! (SelectFirstJet & SelectPrimaryJets)))",
            "ft": "(LAST | (X ((SelectFirstJet | SelectPrimaryJets) & (! (SelectFirstJet & SelectPrimaryJets)))))",
            "pt": "(H ((Y (Z FALSE)) -> ((SelectFirstJet | SelectPrimaryJets) & (! (SelectFirstJet & SelectPrimaryJets)))))",
            "pctl": "(P>=1[(LAST | (X ((SelectFirstJet | SelectPrimaryJets) & (! (SelectFirstJet & SelectPrimaryJets)))))])",
            "ptExpanded": "(H ((Y (Z FALSE)) -> ((SelectFirstJet | SelectPrimaryJets) & (! (SelectFirstJet & SelectPrimaryJets)))))",
            "CoCoSpecCode": "H((YtoPre(ZtoPre(false)) => ((SelectFirstJet or SelectPrimaryJets) and not ((SelectFirstJet and SelectPrimaryJets)))))",
            "ftExpanded": "(LAST | (X ((SelectFirstJet | SelectPrimaryJets) & (! (SelectFirstJet & SelectPrimaryJets)))))",
            "pctlExpanded": "(P>=1[(false | (X ((SelectFirstJet | SelectPrimaryJets) & (! (SelectFirstJet & SelectPrimaryJets)))))])",
            "ftInfAUExpanded": "(X ((SelectFirstJet | SelectPrimaryJets) & (! (SelectFirstJet & SelectPrimaryJets))))",
            "component": "SRC"
        },
        "status": "",
        "_id": "eafc38fe-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R65",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Localizing problems. For example,\nif a leak produces a whistling sound,\nacoustic or ultrasonic sensors on-\nboard the robot can be used to pin-\npoint its location.",
        "comments": "",
        "fulltext": "Whenever AnomalyDetected Astrobee shall eventually satisfy PinpointProblem",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "AnomalyDetected",
                "PinpointProblem"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(AnomalyDetected)",
            "regular_condition": "(AnomalyDetected)",
            "conditionTextRange": [
                0,
                23
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                25,
                32
            ],
            "timingTextRange": [
                40,
                49
            ],
            "post_condition": "(PinpointProblem)",
            "responseTextRange": [
                51,
                73
            ],
            "diagramVariables": "CC = <b><i>(AnomalyDetected)</i></b>, Response = <b><i>(PinpointProblem)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(AnomalyDetected)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "AnomalyDetected",
            "regular_condition_unexp_ft": "AnomalyDetected",
            "regular_condition_unexp_pctl": "AnomalyDetected",
            "regular_condition_SMV_pt": "AnomalyDetected",
            "regular_condition_SMV_ft": "AnomalyDetected",
            "regular_condition_PRISM_pctl": "AnomalyDetected",
            "post_condition_unexp_pt": "PinpointProblem",
            "post_condition_unexp_ft": "PinpointProblem",
            "post_condition_unexp_pctl": "PinpointProblem",
            "post_condition_SMV_pt": "PinpointProblem",
            "post_condition_SMV_ft": "PinpointProblem",
            "post_condition_PRISM_pctl": "PinpointProblem",
            "ft": "(LAST V (AnomalyDetected -> ((! LAST) U PinpointProblem)))",
            "pt": "((H (! AnomalyDetected)) | (! ((! PinpointProblem) S ((! PinpointProblem) & AnomalyDetected))))",
            "pctl": "P>=1[(G (AnomalyDetected => (P>=1[(F PinpointProblem)])))]",
            "ptExpanded": "((H (! AnomalyDetected)) | (! ((! PinpointProblem) S ((! PinpointProblem) & AnomalyDetected))))",
            "CoCoSpecCode": "(H(not (AnomalyDetected)) or not (SI(AnomalyDetected,not (PinpointProblem))))",
            "ftExpanded": "(LAST V (AnomalyDetected -> ((! LAST) U PinpointProblem)))",
            "pctlExpanded": "P>=1[(G (AnomalyDetected => (P>=1[(F PinpointProblem)])))]",
            "ftInfAUExpanded": "(G (AnomalyDetected -> (F PinpointProblem)))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc38ff-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R13-K",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "During the Destructive re-entry\na mode of operation in use is\nSTANDBY which should both be\ndone when the IM is in a deployed\nconfiguration",
        "comments": "",
        "fulltext": "In DESTRUCTIVEPHASE whenever deployed IM shall eventually satisfy STANDBY",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "DESTRUCTIVEPHASE",
                "deployed",
                "STANDBY"
            ],
            "scope_mode": "DESTRUCTIVEPHASE",
            "scopeTextRange": [
                0,
                18
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(deployed)",
            "regular_condition": "(deployed)",
            "conditionTextRange": [
                20,
                36
            ],
            "component_name": "IM",
            "componentTextRange": [
                38,
                39
            ],
            "timingTextRange": [
                47,
                56
            ],
            "post_condition": "(STANDBY)",
            "responseTextRange": [
                58,
                72
            ],
            "diagramVariables": "M = <b><i>DESTRUCTIVEPHASE</i></b>, CC = <b><i>(deployed)</i></b>, Response = <b><i>(STANDBY)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>DESTRUCTIVEPHASE</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(deployed)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "DESTRUCTIVEPHASE",
            "scope_mode_ft": "DESTRUCTIVEPHASE",
            "scope_mode_pctl": "DESTRUCTIVEPHASE",
            "regular_condition_unexp_pt": "deployed",
            "regular_condition_unexp_ft": "deployed",
            "regular_condition_unexp_pctl": "deployed",
            "regular_condition_SMV_pt": "deployed",
            "regular_condition_SMV_ft": "deployed",
            "regular_condition_PRISM_pctl": "deployed",
            "post_condition_unexp_pt": "STANDBY",
            "post_condition_unexp_ft": "STANDBY",
            "post_condition_unexp_pctl": "STANDBY",
            "post_condition_SMV_pt": "STANDBY",
            "post_condition_SMV_ft": "STANDBY",
            "post_condition_PRISM_pctl": "STANDBY",
            "ft": "((LAST V ((! (Fin_DESTRUCTIVEPHASE & (! LAST))) | (X ((Lin_DESTRUCTIVEPHASE | LAST) V (deployed -> ((! (Lin_DESTRUCTIVEPHASE | LAST)) U STANDBY)))))) & (DESTRUCTIVEPHASE -> ((Lin_DESTRUCTIVEPHASE | LAST) V (deployed -> ((! (Lin_DESTRUCTIVEPHASE | LAST)) U STANDBY)))))",
            "pt": "((H (Lin_DESTRUCTIVEPHASE -> (Y (((! deployed) S ((! deployed) & Fin_DESTRUCTIVEPHASE)) | (! ((! STANDBY) S ((! STANDBY) & deployed))))))) & (((! Lin_DESTRUCTIVEPHASE) S ((! Lin_DESTRUCTIVEPHASE) & Fin_DESTRUCTIVEPHASE)) -> (((! deployed) S ((! deployed) & Fin_DESTRUCTIVEPHASE)) | (! ((! STANDBY) S ((! STANDBY) & deployed))))))",
            "pctl": "P>=1[((G ((! (Fin_DESTRUCTIVEPHASE & (! LAST))) | (X (Lin_DESTRUCTIVEPHASE R (deployed => (P>=1[((! Lin_DESTRUCTIVEPHASE) U STANDBY)])))))) & (DESTRUCTIVEPHASE => (Lin_DESTRUCTIVEPHASE | (Lin_DESTRUCTIVEPHASE R (deployed => (P>=1[((! Lin_DESTRUCTIVEPHASE) U STANDBY)]))))))]",
            "ptExpanded": "((H (((! DESTRUCTIVEPHASE) & (Y DESTRUCTIVEPHASE)) -> (Y (((! deployed) S ((! deployed) & (DESTRUCTIVEPHASE & (Z (! DESTRUCTIVEPHASE))))) | (! ((! STANDBY) S ((! STANDBY) & deployed))))))) & (((! ((! DESTRUCTIVEPHASE) & (Y DESTRUCTIVEPHASE))) S ((! ((! DESTRUCTIVEPHASE) & (Y DESTRUCTIVEPHASE))) & (DESTRUCTIVEPHASE & (Z (! DESTRUCTIVEPHASE))))) -> (((! deployed) S ((! deployed) & (DESTRUCTIVEPHASE & (Z (! DESTRUCTIVEPHASE))))) | (! ((! STANDBY) S ((! STANDBY) & deployed))))))",
            "CoCoSpecCode": "(H(((not (DESTRUCTIVEPHASE) and YtoPre(DESTRUCTIVEPHASE)) => YtoPre((SI((DESTRUCTIVEPHASE and ZtoPre(not (DESTRUCTIVEPHASE))),not (deployed)) or not (SI(deployed,not (STANDBY))))))) and (SI((DESTRUCTIVEPHASE and ZtoPre(not (DESTRUCTIVEPHASE))),not ((not (DESTRUCTIVEPHASE) and YtoPre(DESTRUCTIVEPHASE)))) => (SI((DESTRUCTIVEPHASE and ZtoPre(not (DESTRUCTIVEPHASE))),not (deployed)) or not (SI(deployed,not (STANDBY))))))",
            "ftExpanded": "((LAST V ((! ((((! DESTRUCTIVEPHASE) & (! LAST)) & (X DESTRUCTIVEPHASE)) & (! LAST))) | (X ((((DESTRUCTIVEPHASE & (! LAST)) & (X (! DESTRUCTIVEPHASE))) | LAST) V (deployed -> ((! (((DESTRUCTIVEPHASE & (! LAST)) & (X (! DESTRUCTIVEPHASE))) | LAST)) U STANDBY)))))) & (DESTRUCTIVEPHASE -> ((((DESTRUCTIVEPHASE & (! LAST)) & (X (! DESTRUCTIVEPHASE))) | LAST) V (deployed -> ((! (((DESTRUCTIVEPHASE & (! LAST)) & (X (! DESTRUCTIVEPHASE))) | LAST)) U STANDBY)))))",
            "pctlExpanded": "P>=1[((G ((! (((! DESTRUCTIVEPHASE) & (X DESTRUCTIVEPHASE)) & (! false))) | (X ((DESTRUCTIVEPHASE & (X (! DESTRUCTIVEPHASE))) R (deployed => (P>=1[((! (DESTRUCTIVEPHASE & (X (! DESTRUCTIVEPHASE)))) U STANDBY)])))))) & (DESTRUCTIVEPHASE => ((DESTRUCTIVEPHASE & (X (! DESTRUCTIVEPHASE))) | ((DESTRUCTIVEPHASE & (X (! DESTRUCTIVEPHASE))) R (deployed => (P>=1[((! (DESTRUCTIVEPHASE & (X (! DESTRUCTIVEPHASE)))) U STANDBY)]))))))]",
            "ftInfAUExpanded": "((G ((! ((! DESTRUCTIVEPHASE) & (X DESTRUCTIVEPHASE))) | (X ((DESTRUCTIVEPHASE & (X (! DESTRUCTIVEPHASE))) V (deployed -> ((! (DESTRUCTIVEPHASE & (X (! DESTRUCTIVEPHASE)))) U STANDBY)))))) & (DESTRUCTIVEPHASE -> ((DESTRUCTIVEPHASE & (X (! DESTRUCTIVEPHASE))) V (deployed -> ((! (DESTRUCTIVEPHASE & (X (! DESTRUCTIVEPHASE)))) U STANDBY)))))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc3900-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R23",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "If second and third jets are required,\nthey are similarly selected on the\nbasis of the second and third largest\nscalar products.",
        "comments": "",
        "fulltext": "Whenever SecondJet | ThirdJet SRC shall immediately satisfy SelectNeededJet",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "SecondJet",
                "ThirdJet",
                "SelectNeededJet"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(SecondJet | ThirdJet)",
            "regular_condition": "(SecondJet | ThirdJet)",
            "conditionTextRange": [
                0,
                28
            ],
            "component_name": "SRC",
            "componentTextRange": [
                30,
                32
            ],
            "timingTextRange": [
                40,
                50
            ],
            "post_condition": "(SelectNeededJet)",
            "responseTextRange": [
                52,
                74
            ],
            "diagramVariables": "CC = <b><i>(SecondJet | ThirdJet)</i></b>, Response = <b><i>(SelectNeededJet)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(SecondJet | ThirdJet)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(SecondJet | ThirdJet)",
            "regular_condition_unexp_ft": "(SecondJet | ThirdJet)",
            "regular_condition_unexp_pctl": "(SecondJet | ThirdJet)",
            "regular_condition_SMV_pt": "(SecondJet | ThirdJet)",
            "regular_condition_SMV_ft": "(SecondJet | ThirdJet)",
            "regular_condition_PRISM_pctl": "(SecondJet | ThirdJet)",
            "post_condition_unexp_pt": "SelectNeededJet",
            "post_condition_unexp_ft": "SelectNeededJet",
            "post_condition_unexp_pctl": "SelectNeededJet",
            "post_condition_SMV_pt": "SelectNeededJet",
            "post_condition_SMV_ft": "SelectNeededJet",
            "post_condition_PRISM_pctl": "SelectNeededJet",
            "ft": "(LAST V ((SecondJet | ThirdJet) -> SelectNeededJet))",
            "pt": "(H ((SecondJet | ThirdJet) -> SelectNeededJet))",
            "pctl": "P>=1[(G ((SecondJet | ThirdJet) => (P>=1[SelectNeededJet])))]",
            "ptExpanded": "(H ((SecondJet | ThirdJet) -> SelectNeededJet))",
            "CoCoSpecCode": "H(((SecondJet or ThirdJet) => SelectNeededJet))",
            "ftExpanded": "(LAST V ((SecondJet | ThirdJet) -> SelectNeededJet))",
            "pctlExpanded": "P>=1[(G ((SecondJet | ThirdJet) => (P>=1[SelectNeededJet])))]",
            "ftInfAUExpanded": "(G ((SecondJet | ThirdJet) -> SelectNeededJet))",
            "component": "SRC"
        },
        "status": "",
        "_id": "eafc3901-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R59-B",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "we are considering using Astrobee’s\nlights and/or speaker to signal when\nit enters a hatchway",
        "comments": "",
        "fulltext": "Whenever EntersHatchway Astrobee shall immediately satisfy EntranceAlarm",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "EntersHatchway",
                "EntranceAlarm"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(EntersHatchway)",
            "regular_condition": "(EntersHatchway)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                24,
                31
            ],
            "timingTextRange": [
                39,
                49
            ],
            "post_condition": "(EntranceAlarm)",
            "responseTextRange": [
                51,
                71
            ],
            "diagramVariables": "CC = <b><i>(EntersHatchway)</i></b>, Response = <b><i>(EntranceAlarm)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(EntersHatchway)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "EntersHatchway",
            "regular_condition_unexp_ft": "EntersHatchway",
            "regular_condition_unexp_pctl": "EntersHatchway",
            "regular_condition_SMV_pt": "EntersHatchway",
            "regular_condition_SMV_ft": "EntersHatchway",
            "regular_condition_PRISM_pctl": "EntersHatchway",
            "post_condition_unexp_pt": "EntranceAlarm",
            "post_condition_unexp_ft": "EntranceAlarm",
            "post_condition_unexp_pctl": "EntranceAlarm",
            "post_condition_SMV_pt": "EntranceAlarm",
            "post_condition_SMV_ft": "EntranceAlarm",
            "post_condition_PRISM_pctl": "EntranceAlarm",
            "ft": "(LAST V (EntersHatchway -> EntranceAlarm))",
            "pt": "(H (EntersHatchway -> EntranceAlarm))",
            "pctl": "P>=1[(G (EntersHatchway => (P>=1[EntranceAlarm])))]",
            "ptExpanded": "(H (EntersHatchway -> EntranceAlarm))",
            "CoCoSpecCode": "H((EntersHatchway => EntranceAlarm))",
            "ftExpanded": "(LAST V (EntersHatchway -> EntranceAlarm))",
            "pctlExpanded": "P>=1[(G (EntersHatchway => (P>=1[EntranceAlarm])))]",
            "ftInfAUExpanded": "(G (EntersHatchway -> EntranceAlarm))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc3902-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R9-A",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Safe mode: In IM safe mode all\ncomponents are activated at limited\nlevel (adopted in case of contin-\ngency)",
        "comments": "",
        "fulltext": "In SAFEMODE IM shall always satisfy components_limited_level",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "SAFEMODE",
                "components_limited_level"
            ],
            "scope_mode": "SAFEMODE",
            "scopeTextRange": [
                0,
                10
            ],
            "component_name": "IM",
            "componentTextRange": [
                12,
                13
            ],
            "timingTextRange": [
                21,
                26
            ],
            "post_condition": "(components_limited_level)",
            "responseTextRange": [
                28,
                59
            ],
            "diagramVariables": "M = <b><i>SAFEMODE</i></b>, Response = <b><i>(components_limited_level)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SAFEMODE</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "SAFEMODE",
            "scope_mode_ft": "SAFEMODE",
            "scope_mode_pctl": "SAFEMODE",
            "post_condition_unexp_pt": "components_limited_level",
            "post_condition_unexp_ft": "components_limited_level",
            "post_condition_unexp_pctl": "components_limited_level",
            "post_condition_SMV_pt": "components_limited_level",
            "post_condition_SMV_ft": "components_limited_level",
            "post_condition_PRISM_pctl": "components_limited_level",
            "ft": "(LAST V (SAFEMODE -> components_limited_level))",
            "pt": "(H (SAFEMODE -> components_limited_level))",
            "pctl": "P>=1[((G ((! (Fin_SAFEMODE & (! LAST))) | (X (P>=1[(Lin_SAFEMODE R components_limited_level)])))) & (SAFEMODE => (Lin_SAFEMODE | (P>=1[(Lin_SAFEMODE R components_limited_level)]))))]",
            "ptExpanded": "(H (SAFEMODE -> components_limited_level))",
            "CoCoSpecCode": "H((SAFEMODE => components_limited_level))",
            "ftExpanded": "(LAST V (SAFEMODE -> components_limited_level))",
            "pctlExpanded": "P>=1[((G ((! (((! SAFEMODE) & (X SAFEMODE)) & (! false))) | (X (P>=1[((SAFEMODE & (X (! SAFEMODE))) R components_limited_level)])))) & (SAFEMODE => ((SAFEMODE & (X (! SAFEMODE))) | (P>=1[((SAFEMODE & (X (! SAFEMODE))) R components_limited_level)]))))]",
            "ftInfAUExpanded": "(G (SAFEMODE -> components_limited_level))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc3903-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R45",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "This type of data could be supple-\nmented with denser, though shorter\nduration, measurements from a mo-\nbile platform. The Radiation En-\nvironment Monitor (REM) hard-\nware developed at the University of\nHouston and NASA Johnson Space\nCenter is an example of the sort of\nsmall, light-weight sensor that As-\ntrobee could carry to create higher\nresolution maps of the ISS environ-\nment.",
        "comments": "",
        "fulltext": "Astrobee shall eventually satisfy RadiationLocation & RadiationSurvey",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "RadiationLocation",
                "RadiationSurvey"
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                24
            ],
            "post_condition": "(RadiationLocation & RadiationSurvey)",
            "responseTextRange": [
                26,
                68
            ],
            "diagramVariables": "Response = <b><i>(RadiationLocation & RadiationSurvey)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(RadiationLocation & RadiationSurvey)",
            "post_condition_unexp_ft": "(RadiationLocation & RadiationSurvey)",
            "post_condition_unexp_pctl": "(RadiationLocation & RadiationSurvey)",
            "post_condition_SMV_pt": "(RadiationLocation & RadiationSurvey)",
            "post_condition_SMV_ft": "(RadiationLocation & RadiationSurvey)",
            "post_condition_PRISM_pctl": "(RadiationLocation & RadiationSurvey)",
            "ft": "((! LAST) U (RadiationLocation & RadiationSurvey))",
            "pt": "(O (RadiationLocation & RadiationSurvey))",
            "pctl": "(P>=1[(F (RadiationLocation & RadiationSurvey))])",
            "ptExpanded": "(O (RadiationLocation & RadiationSurvey))",
            "CoCoSpecCode": "O((RadiationLocation and RadiationSurvey))",
            "ftExpanded": "((! LAST) U (RadiationLocation & RadiationSurvey))",
            "pctlExpanded": "(P>=1[(F (RadiationLocation & RadiationSurvey))])",
            "ftInfAUExpanded": "(F (RadiationLocation & RadiationSurvey))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc3904-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R33-1",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The system shall not change the pi-\nlot flying side unless the Transfer\nSwitch is pressed.",
        "comments": "",
        "fulltext": "FGS shall until switch satisfy !SwitchSides",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "null",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "switch",
                "SwitchSides"
            ],
            "component_name": "FGS",
            "componentTextRange": [
                0,
                2
            ],
            "stop_condition": "(switch)",
            "timingTextRange": [
                10,
                21
            ],
            "post_condition": "(! SwitchSides)",
            "responseTextRange": [
                23,
                42
            ],
            "diagramVariables": "SC = <b><i>(switch)</i></b>, Response = <b><i>(! SwitchSides)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(! SwitchSides)",
            "post_condition_unexp_ft": "(! SwitchSides)",
            "post_condition_unexp_pctl": "(! SwitchSides)",
            "post_condition_SMV_pt": "(! SwitchSides)",
            "post_condition_SMV_ft": "(! SwitchSides)",
            "post_condition_PRISM_pctl": "(! SwitchSides)",
            "stop_condition_unexp_pt": "switch",
            "stop_condition_unexp_ft": "switch",
            "stop_condition_PRISM_pctl": "switch",
            "stop_condition_SMV_pt": "switch",
            "stop_condition_SMV_ft": "switch",
            "ft": "((switch V ((! SwitchSides) | switch)) | (LAST V (! SwitchSides)))",
            "pt": "(H ((H (! switch)) -> (! SwitchSides)))",
            "pctl": "(P>=1[((undefined R ((! SwitchSides) | undefined)) | (LAST R (! SwitchSides)))])",
            "ptExpanded": "(H ((H (! switch)) -> (! SwitchSides)))",
            "CoCoSpecCode": "H((H(not (switch)) => not (SwitchSides)))",
            "ftExpanded": "((switch V ((! SwitchSides) | switch)) | (LAST V (! SwitchSides)))",
            "pctlExpanded": "(P>=1[((switch R ((! SwitchSides) | switch)) | (false R (! SwitchSides)))])",
            "ftInfAUExpanded": "(switch V ((! SwitchSides) | switch))",
            "component": "FGS"
        },
        "status": "",
        "_id": "eafc3905-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R14-A",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The launch phase begins ends at\nburn out.",
        "comments": "",
        "fulltext": "Upon LaunchPhase System shall eventually satisfy burnout",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "LaunchPhase",
                "burnout"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(LaunchPhase)",
            "regular_condition": "(LaunchPhase)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "System",
            "componentTextRange": [
                17,
                22
            ],
            "timingTextRange": [
                30,
                39
            ],
            "post_condition": "(burnout)",
            "responseTextRange": [
                41,
                55
            ],
            "diagramVariables": "TC = <b><i>(LaunchPhase)</i></b>, Response = <b><i>(burnout)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(LaunchPhase)</i></b> is true and any point in the interval where <b><i>(LaunchPhase)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "LaunchPhase",
            "regular_condition_unexp_ft": "LaunchPhase",
            "regular_condition_unexp_pctl": "LaunchPhase",
            "regular_condition_SMV_pt": "LaunchPhase",
            "regular_condition_SMV_ft": "LaunchPhase",
            "regular_condition_PRISM_pctl": "LaunchPhase",
            "post_condition_unexp_pt": "burnout",
            "post_condition_unexp_ft": "burnout",
            "post_condition_unexp_pctl": "burnout",
            "post_condition_SMV_pt": "burnout",
            "post_condition_SMV_ft": "burnout",
            "post_condition_PRISM_pctl": "burnout",
            "ft": "((LAST V (((! LaunchPhase) & ((! LAST) & (X LaunchPhase))) -> (X ((! LAST) U burnout)))) & (LaunchPhase -> ((! LAST) U burnout)))",
            "pt": "((H (! LaunchPhase)) | (! ((! burnout) S ((! burnout) & (LaunchPhase & (Z (! LaunchPhase)))))))",
            "pctl": "P>=1[((G (((! LaunchPhase) & (X LaunchPhase)) => (X (P>=1[(F burnout)])))) & (LaunchPhase => (P>=1[(F burnout)])))]",
            "ptExpanded": "((H (! LaunchPhase)) | (! ((! burnout) S ((! burnout) & (LaunchPhase & (Z (! LaunchPhase)))))))",
            "CoCoSpecCode": "(H(not (LaunchPhase)) or not (SI((LaunchPhase and ZtoPre(not (LaunchPhase))),not (burnout))))",
            "ftExpanded": "((LAST V (((! LaunchPhase) & ((! LAST) & (X LaunchPhase))) -> (X ((! LAST) U burnout)))) & (LaunchPhase -> ((! LAST) U burnout)))",
            "pctlExpanded": "P>=1[((G (((! LaunchPhase) & (X LaunchPhase)) => (X (P>=1[(F burnout)])))) & (LaunchPhase => (P>=1[(F burnout)])))]",
            "ftInfAUExpanded": "((G (((! LaunchPhase) & (X LaunchPhase)) -> (X (F burnout)))) & (LaunchPhase -> (F burnout)))",
            "component": "System"
        },
        "status": "",
        "_id": "eafc3906-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R74",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Otherwise, it is assumed to be held\nby the astronaut’s hands, and ma-\nneuver control is turned off",
        "comments": "",
        "fulltext": "In CollisonMode if !(VelocityVariances <LowerVelocityThreshold) | !(AccelerationVariances <LowerAccelerationThreshold) IntBall2 shall immediately satisfy ManeuverControl=0 & AstronautControl",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "CollisonMode",
                "VelocityVariances",
                "LowerVelocityThreshold",
                "AccelerationVariances",
                "LowerAccelerationThreshold",
                "ManeuverControl",
                "AstronautControl"
            ],
            "scope_mode": "CollisonMode",
            "scopeTextRange": [
                0,
                14
            ],
            "qualifier_word": "if",
            "pre_condition": "(! ( VelocityVariances < LowerVelocityThreshold ) | ! ( AccelerationVariances < LowerAccelerationThreshold ))",
            "regular_condition": "(! ( VelocityVariances < LowerVelocityThreshold ) | ! ( AccelerationVariances < LowerAccelerationThreshold ))",
            "conditionTextRange": [
                16,
                117
            ],
            "component_name": "IntBall2",
            "componentTextRange": [
                119,
                126
            ],
            "timingTextRange": [
                134,
                144
            ],
            "post_condition": "(ManeuverControl = 0 & AstronautControl)",
            "responseTextRange": [
                146,
                189
            ],
            "diagramVariables": "M = <b><i>CollisonMode</i></b>, TC = <b><i>(! ( VelocityVariances < LowerVelocityThreshold ) | ! ( AccelerationVariances < LowerAccelerationThreshold ))</i></b>, Response = <b><i>(ManeuverControl = 0 & AstronautControl)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>CollisonMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(! ( VelocityVariances < LowerVelocityThreshold ) | ! ( AccelerationVariances < LowerAccelerationThreshold ))</i></b> is true and any point in the interval where <b><i>(! ( VelocityVariances < LowerVelocityThreshold ) | ! ( AccelerationVariances < LowerAccelerationThreshold ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "CollisonMode",
            "scope_mode_ft": "CollisonMode",
            "scope_mode_pctl": "CollisonMode",
            "regular_condition_unexp_pt": "((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))",
            "regular_condition_unexp_ft": "((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))",
            "regular_condition_unexp_pctl": "((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))",
            "regular_condition_SMV_pt": "((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))",
            "regular_condition_SMV_ft": "((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))",
            "regular_condition_PRISM_pctl": "((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))",
            "post_condition_unexp_pt": "((ManeuverControl = 0) & AstronautControl)",
            "post_condition_unexp_ft": "((ManeuverControl = 0) & AstronautControl)",
            "post_condition_unexp_pctl": "((ManeuverControl = 0) & AstronautControl)",
            "post_condition_SMV_pt": "((ManeuverControl = 0) & AstronautControl)",
            "post_condition_SMV_ft": "((ManeuverControl = 0) & AstronautControl)",
            "post_condition_PRISM_pctl": "((ManeuverControl = 0) & AstronautControl)",
            "ft": "((LAST V ((! (Fin_CollisonMode & (! LAST))) | (X (((Lin_CollisonMode | LAST) V (((! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & ((! LAST) & ((X ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & (! (Lin_CollisonMode | LAST))))) -> ((X ((ManeuverControl = 0) & AstronautControl)) & (! (Lin_CollisonMode | LAST))))) & (((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) -> ((ManeuverControl = 0) & AstronautControl)))))) & (CollisonMode -> (((Lin_CollisonMode | LAST) V (((! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & ((! LAST) & ((X ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & (! (Lin_CollisonMode | LAST))))) -> ((X ((ManeuverControl = 0) & AstronautControl)) & (! (Lin_CollisonMode | LAST))))) & (((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) -> ((ManeuverControl = 0) & AstronautControl)))))",
            "pt": "((H (Lin_CollisonMode -> (Y (((((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) & ((Y (! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))))) | Fin_CollisonMode)) -> ((ManeuverControl = 0) & AstronautControl)) S (((((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) & ((Y (! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))))) | Fin_CollisonMode)) -> ((ManeuverControl = 0) & AstronautControl)) & Fin_CollisonMode))))) & (((! Lin_CollisonMode) S ((! Lin_CollisonMode) & Fin_CollisonMode)) -> (((((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) & ((Y (! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))))) | Fin_CollisonMode)) -> ((ManeuverControl = 0) & AstronautControl)) S (((((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) & ((Y (! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))))) | Fin_CollisonMode)) -> ((ManeuverControl = 0) & AstronautControl)) & Fin_CollisonMode))))",
            "pctl": "P>=1[((G ((! (Fin_CollisonMode & (! LAST))) | (X ((Lin_CollisonMode R (((! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & ((X ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & (! Lin_CollisonMode))) => ((X (P>=1[((ManeuverControl = 0) & AstronautControl)])) & (! Lin_CollisonMode)))) & (((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) => (P>=1[((ManeuverControl = 0) & AstronautControl)])))))) & (CollisonMode => (Lin_CollisonMode | ((Lin_CollisonMode R (((! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & ((X ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & (! Lin_CollisonMode))) => ((X (P>=1[((ManeuverControl = 0) & AstronautControl)])) & (! Lin_CollisonMode)))) & (((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) => (P>=1[((ManeuverControl = 0) & AstronautControl)]))))))]",
            "ptExpanded": "((H (((! CollisonMode) & (Y CollisonMode)) -> (Y (((((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) & ((Y (! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))))) | (CollisonMode & (Z (! CollisonMode))))) -> ((ManeuverControl = 0) & AstronautControl)) S (((((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) & ((Y (! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))))) | (CollisonMode & (Z (! CollisonMode))))) -> ((ManeuverControl = 0) & AstronautControl)) & (CollisonMode & (Z (! CollisonMode)))))))) & (((! ((! CollisonMode) & (Y CollisonMode))) S ((! ((! CollisonMode) & (Y CollisonMode))) & (CollisonMode & (Z (! CollisonMode))))) -> (((((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) & ((Y (! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))))) | (CollisonMode & (Z (! CollisonMode))))) -> ((ManeuverControl = 0) & AstronautControl)) S (((((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) & ((Y (! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))))) | (CollisonMode & (Z (! CollisonMode))))) -> ((ManeuverControl = 0) & AstronautControl)) & (CollisonMode & (Z (! CollisonMode)))))))",
            "CoCoSpecCode": "(H(((not (CollisonMode) and YtoPre(CollisonMode)) => YtoPre(SI((CollisonMode and ZtoPre(not (CollisonMode))),(((not ((VelocityVariances < LowerVelocityThreshold)) or not ((AccelerationVariances < LowerAccelerationThreshold))) and (YtoPre(not ((not ((VelocityVariances < LowerVelocityThreshold)) or not ((AccelerationVariances < LowerAccelerationThreshold))))) or (CollisonMode and ZtoPre(not (CollisonMode))))) => ((ManeuverControl = 0) and AstronautControl)))))) and (SI((CollisonMode and ZtoPre(not (CollisonMode))),not ((not (CollisonMode) and YtoPre(CollisonMode)))) => SI((CollisonMode and ZtoPre(not (CollisonMode))),(((not ((VelocityVariances < LowerVelocityThreshold)) or not ((AccelerationVariances < LowerAccelerationThreshold))) and (YtoPre(not ((not ((VelocityVariances < LowerVelocityThreshold)) or not ((AccelerationVariances < LowerAccelerationThreshold))))) or (CollisonMode and ZtoPre(not (CollisonMode))))) => ((ManeuverControl = 0) and AstronautControl)))))",
            "ftExpanded": "((LAST V ((! ((((! CollisonMode) & (! LAST)) & (X CollisonMode)) & (! LAST))) | (X (((((CollisonMode & (! LAST)) & (X (! CollisonMode))) | LAST) V (((! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & ((! LAST) & ((X ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & (! (((CollisonMode & (! LAST)) & (X (! CollisonMode))) | LAST))))) -> ((X ((ManeuverControl = 0) & AstronautControl)) & (! (((CollisonMode & (! LAST)) & (X (! CollisonMode))) | LAST))))) & (((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) -> ((ManeuverControl = 0) & AstronautControl)))))) & (CollisonMode -> (((((CollisonMode & (! LAST)) & (X (! CollisonMode))) | LAST) V (((! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & ((! LAST) & ((X ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & (! (((CollisonMode & (! LAST)) & (X (! CollisonMode))) | LAST))))) -> ((X ((ManeuverControl = 0) & AstronautControl)) & (! (((CollisonMode & (! LAST)) & (X (! CollisonMode))) | LAST))))) & (((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) -> ((ManeuverControl = 0) & AstronautControl)))))",
            "pctlExpanded": "P>=1[((G ((! (((! CollisonMode) & (X CollisonMode)) & (! false))) | (X (((CollisonMode & (X (! CollisonMode))) R (((! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & ((X ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & (! (CollisonMode & (X (! CollisonMode)))))) => ((X (P>=1[((ManeuverControl = 0) & AstronautControl)])) & (! (CollisonMode & (X (! CollisonMode))))))) & (((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) => (P>=1[((ManeuverControl = 0) & AstronautControl)])))))) & (CollisonMode => ((CollisonMode & (X (! CollisonMode))) | (((CollisonMode & (X (! CollisonMode))) R (((! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & ((X ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & (! (CollisonMode & (X (! CollisonMode)))))) => ((X (P>=1[((ManeuverControl = 0) & AstronautControl)])) & (! (CollisonMode & (X (! CollisonMode))))))) & (((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) => (P>=1[((ManeuverControl = 0) & AstronautControl)]))))))]",
            "ftInfAUExpanded": "((G ((! ((! CollisonMode) & (X CollisonMode))) | (X (((CollisonMode & (X (! CollisonMode))) V (((! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & ((X ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & (! (CollisonMode & (X (! CollisonMode)))))) -> ((X ((ManeuverControl = 0) & AstronautControl)) & (! (CollisonMode & (X (! CollisonMode))))))) & (((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) -> ((ManeuverControl = 0) & AstronautControl)))))) & (CollisonMode -> (((CollisonMode & (X (! CollisonMode))) V (((! ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & ((X ((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold)))) & (! (CollisonMode & (X (! CollisonMode)))))) -> ((X ((ManeuverControl = 0) & AstronautControl)) & (! (CollisonMode & (X (! CollisonMode))))))) & (((! (VelocityVariances < LowerVelocityThreshold)) | (! (AccelerationVariances < LowerAccelerationThreshold))) -> ((ManeuverControl = 0) & AstronautControl)))))",
            "component": "IntBall2"
        },
        "status": "",
        "_id": "eafc3907-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R66",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "When flight controllers have a ques-\ntion about something, they can use\nthe robot to get an updated view,\nfilling a role currently played by\ncrew on ISS",
        "comments": "",
        "fulltext": "Whenever SpotCheck Astrobee shall eventually satisfy UpdateMap",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "SpotCheck",
                "UpdateMap"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(SpotCheck)",
            "regular_condition": "(SpotCheck)",
            "conditionTextRange": [
                0,
                17
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                19,
                26
            ],
            "timingTextRange": [
                34,
                43
            ],
            "post_condition": "(UpdateMap)",
            "responseTextRange": [
                45,
                61
            ],
            "diagramVariables": "CC = <b><i>(SpotCheck)</i></b>, Response = <b><i>(UpdateMap)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(SpotCheck)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "SpotCheck",
            "regular_condition_unexp_ft": "SpotCheck",
            "regular_condition_unexp_pctl": "SpotCheck",
            "regular_condition_SMV_pt": "SpotCheck",
            "regular_condition_SMV_ft": "SpotCheck",
            "regular_condition_PRISM_pctl": "SpotCheck",
            "post_condition_unexp_pt": "UpdateMap",
            "post_condition_unexp_ft": "UpdateMap",
            "post_condition_unexp_pctl": "UpdateMap",
            "post_condition_SMV_pt": "UpdateMap",
            "post_condition_SMV_ft": "UpdateMap",
            "post_condition_PRISM_pctl": "UpdateMap",
            "ft": "(LAST V (SpotCheck -> ((! LAST) U UpdateMap)))",
            "pt": "((H (! SpotCheck)) | (! ((! UpdateMap) S ((! UpdateMap) & SpotCheck))))",
            "pctl": "P>=1[(G (SpotCheck => (P>=1[(F UpdateMap)])))]",
            "ptExpanded": "((H (! SpotCheck)) | (! ((! UpdateMap) S ((! UpdateMap) & SpotCheck))))",
            "CoCoSpecCode": "(H(not (SpotCheck)) or not (SI(SpotCheck,not (UpdateMap))))",
            "ftExpanded": "(LAST V (SpotCheck -> ((! LAST) U UpdateMap)))",
            "pctlExpanded": "P>=1[(G (SpotCheck => (P>=1[(F UpdateMap)])))]",
            "ftInfAUExpanded": "(G (SpotCheck -> (F UpdateMap)))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc3908-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R9-B",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The IM shall be isolated in case of\ncontingency.",
        "comments": "",
        "fulltext": "In SAFEMODE whenever CONTINGENCY IM shall immediately satisfy isolated",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "SAFEMODE",
                "CONTINGENCY",
                "isolated"
            ],
            "scope_mode": "SAFEMODE",
            "scopeTextRange": [
                0,
                10
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(CONTINGENCY)",
            "regular_condition": "(CONTINGENCY)",
            "conditionTextRange": [
                12,
                31
            ],
            "component_name": "IM",
            "componentTextRange": [
                33,
                34
            ],
            "timingTextRange": [
                42,
                52
            ],
            "post_condition": "(isolated)",
            "responseTextRange": [
                54,
                69
            ],
            "diagramVariables": "M = <b><i>SAFEMODE</i></b>, CC = <b><i>(CONTINGENCY)</i></b>, Response = <b><i>(isolated)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SAFEMODE</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(CONTINGENCY)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "SAFEMODE",
            "scope_mode_ft": "SAFEMODE",
            "scope_mode_pctl": "SAFEMODE",
            "regular_condition_unexp_pt": "CONTINGENCY",
            "regular_condition_unexp_ft": "CONTINGENCY",
            "regular_condition_unexp_pctl": "CONTINGENCY",
            "regular_condition_SMV_pt": "CONTINGENCY",
            "regular_condition_SMV_ft": "CONTINGENCY",
            "regular_condition_PRISM_pctl": "CONTINGENCY",
            "post_condition_unexp_pt": "isolated",
            "post_condition_unexp_ft": "isolated",
            "post_condition_unexp_pctl": "isolated",
            "post_condition_SMV_pt": "isolated",
            "post_condition_SMV_ft": "isolated",
            "post_condition_PRISM_pctl": "isolated",
            "ft": "((LAST V ((! (Fin_SAFEMODE & (! LAST))) | (X ((Lin_SAFEMODE | LAST) V (CONTINGENCY -> isolated))))) & (SAFEMODE -> ((Lin_SAFEMODE | LAST) V (CONTINGENCY -> isolated))))",
            "pt": "((H (Lin_SAFEMODE -> (Y ((CONTINGENCY -> isolated) S ((CONTINGENCY -> isolated) & Fin_SAFEMODE))))) & (((! Lin_SAFEMODE) S ((! Lin_SAFEMODE) & Fin_SAFEMODE)) -> ((CONTINGENCY -> isolated) S ((CONTINGENCY -> isolated) & Fin_SAFEMODE))))",
            "pctl": "P>=1[((G ((! (Fin_SAFEMODE & (! LAST))) | (X (Lin_SAFEMODE R (CONTINGENCY => (P>=1[isolated])))))) & (SAFEMODE => (Lin_SAFEMODE | (Lin_SAFEMODE R (CONTINGENCY => (P>=1[isolated]))))))]",
            "ptExpanded": "((H (((! SAFEMODE) & (Y SAFEMODE)) -> (Y ((CONTINGENCY -> isolated) S ((CONTINGENCY -> isolated) & (SAFEMODE & (Z (! SAFEMODE)))))))) & (((! ((! SAFEMODE) & (Y SAFEMODE))) S ((! ((! SAFEMODE) & (Y SAFEMODE))) & (SAFEMODE & (Z (! SAFEMODE))))) -> ((CONTINGENCY -> isolated) S ((CONTINGENCY -> isolated) & (SAFEMODE & (Z (! SAFEMODE)))))))",
            "CoCoSpecCode": "(H(((not (SAFEMODE) and YtoPre(SAFEMODE)) => YtoPre(SI((SAFEMODE and ZtoPre(not (SAFEMODE))),(CONTINGENCY => isolated))))) and (SI((SAFEMODE and ZtoPre(not (SAFEMODE))),not ((not (SAFEMODE) and YtoPre(SAFEMODE)))) => SI((SAFEMODE and ZtoPre(not (SAFEMODE))),(CONTINGENCY => isolated))))",
            "ftExpanded": "((LAST V ((! ((((! SAFEMODE) & (! LAST)) & (X SAFEMODE)) & (! LAST))) | (X ((((SAFEMODE & (! LAST)) & (X (! SAFEMODE))) | LAST) V (CONTINGENCY -> isolated))))) & (SAFEMODE -> ((((SAFEMODE & (! LAST)) & (X (! SAFEMODE))) | LAST) V (CONTINGENCY -> isolated))))",
            "pctlExpanded": "P>=1[((G ((! (((! SAFEMODE) & (X SAFEMODE)) & (! false))) | (X ((SAFEMODE & (X (! SAFEMODE))) R (CONTINGENCY => (P>=1[isolated])))))) & (SAFEMODE => ((SAFEMODE & (X (! SAFEMODE))) | ((SAFEMODE & (X (! SAFEMODE))) R (CONTINGENCY => (P>=1[isolated]))))))]",
            "ftInfAUExpanded": "((G ((! ((! SAFEMODE) & (X SAFEMODE))) | (X ((SAFEMODE & (X (! SAFEMODE))) V (CONTINGENCY -> isolated))))) & (SAFEMODE -> ((SAFEMODE & (X (! SAFEMODE))) V (CONTINGENCY -> isolated))))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc3909-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R24-A",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "If three jets satisfying the given\nthresholds cannot be found, the al-\ngorithm considers pairs, or, as a last\nresort, single jets",
        "comments": "",
        "fulltext": "Whenever !ThreeJets SRC shall immediately satisfy Considerpairs",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "ThreeJets",
                "Considerpairs"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(! ThreeJets)",
            "regular_condition": "(! ThreeJets)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "SRC",
            "componentTextRange": [
                20,
                22
            ],
            "timingTextRange": [
                30,
                40
            ],
            "post_condition": "(Considerpairs)",
            "responseTextRange": [
                42,
                62
            ],
            "diagramVariables": "CC = <b><i>(! ThreeJets)</i></b>, Response = <b><i>(Considerpairs)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(! ThreeJets)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(! ThreeJets)",
            "regular_condition_unexp_ft": "(! ThreeJets)",
            "regular_condition_unexp_pctl": "(! ThreeJets)",
            "regular_condition_SMV_pt": "(! ThreeJets)",
            "regular_condition_SMV_ft": "(! ThreeJets)",
            "regular_condition_PRISM_pctl": "(! ThreeJets)",
            "post_condition_unexp_pt": "Considerpairs",
            "post_condition_unexp_ft": "Considerpairs",
            "post_condition_unexp_pctl": "Considerpairs",
            "post_condition_SMV_pt": "Considerpairs",
            "post_condition_SMV_ft": "Considerpairs",
            "post_condition_PRISM_pctl": "Considerpairs",
            "ft": "(LAST V ((! ThreeJets) -> Considerpairs))",
            "pt": "(H ((! ThreeJets) -> Considerpairs))",
            "pctl": "P>=1[(G ((! ThreeJets) => (P>=1[Considerpairs])))]",
            "ptExpanded": "(H ((! ThreeJets) -> Considerpairs))",
            "CoCoSpecCode": "H((not (ThreeJets) => Considerpairs))",
            "ftExpanded": "(LAST V ((! ThreeJets) -> Considerpairs))",
            "pctlExpanded": "P>=1[(G ((! ThreeJets) => (P>=1[Considerpairs])))]",
            "ftInfAUExpanded": "(G ((! ThreeJets) -> Considerpairs))",
            "component": "SRC"
        },
        "status": "",
        "_id": "eafc390a-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R60-A",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "White “Vid” LEDs indicate that\ncameras are in use",
        "comments": "",
        "fulltext": "In VideoRecordingMode Astrobee shall always satisfy VidLED",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "VideoRecordingMode",
                "VidLED"
            ],
            "scope_mode": "VideoRecordingMode",
            "scopeTextRange": [
                0,
                20
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                22,
                29
            ],
            "timingTextRange": [
                37,
                42
            ],
            "post_condition": "(VidLED)",
            "responseTextRange": [
                44,
                57
            ],
            "diagramVariables": "M = <b><i>VideoRecordingMode</i></b>, Response = <b><i>(VidLED)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>VideoRecordingMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "VideoRecordingMode",
            "scope_mode_ft": "VideoRecordingMode",
            "scope_mode_pctl": "VideoRecordingMode",
            "post_condition_unexp_pt": "VidLED",
            "post_condition_unexp_ft": "VidLED",
            "post_condition_unexp_pctl": "VidLED",
            "post_condition_SMV_pt": "VidLED",
            "post_condition_SMV_ft": "VidLED",
            "post_condition_PRISM_pctl": "VidLED",
            "ft": "(LAST V (VideoRecordingMode -> VidLED))",
            "pt": "(H (VideoRecordingMode -> VidLED))",
            "pctl": "P>=1[((G ((! (Fin_VideoRecordingMode & (! LAST))) | (X (P>=1[(Lin_VideoRecordingMode R VidLED)])))) & (VideoRecordingMode => (Lin_VideoRecordingMode | (P>=1[(Lin_VideoRecordingMode R VidLED)]))))]",
            "ptExpanded": "(H (VideoRecordingMode -> VidLED))",
            "CoCoSpecCode": "H((VideoRecordingMode => VidLED))",
            "ftExpanded": "(LAST V (VideoRecordingMode -> VidLED))",
            "pctlExpanded": "P>=1[((G ((! (((! VideoRecordingMode) & (X VideoRecordingMode)) & (! false))) | (X (P>=1[((VideoRecordingMode & (X (! VideoRecordingMode))) R VidLED)])))) & (VideoRecordingMode => ((VideoRecordingMode & (X (! VideoRecordingMode))) | (P>=1[((VideoRecordingMode & (X (! VideoRecordingMode))) R VidLED)]))))]",
            "ftInfAUExpanded": "(G (VideoRecordingMode -> VidLED))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc390b-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R33-2",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The system shall not change the pi-\nlot flying side unless the Transfer\nSwitch is pressed.",
        "comments": "",
        "fulltext": "FGS shall eventually satisfy switch",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "switch"
            ],
            "component_name": "FGS",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                19
            ],
            "post_condition": "(switch)",
            "responseTextRange": [
                21,
                34
            ],
            "diagramVariables": "Response = <b><i>(switch)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "switch",
            "post_condition_unexp_ft": "switch",
            "post_condition_unexp_pctl": "switch",
            "post_condition_SMV_pt": "switch",
            "post_condition_SMV_ft": "switch",
            "post_condition_PRISM_pctl": "switch",
            "ft": "((! LAST) U switch)",
            "pt": "(O switch)",
            "pctl": "(P>=1[(F switch)])",
            "ptExpanded": "(O switch)",
            "CoCoSpecCode": "O(switch)",
            "ftExpanded": "((! LAST) U switch)",
            "pctlExpanded": "(P>=1[(F switch)])",
            "ftInfAUExpanded": "(F switch)",
            "component": "FGS"
        },
        "status": "",
        "_id": "eafc390c-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R46",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The SPHERES satellites, however,\ntriangulate their position using in-\nfrared/ultrasonic beacons, prevent-\ning them from navigating outside\nthe two-meter cube defined by the\nfixed beacon locations.",
        "comments": "",
        "fulltext": "Whenever moving SPHERES shall immediately satisfy x<2 & y<2 & z<2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "moving",
                "x",
                "y",
                "z"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(moving)",
            "regular_condition": "(moving)",
            "conditionTextRange": [
                0,
                14
            ],
            "component_name": "SPHERES",
            "componentTextRange": [
                16,
                22
            ],
            "timingTextRange": [
                30,
                40
            ],
            "post_condition": "(x < 2 & y < 2 & z < 2)",
            "responseTextRange": [
                42,
                64
            ],
            "diagramVariables": "CC = <b><i>(moving)</i></b>, Response = <b><i>(x < 2 & y < 2 & z < 2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(moving)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "moving",
            "regular_condition_unexp_ft": "moving",
            "regular_condition_unexp_pctl": "moving",
            "regular_condition_SMV_pt": "moving",
            "regular_condition_SMV_ft": "moving",
            "regular_condition_PRISM_pctl": "moving",
            "post_condition_unexp_pt": "(((x < 2) & (y < 2)) & (z < 2))",
            "post_condition_unexp_ft": "(((x < 2) & (y < 2)) & (z < 2))",
            "post_condition_unexp_pctl": "(((x < 2) & (y < 2)) & (z < 2))",
            "post_condition_SMV_pt": "(((x < 2) & (y < 2)) & (z < 2))",
            "post_condition_SMV_ft": "(((x < 2) & (y < 2)) & (z < 2))",
            "post_condition_PRISM_pctl": "(((x < 2) & (y < 2)) & (z < 2))",
            "ft": "(LAST V (moving -> (((x < 2) & (y < 2)) & (z < 2))))",
            "pt": "(H (moving -> (((x < 2) & (y < 2)) & (z < 2))))",
            "pctl": "P>=1[(G (moving => (P>=1[(((x < 2) & (y < 2)) & (z < 2))])))]",
            "ptExpanded": "(H (moving -> (((x < 2) & (y < 2)) & (z < 2))))",
            "CoCoSpecCode": "H((moving => (((x < 2) and (y < 2)) and (z < 2))))",
            "ftExpanded": "(LAST V (moving -> (((x < 2) & (y < 2)) & (z < 2))))",
            "pctlExpanded": "P>=1[(G (moving => (P>=1[(((x < 2) & (y < 2)) & (z < 2))])))]",
            "ftInfAUExpanded": "(G (moving -> (((x < 2) & (y < 2)) & (z < 2))))",
            "component": "SPHERES"
        },
        "status": "",
        "_id": "eafc390d-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R75",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "After the astronaut releases the\nrobot, the control for maintaining\nthe pose at the released point is\nrestarted if the variance falls below\nthe lower threshold",
        "comments": "",
        "fulltext": "If AstronautControl=0 & VarianceThreshold <VarianceThreshold IntBall2 shall immediately satisfy MaintainCurrentPose",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "AstronautControl",
                "VarianceThreshold",
                "MaintainCurrentPose"
            ],
            "qualifier_word": "if",
            "pre_condition": "(AstronautControl = 0 & VarianceThreshold < VarianceThreshold)",
            "regular_condition": "(AstronautControl = 0 & VarianceThreshold < VarianceThreshold)",
            "conditionTextRange": [
                0,
                59
            ],
            "component_name": "IntBall2",
            "componentTextRange": [
                61,
                68
            ],
            "timingTextRange": [
                76,
                86
            ],
            "post_condition": "(MaintainCurrentPose)",
            "responseTextRange": [
                88,
                114
            ],
            "diagramVariables": "TC = <b><i>(AstronautControl = 0 & VarianceThreshold < VarianceThreshold)</i></b>, Response = <b><i>(MaintainCurrentPose)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(AstronautControl = 0 & VarianceThreshold < VarianceThreshold)</i></b> is true and any point in the interval where <b><i>(AstronautControl = 0 & VarianceThreshold < VarianceThreshold)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold))",
            "regular_condition_unexp_ft": "((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold))",
            "regular_condition_unexp_pctl": "((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold))",
            "regular_condition_SMV_pt": "((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold))",
            "regular_condition_SMV_ft": "((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold))",
            "regular_condition_PRISM_pctl": "((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold))",
            "post_condition_unexp_pt": "MaintainCurrentPose",
            "post_condition_unexp_ft": "MaintainCurrentPose",
            "post_condition_unexp_pctl": "MaintainCurrentPose",
            "post_condition_SMV_pt": "MaintainCurrentPose",
            "post_condition_SMV_ft": "MaintainCurrentPose",
            "post_condition_PRISM_pctl": "MaintainCurrentPose",
            "ft": "((LAST V (((! ((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold))) & ((! LAST) & (X ((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold))))) -> (X MaintainCurrentPose))) & (((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold)) -> MaintainCurrentPose))",
            "pt": "(H ((((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold)) & (Z (! ((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold))))) -> MaintainCurrentPose))",
            "pctl": "P>=1[((G (((! ((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold))) & (X ((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold)))) => (X (P>=1[MaintainCurrentPose])))) & (((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold)) => (P>=1[MaintainCurrentPose])))]",
            "ptExpanded": "(H ((((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold)) & (Z (! ((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold))))) -> MaintainCurrentPose))",
            "CoCoSpecCode": "H(((((AstronautControl = 0) and (VarianceThreshold < VarianceThreshold)) and ZtoPre(not (((AstronautControl = 0) and (VarianceThreshold < VarianceThreshold))))) => MaintainCurrentPose))",
            "ftExpanded": "((LAST V (((! ((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold))) & ((! LAST) & (X ((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold))))) -> (X MaintainCurrentPose))) & (((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold)) -> MaintainCurrentPose))",
            "pctlExpanded": "P>=1[((G (((! ((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold))) & (X ((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold)))) => (X (P>=1[MaintainCurrentPose])))) & (((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold)) => (P>=1[MaintainCurrentPose])))]",
            "ftInfAUExpanded": "((G (((! ((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold))) & (X ((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold)))) -> (X MaintainCurrentPose))) & (((AstronautControl = 0) & (VarianceThreshold < VarianceThreshold)) -> MaintainCurrentPose))",
            "component": "IntBall2"
        },
        "status": "",
        "_id": "eafc390e-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R24-B",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "If three jets satisfying the given\nthresholds cannot be found, the al-\ngorithm considers pairs, or, as a last\nresort, single jets",
        "comments": "",
        "fulltext": "Whenever !TwoJets SRC shall immediately satisfy Considersingle",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "TwoJets",
                "Considersingle"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(! TwoJets)",
            "regular_condition": "(! TwoJets)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "SRC",
            "componentTextRange": [
                18,
                20
            ],
            "timingTextRange": [
                28,
                38
            ],
            "post_condition": "(Considersingle)",
            "responseTextRange": [
                40,
                61
            ],
            "diagramVariables": "CC = <b><i>(! TwoJets)</i></b>, Response = <b><i>(Considersingle)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(! TwoJets)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(! TwoJets)",
            "regular_condition_unexp_ft": "(! TwoJets)",
            "regular_condition_unexp_pctl": "(! TwoJets)",
            "regular_condition_SMV_pt": "(! TwoJets)",
            "regular_condition_SMV_ft": "(! TwoJets)",
            "regular_condition_PRISM_pctl": "(! TwoJets)",
            "post_condition_unexp_pt": "Considersingle",
            "post_condition_unexp_ft": "Considersingle",
            "post_condition_unexp_pctl": "Considersingle",
            "post_condition_SMV_pt": "Considersingle",
            "post_condition_SMV_ft": "Considersingle",
            "post_condition_PRISM_pctl": "Considersingle",
            "ft": "(LAST V ((! TwoJets) -> Considersingle))",
            "pt": "(H ((! TwoJets) -> Considersingle))",
            "pctl": "P>=1[(G ((! TwoJets) => (P>=1[Considersingle])))]",
            "ptExpanded": "(H ((! TwoJets) -> Considersingle))",
            "CoCoSpecCode": "H((not (TwoJets) => Considersingle))",
            "ftExpanded": "(LAST V ((! TwoJets) -> Considersingle))",
            "pctlExpanded": "P>=1[(G ((! TwoJets) => (P>=1[Considersingle])))]",
            "ftInfAUExpanded": "(G ((! TwoJets) -> Considersingle))",
            "component": "SRC"
        },
        "status": "",
        "_id": "eafc390f-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R9-C",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "In case of contingency safe mode is\nemployed",
        "comments": "",
        "fulltext": "Whenever CONTINGENCY IM shall immediately satisfy SAFEMODE",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "CONTINGENCY",
                "SAFEMODE"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(CONTINGENCY)",
            "regular_condition": "(CONTINGENCY)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "IM",
            "componentTextRange": [
                21,
                22
            ],
            "timingTextRange": [
                30,
                40
            ],
            "post_condition": "(SAFEMODE)",
            "responseTextRange": [
                42,
                57
            ],
            "diagramVariables": "CC = <b><i>(CONTINGENCY)</i></b>, Response = <b><i>(SAFEMODE)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(CONTINGENCY)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "CONTINGENCY",
            "regular_condition_unexp_ft": "CONTINGENCY",
            "regular_condition_unexp_pctl": "CONTINGENCY",
            "regular_condition_SMV_pt": "CONTINGENCY",
            "regular_condition_SMV_ft": "CONTINGENCY",
            "regular_condition_PRISM_pctl": "CONTINGENCY",
            "post_condition_unexp_pt": "SAFEMODE",
            "post_condition_unexp_ft": "SAFEMODE",
            "post_condition_unexp_pctl": "SAFEMODE",
            "post_condition_SMV_pt": "SAFEMODE",
            "post_condition_SMV_ft": "SAFEMODE",
            "post_condition_PRISM_pctl": "SAFEMODE",
            "ft": "(LAST V (CONTINGENCY -> SAFEMODE))",
            "pt": "(H (CONTINGENCY -> SAFEMODE))",
            "pctl": "P>=1[(G (CONTINGENCY => (P>=1[SAFEMODE])))]",
            "ptExpanded": "(H (CONTINGENCY -> SAFEMODE))",
            "CoCoSpecCode": "H((CONTINGENCY => SAFEMODE))",
            "ftExpanded": "(LAST V (CONTINGENCY -> SAFEMODE))",
            "pctlExpanded": "P>=1[(G (CONTINGENCY => (P>=1[SAFEMODE])))]",
            "ftInfAUExpanded": "(G (CONTINGENCY -> SAFEMODE))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc3910-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R14-B",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The Separation phase begins with\nburn out",
        "comments": "",
        "fulltext": "Upon burnout System shall at the next timepoint satisfy SeparationPhase",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "burnout",
                "SeparationPhase"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(burnout)",
            "regular_condition": "(burnout)",
            "conditionTextRange": [
                0,
                11
            ],
            "component_name": "System",
            "componentTextRange": [
                13,
                18
            ],
            "timingTextRange": [
                26,
                46
            ],
            "post_condition": "(SeparationPhase)",
            "responseTextRange": [
                48,
                70
            ],
            "diagramVariables": "TC = <b><i>(burnout)</i></b>, Response = <b><i>(SeparationPhase)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(burnout)</i></b> is true and any point in the interval where <b><i>(burnout)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "burnout",
            "regular_condition_unexp_ft": "burnout",
            "regular_condition_unexp_pctl": "burnout",
            "regular_condition_SMV_pt": "burnout",
            "regular_condition_SMV_ft": "burnout",
            "regular_condition_PRISM_pctl": "burnout",
            "post_condition_unexp_pt": "SeparationPhase",
            "post_condition_unexp_ft": "SeparationPhase",
            "post_condition_unexp_pctl": "SeparationPhase",
            "post_condition_SMV_pt": "SeparationPhase",
            "post_condition_SMV_ft": "SeparationPhase",
            "post_condition_PRISM_pctl": "SeparationPhase",
            "ft": "((LAST V (((! burnout) & ((! LAST) & (X burnout))) -> (X (LAST | (X SeparationPhase))))) & (burnout -> (LAST | (X SeparationPhase))))",
            "pt": "(H ((Y (burnout & (Z (! burnout)))) -> (SeparationPhase | (Z FALSE))))",
            "pctl": "P>=1[((G (((! burnout) & (X burnout)) => (X (P>=1[(LAST | (X SeparationPhase))])))) & (burnout => (P>=1[(LAST | (X SeparationPhase))])))]",
            "ptExpanded": "(H ((Y (burnout & (Z (! burnout)))) -> (SeparationPhase | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre((burnout and ZtoPre(not (burnout)))) => (SeparationPhase or ZtoPre(false))))",
            "ftExpanded": "((LAST V (((! burnout) & ((! LAST) & (X burnout))) -> (X (LAST | (X SeparationPhase))))) & (burnout -> (LAST | (X SeparationPhase))))",
            "pctlExpanded": "P>=1[((G (((! burnout) & (X burnout)) => (X (P>=1[(false | (X SeparationPhase))])))) & (burnout => (P>=1[(false | (X SeparationPhase))])))]",
            "ftInfAUExpanded": "((G (((! burnout) & (X burnout)) -> (X (X SeparationPhase)))) & (burnout -> (X SeparationPhase)))",
            "component": "System"
        },
        "status": "",
        "_id": "eafc3911-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R67",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The first is the observing and plan-\nning phase for acquiring motion in-\nformation of the target satellite and\nplanning when and where the robot\nwill grasp the target satellite",
        "comments": "",
        "fulltext": "Upon FirstPhase ServicingSatellite shall eventually satisfy AcquireMotionInformation & Planning",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "FirstPhase",
                "AcquireMotionInformation",
                "Planning"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(FirstPhase)",
            "regular_condition": "(FirstPhase)",
            "conditionTextRange": [
                0,
                14
            ],
            "component_name": "ServicingSatellite",
            "componentTextRange": [
                16,
                33
            ],
            "timingTextRange": [
                41,
                50
            ],
            "post_condition": "(AcquireMotionInformation & Planning)",
            "responseTextRange": [
                52,
                94
            ],
            "diagramVariables": "TC = <b><i>(FirstPhase)</i></b>, Response = <b><i>(AcquireMotionInformation & Planning)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(FirstPhase)</i></b> is true and any point in the interval where <b><i>(FirstPhase)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "FirstPhase",
            "regular_condition_unexp_ft": "FirstPhase",
            "regular_condition_unexp_pctl": "FirstPhase",
            "regular_condition_SMV_pt": "FirstPhase",
            "regular_condition_SMV_ft": "FirstPhase",
            "regular_condition_PRISM_pctl": "FirstPhase",
            "post_condition_unexp_pt": "(AcquireMotionInformation & Planning)",
            "post_condition_unexp_ft": "(AcquireMotionInformation & Planning)",
            "post_condition_unexp_pctl": "(AcquireMotionInformation & Planning)",
            "post_condition_SMV_pt": "(AcquireMotionInformation & Planning)",
            "post_condition_SMV_ft": "(AcquireMotionInformation & Planning)",
            "post_condition_PRISM_pctl": "(AcquireMotionInformation & Planning)",
            "ft": "((LAST V (((! FirstPhase) & ((! LAST) & (X FirstPhase))) -> (X ((! LAST) U (AcquireMotionInformation & Planning))))) & (FirstPhase -> ((! LAST) U (AcquireMotionInformation & Planning))))",
            "pt": "((H (! FirstPhase)) | (! ((! (AcquireMotionInformation & Planning)) S ((! (AcquireMotionInformation & Planning)) & (FirstPhase & (Z (! FirstPhase)))))))",
            "pctl": "P>=1[((G (((! FirstPhase) & (X FirstPhase)) => (X (P>=1[(F (AcquireMotionInformation & Planning))])))) & (FirstPhase => (P>=1[(F (AcquireMotionInformation & Planning))])))]",
            "ptExpanded": "((H (! FirstPhase)) | (! ((! (AcquireMotionInformation & Planning)) S ((! (AcquireMotionInformation & Planning)) & (FirstPhase & (Z (! FirstPhase)))))))",
            "CoCoSpecCode": "(H(not (FirstPhase)) or not (SI((FirstPhase and ZtoPre(not (FirstPhase))),not ((AcquireMotionInformation and Planning)))))",
            "ftExpanded": "((LAST V (((! FirstPhase) & ((! LAST) & (X FirstPhase))) -> (X ((! LAST) U (AcquireMotionInformation & Planning))))) & (FirstPhase -> ((! LAST) U (AcquireMotionInformation & Planning))))",
            "pctlExpanded": "P>=1[((G (((! FirstPhase) & (X FirstPhase)) => (X (P>=1[(F (AcquireMotionInformation & Planning))])))) & (FirstPhase => (P>=1[(F (AcquireMotionInformation & Planning))])))]",
            "ftInfAUExpanded": "((G (((! FirstPhase) & (X FirstPhase)) -> (X (F (AcquireMotionInformation & Planning))))) & (FirstPhase -> (F (AcquireMotionInformation & Planning))))",
            "component": "ServicingSatellite"
        },
        "status": "",
        "_id": "eafc3912-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R60-B",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "A blue “Aud” light tells the crew\nthat the microphone is on",
        "comments": "",
        "fulltext": "In AudioRecording Astrobee shall always satisfy BlueAudLED",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "AudioRecording",
                "BlueAudLED"
            ],
            "scope_mode": "AudioRecording",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                18,
                25
            ],
            "timingTextRange": [
                33,
                38
            ],
            "post_condition": "(BlueAudLED)",
            "responseTextRange": [
                40,
                57
            ],
            "diagramVariables": "M = <b><i>AudioRecording</i></b>, Response = <b><i>(BlueAudLED)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>AudioRecording</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "AudioRecording",
            "scope_mode_ft": "AudioRecording",
            "scope_mode_pctl": "AudioRecording",
            "post_condition_unexp_pt": "BlueAudLED",
            "post_condition_unexp_ft": "BlueAudLED",
            "post_condition_unexp_pctl": "BlueAudLED",
            "post_condition_SMV_pt": "BlueAudLED",
            "post_condition_SMV_ft": "BlueAudLED",
            "post_condition_PRISM_pctl": "BlueAudLED",
            "ft": "(LAST V (AudioRecording -> BlueAudLED))",
            "pt": "(H (AudioRecording -> BlueAudLED))",
            "pctl": "P>=1[((G ((! (Fin_AudioRecording & (! LAST))) | (X (P>=1[(Lin_AudioRecording R BlueAudLED)])))) & (AudioRecording => (Lin_AudioRecording | (P>=1[(Lin_AudioRecording R BlueAudLED)]))))]",
            "ptExpanded": "(H (AudioRecording -> BlueAudLED))",
            "CoCoSpecCode": "H((AudioRecording => BlueAudLED))",
            "ftExpanded": "(LAST V (AudioRecording -> BlueAudLED))",
            "pctlExpanded": "P>=1[((G ((! (((! AudioRecording) & (X AudioRecording)) & (! false))) | (X (P>=1[((AudioRecording & (X (! AudioRecording))) R BlueAudLED)])))) & (AudioRecording => ((AudioRecording & (X (! AudioRecording))) | (P>=1[((AudioRecording & (X (! AudioRecording))) R BlueAudLED)]))))]",
            "ftInfAUExpanded": "(G (AudioRecording -> BlueAudLED))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc3913-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R47",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Like SPHERES, Int-Ball cannot op-\nerate without a direct line-of-sight\nto its markers.",
        "comments": "",
        "fulltext": "whenever Operating IntBall shall immediately satisfy LOS1 & LOS2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "Operating",
                "LOS1",
                "LOS2"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(Operating)",
            "regular_condition": "(Operating)",
            "conditionTextRange": [
                0,
                17
            ],
            "component_name": "IntBall",
            "componentTextRange": [
                19,
                25
            ],
            "timingTextRange": [
                33,
                43
            ],
            "post_condition": "(LOS1 & LOS2)",
            "responseTextRange": [
                45,
                63
            ],
            "diagramVariables": "CC = <b><i>(Operating)</i></b>, Response = <b><i>(LOS1 & LOS2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(Operating)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "Operating",
            "regular_condition_unexp_ft": "Operating",
            "regular_condition_unexp_pctl": "Operating",
            "regular_condition_SMV_pt": "Operating",
            "regular_condition_SMV_ft": "Operating",
            "regular_condition_PRISM_pctl": "Operating",
            "post_condition_unexp_pt": "(LOS1 & LOS2)",
            "post_condition_unexp_ft": "(LOS1 & LOS2)",
            "post_condition_unexp_pctl": "(LOS1 & LOS2)",
            "post_condition_SMV_pt": "(LOS1 & LOS2)",
            "post_condition_SMV_ft": "(LOS1 & LOS2)",
            "post_condition_PRISM_pctl": "(LOS1 & LOS2)",
            "ft": "(LAST V (Operating -> (LOS1 & LOS2)))",
            "pt": "(H (Operating -> (LOS1 & LOS2)))",
            "pctl": "P>=1[(G (Operating => (P>=1[(LOS1 & LOS2)])))]",
            "ptExpanded": "(H (Operating -> (LOS1 & LOS2)))",
            "CoCoSpecCode": "H((Operating => (LOS1 and LOS2)))",
            "ftExpanded": "(LAST V (Operating -> (LOS1 & LOS2)))",
            "pctlExpanded": "P>=1[(G (Operating => (P>=1[(LOS1 & LOS2)])))]",
            "ftInfAUExpanded": "(G (Operating -> (LOS1 & LOS2)))",
            "component": "IntBall"
        },
        "status": "",
        "_id": "eafc3914-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R34",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Exceeding sensor limits shall latch\nan autopilot pullup when the pilot is\nnot in control (not standby) and the\nsystem is supported without failures\n(not apfail).",
        "comments": "",
        "fulltext": "Whenever Limits & !Standby & supported & !apfail FSM shall immediately satisfy Pullup",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "Limits",
                "Standby",
                "supported",
                "apfail",
                "Pullup"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(Limits & ! Standby & supported & ! apfail)",
            "regular_condition": "(Limits & ! Standby & supported & ! apfail)",
            "conditionTextRange": [
                0,
                47
            ],
            "component_name": "FSM",
            "componentTextRange": [
                49,
                51
            ],
            "timingTextRange": [
                59,
                69
            ],
            "post_condition": "(Pullup)",
            "responseTextRange": [
                71,
                84
            ],
            "diagramVariables": "CC = <b><i>(Limits & ! Standby & supported & ! apfail)</i></b>, Response = <b><i>(Pullup)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(Limits & ! Standby & supported & ! apfail)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(((Limits & (! Standby)) & supported) & (! apfail))",
            "regular_condition_unexp_ft": "(((Limits & (! Standby)) & supported) & (! apfail))",
            "regular_condition_unexp_pctl": "(((Limits & (! Standby)) & supported) & (! apfail))",
            "regular_condition_SMV_pt": "(((Limits & (! Standby)) & supported) & (! apfail))",
            "regular_condition_SMV_ft": "(((Limits & (! Standby)) & supported) & (! apfail))",
            "regular_condition_PRISM_pctl": "(((Limits & (! Standby)) & supported) & (! apfail))",
            "post_condition_unexp_pt": "Pullup",
            "post_condition_unexp_ft": "Pullup",
            "post_condition_unexp_pctl": "Pullup",
            "post_condition_SMV_pt": "Pullup",
            "post_condition_SMV_ft": "Pullup",
            "post_condition_PRISM_pctl": "Pullup",
            "ft": "(LAST V ((((Limits & (! Standby)) & supported) & (! apfail)) -> Pullup))",
            "pt": "(H ((((Limits & (! Standby)) & supported) & (! apfail)) -> Pullup))",
            "pctl": "P>=1[(G ((((Limits & (! Standby)) & supported) & (! apfail)) => (P>=1[Pullup])))]",
            "ptExpanded": "(H ((((Limits & (! Standby)) & supported) & (! apfail)) -> Pullup))",
            "CoCoSpecCode": "H(((((Limits and not (Standby)) and supported) and not (apfail)) => Pullup))",
            "ftExpanded": "(LAST V ((((Limits & (! Standby)) & supported) & (! apfail)) -> Pullup))",
            "pctlExpanded": "P>=1[(G ((((Limits & (! Standby)) & supported) & (! apfail)) => (P>=1[Pullup])))]",
            "ftInfAUExpanded": "(G ((((Limits & (! Standby)) & supported) & (! apfail)) -> Pullup))",
            "component": "FSM"
        },
        "status": "",
        "_id": "eafc3915-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R25",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "During the final phase of Shut-\ntle flight, the orbiter must enter a\n“heading alignment cylinder”",
        "comments": "",
        "fulltext": "In FinalPhase Orbiter shall eventually satisfy HeadingAlignmentsCylinder",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "FinalPhase",
                "HeadingAlignmentsCylinder"
            ],
            "scope_mode": "FinalPhase",
            "scopeTextRange": [
                0,
                12
            ],
            "component_name": "Orbiter",
            "componentTextRange": [
                14,
                20
            ],
            "timingTextRange": [
                28,
                37
            ],
            "post_condition": "(HeadingAlignmentsCylinder)",
            "responseTextRange": [
                39,
                71
            ],
            "diagramVariables": "M = <b><i>FinalPhase</i></b>, Response = <b><i>(HeadingAlignmentsCylinder)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>FinalPhase</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_eventually_satisfaction.svg",
            "scope_mode_pt": "FinalPhase",
            "scope_mode_ft": "FinalPhase",
            "scope_mode_pctl": "FinalPhase",
            "post_condition_unexp_pt": "HeadingAlignmentsCylinder",
            "post_condition_unexp_ft": "HeadingAlignmentsCylinder",
            "post_condition_unexp_pctl": "HeadingAlignmentsCylinder",
            "post_condition_SMV_pt": "HeadingAlignmentsCylinder",
            "post_condition_SMV_ft": "HeadingAlignmentsCylinder",
            "post_condition_PRISM_pctl": "HeadingAlignmentsCylinder",
            "ft": "((LAST V ((! (Fin_FinalPhase & (! LAST))) | (X ((! (Lin_FinalPhase | LAST)) U HeadingAlignmentsCylinder)))) & (FinalPhase -> ((! (Lin_FinalPhase | LAST)) U HeadingAlignmentsCylinder)))",
            "pt": "((H (Lin_FinalPhase -> (Y (! ((! HeadingAlignmentsCylinder) S ((! HeadingAlignmentsCylinder) & Fin_FinalPhase)))))) & (((! Lin_FinalPhase) S ((! Lin_FinalPhase) & Fin_FinalPhase)) -> (! ((! HeadingAlignmentsCylinder) S ((! HeadingAlignmentsCylinder) & Fin_FinalPhase)))))",
            "pctl": "P>=1[((G ((! (Fin_FinalPhase & (! LAST))) | (X (P>=1[((! Lin_FinalPhase) U HeadingAlignmentsCylinder)])))) & (FinalPhase => (Lin_FinalPhase | (P>=1[((! Lin_FinalPhase) U HeadingAlignmentsCylinder)]))))]",
            "ptExpanded": "((H (((! FinalPhase) & (Y FinalPhase)) -> (Y (! ((! HeadingAlignmentsCylinder) S ((! HeadingAlignmentsCylinder) & (FinalPhase & (Z (! FinalPhase))))))))) & (((! ((! FinalPhase) & (Y FinalPhase))) S ((! ((! FinalPhase) & (Y FinalPhase))) & (FinalPhase & (Z (! FinalPhase))))) -> (! ((! HeadingAlignmentsCylinder) S ((! HeadingAlignmentsCylinder) & (FinalPhase & (Z (! FinalPhase))))))))",
            "CoCoSpecCode": "(H(((not (FinalPhase) and YtoPre(FinalPhase)) => YtoPre(not (SI((FinalPhase and ZtoPre(not (FinalPhase))),not (HeadingAlignmentsCylinder)))))) and (SI((FinalPhase and ZtoPre(not (FinalPhase))),not ((not (FinalPhase) and YtoPre(FinalPhase)))) => not (SI((FinalPhase and ZtoPre(not (FinalPhase))),not (HeadingAlignmentsCylinder)))))",
            "ftExpanded": "((LAST V ((! ((((! FinalPhase) & (! LAST)) & (X FinalPhase)) & (! LAST))) | (X ((! (((FinalPhase & (! LAST)) & (X (! FinalPhase))) | LAST)) U HeadingAlignmentsCylinder)))) & (FinalPhase -> ((! (((FinalPhase & (! LAST)) & (X (! FinalPhase))) | LAST)) U HeadingAlignmentsCylinder)))",
            "pctlExpanded": "P>=1[((G ((! (((! FinalPhase) & (X FinalPhase)) & (! false))) | (X (P>=1[((! (FinalPhase & (X (! FinalPhase)))) U HeadingAlignmentsCylinder)])))) & (FinalPhase => ((FinalPhase & (X (! FinalPhase))) | (P>=1[((! (FinalPhase & (X (! FinalPhase)))) U HeadingAlignmentsCylinder)]))))]",
            "ftInfAUExpanded": "((G ((! ((! FinalPhase) & (X FinalPhase))) | (X ((! (FinalPhase & (X (! FinalPhase)))) U HeadingAlignmentsCylinder)))) & (FinalPhase -> ((! (FinalPhase & (X (! FinalPhase)))) U HeadingAlignmentsCylinder)))",
            "component": "Orbiter"
        },
        "status": "",
        "_id": "eafc3916-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R76",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Additionally, when the navigation\ncamera is blocked by crew inter-\nference or positioned too close to\na wall so that the feature points\nfor vSLAM cannot be detected, the\nnavigation subsystem shifts to in-\nertial navigation that uses the IMU\nwithout relying on the vSLAM out-\nput.",
        "comments": "",
        "fulltext": "Whenever vSLAMUnavailable IntBall2 shall at the next timepoint satisfy NavigatewithIMU & NavigatevSLAM=0",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "vSLAMUnavailable",
                "NavigatewithIMU",
                "NavigatevSLAM"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(vSLAMUnavailable)",
            "regular_condition": "(vSLAMUnavailable)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "IntBall2",
            "componentTextRange": [
                26,
                33
            ],
            "timingTextRange": [
                41,
                61
            ],
            "post_condition": "(NavigatewithIMU & NavigatevSLAM = 0)",
            "responseTextRange": [
                63,
                103
            ],
            "diagramVariables": "CC = <b><i>(vSLAMUnavailable)</i></b>, Response = <b><i>(NavigatewithIMU & NavigatevSLAM = 0)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(vSLAMUnavailable)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "vSLAMUnavailable",
            "regular_condition_unexp_ft": "vSLAMUnavailable",
            "regular_condition_unexp_pctl": "vSLAMUnavailable",
            "regular_condition_SMV_pt": "vSLAMUnavailable",
            "regular_condition_SMV_ft": "vSLAMUnavailable",
            "regular_condition_PRISM_pctl": "vSLAMUnavailable",
            "post_condition_unexp_pt": "(NavigatewithIMU & (NavigatevSLAM = 0))",
            "post_condition_unexp_ft": "(NavigatewithIMU & (NavigatevSLAM = 0))",
            "post_condition_unexp_pctl": "(NavigatewithIMU & (NavigatevSLAM = 0))",
            "post_condition_SMV_pt": "(NavigatewithIMU & (NavigatevSLAM = 0))",
            "post_condition_SMV_ft": "(NavigatewithIMU & (NavigatevSLAM = 0))",
            "post_condition_PRISM_pctl": "(NavigatewithIMU & (NavigatevSLAM = 0))",
            "ft": "(LAST V (vSLAMUnavailable -> (LAST | (X (NavigatewithIMU & (NavigatevSLAM = 0))))))",
            "pt": "(H ((Y vSLAMUnavailable) -> ((NavigatewithIMU & (NavigatevSLAM = 0)) | (Z FALSE))))",
            "pctl": "P>=1[(G (vSLAMUnavailable => (P>=1[(LAST | (X (NavigatewithIMU & (NavigatevSLAM = 0))))])))]",
            "ptExpanded": "(H ((Y vSLAMUnavailable) -> ((NavigatewithIMU & (NavigatevSLAM = 0)) | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre(vSLAMUnavailable) => ((NavigatewithIMU and (NavigatevSLAM = 0)) or ZtoPre(false))))",
            "ftExpanded": "(LAST V (vSLAMUnavailable -> (LAST | (X (NavigatewithIMU & (NavigatevSLAM = 0))))))",
            "pctlExpanded": "P>=1[(G (vSLAMUnavailable => (P>=1[(false | (X (NavigatewithIMU & (NavigatevSLAM = 0))))])))]",
            "ftInfAUExpanded": "(G (vSLAMUnavailable -> (X (NavigatewithIMU & (NavigatevSLAM = 0)))))",
            "component": "IntBall2"
        },
        "status": "",
        "_id": "eafc3917-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R14-C",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The Separation phase ends with\ntransfer orbit insertion.",
        "comments": "",
        "fulltext": "Upon SeparationPhase System shall eventually satisfy orbitinsertion",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "SeparationPhase",
                "orbitinsertion"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(SeparationPhase)",
            "regular_condition": "(SeparationPhase)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "System",
            "componentTextRange": [
                21,
                26
            ],
            "timingTextRange": [
                34,
                43
            ],
            "post_condition": "(orbitinsertion)",
            "responseTextRange": [
                45,
                66
            ],
            "diagramVariables": "TC = <b><i>(SeparationPhase)</i></b>, Response = <b><i>(orbitinsertion)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(SeparationPhase)</i></b> is true and any point in the interval where <b><i>(SeparationPhase)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "SeparationPhase",
            "regular_condition_unexp_ft": "SeparationPhase",
            "regular_condition_unexp_pctl": "SeparationPhase",
            "regular_condition_SMV_pt": "SeparationPhase",
            "regular_condition_SMV_ft": "SeparationPhase",
            "regular_condition_PRISM_pctl": "SeparationPhase",
            "post_condition_unexp_pt": "orbitinsertion",
            "post_condition_unexp_ft": "orbitinsertion",
            "post_condition_unexp_pctl": "orbitinsertion",
            "post_condition_SMV_pt": "orbitinsertion",
            "post_condition_SMV_ft": "orbitinsertion",
            "post_condition_PRISM_pctl": "orbitinsertion",
            "ft": "((LAST V (((! SeparationPhase) & ((! LAST) & (X SeparationPhase))) -> (X ((! LAST) U orbitinsertion)))) & (SeparationPhase -> ((! LAST) U orbitinsertion)))",
            "pt": "((H (! SeparationPhase)) | (! ((! orbitinsertion) S ((! orbitinsertion) & (SeparationPhase & (Z (! SeparationPhase)))))))",
            "pctl": "P>=1[((G (((! SeparationPhase) & (X SeparationPhase)) => (X (P>=1[(F orbitinsertion)])))) & (SeparationPhase => (P>=1[(F orbitinsertion)])))]",
            "ptExpanded": "((H (! SeparationPhase)) | (! ((! orbitinsertion) S ((! orbitinsertion) & (SeparationPhase & (Z (! SeparationPhase)))))))",
            "CoCoSpecCode": "(H(not (SeparationPhase)) or not (SI((SeparationPhase and ZtoPre(not (SeparationPhase))),not (orbitinsertion))))",
            "ftExpanded": "((LAST V (((! SeparationPhase) & ((! LAST) & (X SeparationPhase))) -> (X ((! LAST) U orbitinsertion)))) & (SeparationPhase -> ((! LAST) U orbitinsertion)))",
            "pctlExpanded": "P>=1[((G (((! SeparationPhase) & (X SeparationPhase)) => (X (P>=1[(F orbitinsertion)])))) & (SeparationPhase => (P>=1[(F orbitinsertion)])))]",
            "ftInfAUExpanded": "((G (((! SeparationPhase) & (X SeparationPhase)) -> (X (F orbitinsertion)))) & (SeparationPhase -> (F orbitinsertion)))",
            "component": "System"
        },
        "status": "",
        "_id": "eafc3918-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R10-A",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Check mode all components neces-\nsary to check system’s health before\nstarting the tests are active",
        "comments": "",
        "fulltext": "In CHECKMODE IMCOMPONENT shall before StartingTests satisfy necessary_check_components_active",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "CHECKMODE",
                "StartingTests",
                "necessary_check_components_active"
            ],
            "scope_mode": "CHECKMODE",
            "scopeTextRange": [
                0,
                11
            ],
            "component_name": "IMCOMPONENT",
            "componentTextRange": [
                13,
                23
            ],
            "stop_condition": "(StartingTests)",
            "timingTextRange": [
                31,
                50
            ],
            "post_condition": "(necessary_check_components_active)",
            "responseTextRange": [
                52,
                92
            ],
            "diagramVariables": "M = <b><i>CHECKMODE</i></b>, SC = <b><i>(StartingTests)</i></b>, Response = <b><i>(necessary_check_components_active)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>CHECKMODE</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs in the interval, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_before_satisfaction.svg",
            "scope_mode_pt": "CHECKMODE",
            "scope_mode_ft": "CHECKMODE",
            "scope_mode_pctl": "CHECKMODE",
            "post_condition_unexp_pt": "necessary_check_components_active",
            "post_condition_unexp_ft": "necessary_check_components_active",
            "post_condition_unexp_pctl": "necessary_check_components_active",
            "post_condition_SMV_pt": "necessary_check_components_active",
            "post_condition_SMV_ft": "necessary_check_components_active",
            "post_condition_PRISM_pctl": "necessary_check_components_active",
            "stop_condition_unexp_pt": "StartingTests",
            "stop_condition_unexp_ft": "StartingTests",
            "stop_condition_PRISM_pctl": "StartingTests",
            "stop_condition_SMV_pt": "StartingTests",
            "stop_condition_SMV_ft": "StartingTests",
            "ft": "((LAST V ((! (Fin_CHECKMODE & (! LAST))) | (X (! (((! ((! StartingTests) & (necessary_check_components_active | (Lin_CHECKMODE | LAST)))) & (! (Lin_CHECKMODE | LAST))) U StartingTests))))) & (CHECKMODE -> (! (((! ((! StartingTests) & (necessary_check_components_active | (Lin_CHECKMODE | LAST)))) & (! (Lin_CHECKMODE | LAST))) U StartingTests))))",
            "pt": "((H (Lin_CHECKMODE -> (Y ((StartingTests -> ((! Fin_CHECKMODE) & (Y (! ((! necessary_check_components_active) S ((! necessary_check_components_active) & Fin_CHECKMODE)))))) S ((StartingTests -> ((! Fin_CHECKMODE) & (Y (! ((! necessary_check_components_active) S ((! necessary_check_components_active) & Fin_CHECKMODE)))))) & Fin_CHECKMODE))))) & (((! Lin_CHECKMODE) S ((! Lin_CHECKMODE) & Fin_CHECKMODE)) -> ((StartingTests -> ((! Fin_CHECKMODE) & (Y (! ((! necessary_check_components_active) S ((! necessary_check_components_active) & Fin_CHECKMODE)))))) S ((StartingTests -> ((! Fin_CHECKMODE) & (Y (! ((! necessary_check_components_active) S ((! necessary_check_components_active) & Fin_CHECKMODE)))))) & Fin_CHECKMODE))))",
            "pctl": "P>=1[((G ((! (Fin_CHECKMODE & (! LAST))) | (X (P>=1[(! (((! ((! undefined) & (necessary_check_components_active | Lin_CHECKMODE))) & (! Lin_CHECKMODE)) U undefined))])))) & (CHECKMODE => (Lin_CHECKMODE | (P>=1[(! (((! ((! undefined) & (necessary_check_components_active | Lin_CHECKMODE))) & (! Lin_CHECKMODE)) U undefined))]))))]",
            "ptExpanded": "((H (((! CHECKMODE) & (Y CHECKMODE)) -> (Y ((StartingTests -> ((! (CHECKMODE & (Z (! CHECKMODE)))) & (Y (! ((! necessary_check_components_active) S ((! necessary_check_components_active) & (CHECKMODE & (Z (! CHECKMODE))))))))) S ((StartingTests -> ((! (CHECKMODE & (Z (! CHECKMODE)))) & (Y (! ((! necessary_check_components_active) S ((! necessary_check_components_active) & (CHECKMODE & (Z (! CHECKMODE))))))))) & (CHECKMODE & (Z (! CHECKMODE)))))))) & (((! ((! CHECKMODE) & (Y CHECKMODE))) S ((! ((! CHECKMODE) & (Y CHECKMODE))) & (CHECKMODE & (Z (! CHECKMODE))))) -> ((StartingTests -> ((! (CHECKMODE & (Z (! CHECKMODE)))) & (Y (! ((! necessary_check_components_active) S ((! necessary_check_components_active) & (CHECKMODE & (Z (! CHECKMODE))))))))) S ((StartingTests -> ((! (CHECKMODE & (Z (! CHECKMODE)))) & (Y (! ((! necessary_check_components_active) S ((! necessary_check_components_active) & (CHECKMODE & (Z (! CHECKMODE))))))))) & (CHECKMODE & (Z (! CHECKMODE)))))))",
            "CoCoSpecCode": "(H(((not (CHECKMODE) and YtoPre(CHECKMODE)) => YtoPre(SI((CHECKMODE and ZtoPre(not (CHECKMODE))),(StartingTests => (not ((CHECKMODE and ZtoPre(not (CHECKMODE)))) and YtoPre(not (SI((CHECKMODE and ZtoPre(not (CHECKMODE))),not (necessary_check_components_active)))))))))) and (SI((CHECKMODE and ZtoPre(not (CHECKMODE))),not ((not (CHECKMODE) and YtoPre(CHECKMODE)))) => SI((CHECKMODE and ZtoPre(not (CHECKMODE))),(StartingTests => (not ((CHECKMODE and ZtoPre(not (CHECKMODE)))) and YtoPre(not (SI((CHECKMODE and ZtoPre(not (CHECKMODE))),not (necessary_check_components_active)))))))))",
            "ftExpanded": "((LAST V ((! ((((! CHECKMODE) & (! LAST)) & (X CHECKMODE)) & (! LAST))) | (X (! (((! ((! StartingTests) & (necessary_check_components_active | (((CHECKMODE & (! LAST)) & (X (! CHECKMODE))) | LAST)))) & (! (((CHECKMODE & (! LAST)) & (X (! CHECKMODE))) | LAST))) U StartingTests))))) & (CHECKMODE -> (! (((! ((! StartingTests) & (necessary_check_components_active | (((CHECKMODE & (! LAST)) & (X (! CHECKMODE))) | LAST)))) & (! (((CHECKMODE & (! LAST)) & (X (! CHECKMODE))) | LAST))) U StartingTests))))",
            "pctlExpanded": "P>=1[((G ((! (((! CHECKMODE) & (X CHECKMODE)) & (! false))) | (X (P>=1[(! (((! ((! StartingTests) & (necessary_check_components_active | (CHECKMODE & (X (! CHECKMODE)))))) & (! (CHECKMODE & (X (! CHECKMODE))))) U StartingTests))])))) & (CHECKMODE => ((CHECKMODE & (X (! CHECKMODE))) | (P>=1[(! (((! ((! StartingTests) & (necessary_check_components_active | (CHECKMODE & (X (! CHECKMODE)))))) & (! (CHECKMODE & (X (! CHECKMODE))))) U StartingTests))]))))]",
            "ftInfAUExpanded": "((G ((! ((! CHECKMODE) & (X CHECKMODE))) | (X (! (((! ((! StartingTests) & (necessary_check_components_active | (CHECKMODE & (X (! CHECKMODE)))))) & (! (CHECKMODE & (X (! CHECKMODE))))) U StartingTests))))) & (CHECKMODE -> (! (((! ((! StartingTests) & (necessary_check_components_active | (CHECKMODE & (X (! CHECKMODE)))))) & (! (CHECKMODE & (X (! CHECKMODE))))) U StartingTests))))",
            "component": "IMCOMPONENT"
        },
        "status": "",
        "_id": "eafc3919-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R68-1",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The second phase is to control the\nrobot to move toward the planned\ngrasping location to make the robot\nready for the capturing of the target",
        "comments": "",
        "fulltext": "Upon AcquireMotionInformation & Planning ServicingSatellite shall at the next timepoint satisfy SecondPhase",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "AcquireMotionInformation",
                "Planning",
                "SecondPhase"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(AcquireMotionInformation & Planning)",
            "regular_condition": "(AcquireMotionInformation & Planning)",
            "conditionTextRange": [
                0,
                39
            ],
            "component_name": "ServicingSatellite",
            "componentTextRange": [
                41,
                58
            ],
            "timingTextRange": [
                66,
                86
            ],
            "post_condition": "(SecondPhase)",
            "responseTextRange": [
                88,
                106
            ],
            "diagramVariables": "TC = <b><i>(AcquireMotionInformation & Planning)</i></b>, Response = <b><i>(SecondPhase)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(AcquireMotionInformation & Planning)</i></b> is true and any point in the interval where <b><i>(AcquireMotionInformation & Planning)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(AcquireMotionInformation & Planning)",
            "regular_condition_unexp_ft": "(AcquireMotionInformation & Planning)",
            "regular_condition_unexp_pctl": "(AcquireMotionInformation & Planning)",
            "regular_condition_SMV_pt": "(AcquireMotionInformation & Planning)",
            "regular_condition_SMV_ft": "(AcquireMotionInformation & Planning)",
            "regular_condition_PRISM_pctl": "(AcquireMotionInformation & Planning)",
            "post_condition_unexp_pt": "SecondPhase",
            "post_condition_unexp_ft": "SecondPhase",
            "post_condition_unexp_pctl": "SecondPhase",
            "post_condition_SMV_pt": "SecondPhase",
            "post_condition_SMV_ft": "SecondPhase",
            "post_condition_PRISM_pctl": "SecondPhase",
            "ft": "((LAST V (((! (AcquireMotionInformation & Planning)) & ((! LAST) & (X (AcquireMotionInformation & Planning)))) -> (X (LAST | (X SecondPhase))))) & ((AcquireMotionInformation & Planning) -> (LAST | (X SecondPhase))))",
            "pt": "(H ((Y ((AcquireMotionInformation & Planning) & (Z (! (AcquireMotionInformation & Planning))))) -> (SecondPhase | (Z FALSE))))",
            "pctl": "P>=1[((G (((! (AcquireMotionInformation & Planning)) & (X (AcquireMotionInformation & Planning))) => (X (P>=1[(LAST | (X SecondPhase))])))) & ((AcquireMotionInformation & Planning) => (P>=1[(LAST | (X SecondPhase))])))]",
            "ptExpanded": "(H ((Y ((AcquireMotionInformation & Planning) & (Z (! (AcquireMotionInformation & Planning))))) -> (SecondPhase | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre(((AcquireMotionInformation and Planning) and ZtoPre(not ((AcquireMotionInformation and Planning))))) => (SecondPhase or ZtoPre(false))))",
            "ftExpanded": "((LAST V (((! (AcquireMotionInformation & Planning)) & ((! LAST) & (X (AcquireMotionInformation & Planning)))) -> (X (LAST | (X SecondPhase))))) & ((AcquireMotionInformation & Planning) -> (LAST | (X SecondPhase))))",
            "pctlExpanded": "P>=1[((G (((! (AcquireMotionInformation & Planning)) & (X (AcquireMotionInformation & Planning))) => (X (P>=1[(false | (X SecondPhase))])))) & ((AcquireMotionInformation & Planning) => (P>=1[(false | (X SecondPhase))])))]",
            "ftInfAUExpanded": "((G (((! (AcquireMotionInformation & Planning)) & (X (AcquireMotionInformation & Planning))) -> (X (X SecondPhase)))) & ((AcquireMotionInformation & Planning) -> (X SecondPhase)))",
            "component": "ServicingSatellite"
        },
        "status": "",
        "_id": "eafc391a-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R48",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The PerchCam is identical to the\nHazCam and it turns on to de-\ntect ISS handrails when Astrobee\nperches autonomously",
        "comments": "",
        "fulltext": "Whenever Perched Astrobee shall immediately satisfy PerchCam",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "Perched",
                "PerchCam"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(Perched)",
            "regular_condition": "(Perched)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                17,
                24
            ],
            "timingTextRange": [
                32,
                42
            ],
            "post_condition": "(PerchCam)",
            "responseTextRange": [
                44,
                59
            ],
            "diagramVariables": "CC = <b><i>(Perched)</i></b>, Response = <b><i>(PerchCam)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(Perched)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "Perched",
            "regular_condition_unexp_ft": "Perched",
            "regular_condition_unexp_pctl": "Perched",
            "regular_condition_SMV_pt": "Perched",
            "regular_condition_SMV_ft": "Perched",
            "regular_condition_PRISM_pctl": "Perched",
            "post_condition_unexp_pt": "PerchCam",
            "post_condition_unexp_ft": "PerchCam",
            "post_condition_unexp_pctl": "PerchCam",
            "post_condition_SMV_pt": "PerchCam",
            "post_condition_SMV_ft": "PerchCam",
            "post_condition_PRISM_pctl": "PerchCam",
            "ft": "(LAST V (Perched -> PerchCam))",
            "pt": "(H (Perched -> PerchCam))",
            "pctl": "P>=1[(G (Perched => (P>=1[PerchCam])))]",
            "ptExpanded": "(H (Perched -> PerchCam))",
            "CoCoSpecCode": "H((Perched => PerchCam))",
            "ftExpanded": "(LAST V (Perched -> PerchCam))",
            "pctlExpanded": "P>=1[(G (Perched => (P>=1[PerchCam])))]",
            "ftInfAUExpanded": "(G (Perched -> PerchCam))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc391b-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R35",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "While flying, remain separated\nfrom an intruder aircraft by at least\n250 ft horizontally or 50 ft vertically",
        "comments": "",
        "fulltext": "In FlightMode AirCraft shall always satisfy ( horizontalIntruderDistance >250 | verticalIntruderDistance >50 )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "FlightMode",
                "horizontalIntruderDistance",
                "verticalIntruderDistance"
            ],
            "scope_mode": "FlightMode",
            "scopeTextRange": [
                0,
                12
            ],
            "component_name": "AirCraft",
            "componentTextRange": [
                14,
                21
            ],
            "timingTextRange": [
                29,
                34
            ],
            "post_condition": "(( horizontalIntruderDistance > 250 | verticalIntruderDistance > 50 ))",
            "responseTextRange": [
                36,
                109
            ],
            "diagramVariables": "M = <b><i>FlightMode</i></b>, Response = <b><i>(( horizontalIntruderDistance > 250 | verticalIntruderDistance > 50 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>FlightMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "FlightMode",
            "scope_mode_ft": "FlightMode",
            "scope_mode_pctl": "FlightMode",
            "post_condition_unexp_pt": "((horizontalIntruderDistance > 250) | (verticalIntruderDistance > 50))",
            "post_condition_unexp_ft": "((horizontalIntruderDistance > 250) | (verticalIntruderDistance > 50))",
            "post_condition_unexp_pctl": "((horizontalIntruderDistance > 250) | (verticalIntruderDistance > 50))",
            "post_condition_SMV_pt": "((horizontalIntruderDistance > 250) | (verticalIntruderDistance > 50))",
            "post_condition_SMV_ft": "((horizontalIntruderDistance > 250) | (verticalIntruderDistance > 50))",
            "post_condition_PRISM_pctl": "((horizontalIntruderDistance > 250) | (verticalIntruderDistance > 50))",
            "ft": "(LAST V (FlightMode -> ((horizontalIntruderDistance > 250) | (verticalIntruderDistance > 50))))",
            "pt": "(H (FlightMode -> ((horizontalIntruderDistance > 250) | (verticalIntruderDistance > 50))))",
            "pctl": "P>=1[((G ((! (Fin_FlightMode & (! LAST))) | (X (P>=1[(Lin_FlightMode R ((horizontalIntruderDistance > 250) | (verticalIntruderDistance > 50)))])))) & (FlightMode => (Lin_FlightMode | (P>=1[(Lin_FlightMode R ((horizontalIntruderDistance > 250) | (verticalIntruderDistance > 50)))]))))]",
            "ptExpanded": "(H (FlightMode -> ((horizontalIntruderDistance > 250) | (verticalIntruderDistance > 50))))",
            "CoCoSpecCode": "H((FlightMode => ((horizontalIntruderDistance > 250) or (verticalIntruderDistance > 50))))",
            "ftExpanded": "(LAST V (FlightMode -> ((horizontalIntruderDistance > 250) | (verticalIntruderDistance > 50))))",
            "pctlExpanded": "P>=1[((G ((! (((! FlightMode) & (X FlightMode)) & (! false))) | (X (P>=1[((FlightMode & (X (! FlightMode))) R ((horizontalIntruderDistance > 250) | (verticalIntruderDistance > 50)))])))) & (FlightMode => ((FlightMode & (X (! FlightMode))) | (P>=1[((FlightMode & (X (! FlightMode))) R ((horizontalIntruderDistance > 250) | (verticalIntruderDistance > 50)))]))))]",
            "ftInfAUExpanded": "(G (FlightMode -> ((horizontalIntruderDistance > 250) | (verticalIntruderDistance > 50))))",
            "component": "AirCraft"
        },
        "status": "",
        "_id": "eafc391c-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R14-D",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Orbit insertion leads to the begin-\nning of the transfer phase.",
        "comments": "",
        "fulltext": "Upon orbitinsertion System shall at the next timepoint satisfy TransferPhase",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "orbitinsertion",
                "TransferPhase"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(orbitinsertion)",
            "regular_condition": "(orbitinsertion)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "timingTextRange": [
                33,
                53
            ],
            "post_condition": "(TransferPhase)",
            "responseTextRange": [
                55,
                75
            ],
            "diagramVariables": "TC = <b><i>(orbitinsertion)</i></b>, Response = <b><i>(TransferPhase)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(orbitinsertion)</i></b> is true and any point in the interval where <b><i>(orbitinsertion)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "orbitinsertion",
            "regular_condition_unexp_ft": "orbitinsertion",
            "regular_condition_unexp_pctl": "orbitinsertion",
            "regular_condition_SMV_pt": "orbitinsertion",
            "regular_condition_SMV_ft": "orbitinsertion",
            "regular_condition_PRISM_pctl": "orbitinsertion",
            "post_condition_unexp_pt": "TransferPhase",
            "post_condition_unexp_ft": "TransferPhase",
            "post_condition_unexp_pctl": "TransferPhase",
            "post_condition_SMV_pt": "TransferPhase",
            "post_condition_SMV_ft": "TransferPhase",
            "post_condition_PRISM_pctl": "TransferPhase",
            "ft": "((LAST V (((! orbitinsertion) & ((! LAST) & (X orbitinsertion))) -> (X (LAST | (X TransferPhase))))) & (orbitinsertion -> (LAST | (X TransferPhase))))",
            "pt": "(H ((Y (orbitinsertion & (Z (! orbitinsertion)))) -> (TransferPhase | (Z FALSE))))",
            "pctl": "P>=1[((G (((! orbitinsertion) & (X orbitinsertion)) => (X (P>=1[(LAST | (X TransferPhase))])))) & (orbitinsertion => (P>=1[(LAST | (X TransferPhase))])))]",
            "ptExpanded": "(H ((Y (orbitinsertion & (Z (! orbitinsertion)))) -> (TransferPhase | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre((orbitinsertion and ZtoPre(not (orbitinsertion)))) => (TransferPhase or ZtoPre(false))))",
            "ftExpanded": "((LAST V (((! orbitinsertion) & ((! LAST) & (X orbitinsertion))) -> (X (LAST | (X TransferPhase))))) & (orbitinsertion -> (LAST | (X TransferPhase))))",
            "pctlExpanded": "P>=1[((G (((! orbitinsertion) & (X orbitinsertion)) => (X (P>=1[(false | (X TransferPhase))])))) & (orbitinsertion => (P>=1[(false | (X TransferPhase))])))]",
            "ftInfAUExpanded": "((G (((! orbitinsertion) & (X orbitinsertion)) -> (X (X TransferPhase)))) & (orbitinsertion -> (X TransferPhase)))",
            "component": "System"
        },
        "status": "",
        "_id": "eafc391d-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R60-C",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "“Live” LEDs indicate that cameras\nare streaming",
        "comments": "",
        "fulltext": "In StreamingMode Astrobee shall always satisfy LiveLED",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "StreamingMode",
                "LiveLED"
            ],
            "scope_mode": "StreamingMode",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                17,
                24
            ],
            "timingTextRange": [
                32,
                37
            ],
            "post_condition": "(LiveLED)",
            "responseTextRange": [
                39,
                53
            ],
            "diagramVariables": "M = <b><i>StreamingMode</i></b>, Response = <b><i>(LiveLED)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StreamingMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "StreamingMode",
            "scope_mode_ft": "StreamingMode",
            "scope_mode_pctl": "StreamingMode",
            "post_condition_unexp_pt": "LiveLED",
            "post_condition_unexp_ft": "LiveLED",
            "post_condition_unexp_pctl": "LiveLED",
            "post_condition_SMV_pt": "LiveLED",
            "post_condition_SMV_ft": "LiveLED",
            "post_condition_PRISM_pctl": "LiveLED",
            "ft": "(LAST V (StreamingMode -> LiveLED))",
            "pt": "(H (StreamingMode -> LiveLED))",
            "pctl": "P>=1[((G ((! (Fin_StreamingMode & (! LAST))) | (X (P>=1[(Lin_StreamingMode R LiveLED)])))) & (StreamingMode => (Lin_StreamingMode | (P>=1[(Lin_StreamingMode R LiveLED)]))))]",
            "ptExpanded": "(H (StreamingMode -> LiveLED))",
            "CoCoSpecCode": "H((StreamingMode => LiveLED))",
            "ftExpanded": "(LAST V (StreamingMode -> LiveLED))",
            "pctlExpanded": "P>=1[((G ((! (((! StreamingMode) & (X StreamingMode)) & (! false))) | (X (P>=1[((StreamingMode & (X (! StreamingMode))) R LiveLED)])))) & (StreamingMode => ((StreamingMode & (X (! StreamingMode))) | (P>=1[((StreamingMode & (X (! StreamingMode))) R LiveLED)]))))]",
            "ftInfAUExpanded": "(G (StreamingMode -> LiveLED))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc391e-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R1",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "During an experiment: Two con-\ntext images taken at different times\nof a PIXL experiment will be com-\npared to detect unplanned move-\nment (drift) of the rover arm likely\nto arise from temperature changes",
        "comments": "",
        "fulltext": "In Experiment PIXL shall eventually satisfy Take2Picture & ComparePicture",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "Experiment",
                "Take2Picture",
                "ComparePicture"
            ],
            "scope_mode": "Experiment",
            "scopeTextRange": [
                0,
                12
            ],
            "component_name": "PIXL",
            "componentTextRange": [
                14,
                17
            ],
            "timingTextRange": [
                25,
                34
            ],
            "post_condition": "(Take2Picture & ComparePicture)",
            "responseTextRange": [
                36,
                72
            ],
            "diagramVariables": "M = <b><i>Experiment</i></b>, Response = <b><i>(Take2Picture & ComparePicture)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Experiment</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_eventually_satisfaction.svg",
            "scope_mode_pt": "Experiment",
            "scope_mode_ft": "Experiment",
            "scope_mode_pctl": "Experiment",
            "post_condition_unexp_pt": "(Take2Picture & ComparePicture)",
            "post_condition_unexp_ft": "(Take2Picture & ComparePicture)",
            "post_condition_unexp_pctl": "(Take2Picture & ComparePicture)",
            "post_condition_SMV_pt": "(Take2Picture & ComparePicture)",
            "post_condition_SMV_ft": "(Take2Picture & ComparePicture)",
            "post_condition_PRISM_pctl": "(Take2Picture & ComparePicture)",
            "ft": "((LAST V ((! (Fin_Experiment & (! LAST))) | (X ((! (Lin_Experiment | LAST)) U (Take2Picture & ComparePicture))))) & (Experiment -> ((! (Lin_Experiment | LAST)) U (Take2Picture & ComparePicture))))",
            "pt": "((H (Lin_Experiment -> (Y (! ((! (Take2Picture & ComparePicture)) S ((! (Take2Picture & ComparePicture)) & Fin_Experiment)))))) & (((! Lin_Experiment) S ((! Lin_Experiment) & Fin_Experiment)) -> (! ((! (Take2Picture & ComparePicture)) S ((! (Take2Picture & ComparePicture)) & Fin_Experiment)))))",
            "pctl": "P>=1[((G ((! (Fin_Experiment & (! LAST))) | (X (P>=1[((! Lin_Experiment) U (Take2Picture & ComparePicture))])))) & (Experiment => (Lin_Experiment | (P>=1[((! Lin_Experiment) U (Take2Picture & ComparePicture))]))))]",
            "ptExpanded": "((H (((! Experiment) & (Y Experiment)) -> (Y (! ((! (Take2Picture & ComparePicture)) S ((! (Take2Picture & ComparePicture)) & (Experiment & (Z (! Experiment))))))))) & (((! ((! Experiment) & (Y Experiment))) S ((! ((! Experiment) & (Y Experiment))) & (Experiment & (Z (! Experiment))))) -> (! ((! (Take2Picture & ComparePicture)) S ((! (Take2Picture & ComparePicture)) & (Experiment & (Z (! Experiment))))))))",
            "CoCoSpecCode": "(H(((not (Experiment) and YtoPre(Experiment)) => YtoPre(not (SI((Experiment and ZtoPre(not (Experiment))),not ((Take2Picture and ComparePicture))))))) and (SI((Experiment and ZtoPre(not (Experiment))),not ((not (Experiment) and YtoPre(Experiment)))) => not (SI((Experiment and ZtoPre(not (Experiment))),not ((Take2Picture and ComparePicture))))))",
            "ftExpanded": "((LAST V ((! ((((! Experiment) & (! LAST)) & (X Experiment)) & (! LAST))) | (X ((! (((Experiment & (! LAST)) & (X (! Experiment))) | LAST)) U (Take2Picture & ComparePicture))))) & (Experiment -> ((! (((Experiment & (! LAST)) & (X (! Experiment))) | LAST)) U (Take2Picture & ComparePicture))))",
            "pctlExpanded": "P>=1[((G ((! (((! Experiment) & (X Experiment)) & (! false))) | (X (P>=1[((! (Experiment & (X (! Experiment)))) U (Take2Picture & ComparePicture))])))) & (Experiment => ((Experiment & (X (! Experiment))) | (P>=1[((! (Experiment & (X (! Experiment)))) U (Take2Picture & ComparePicture))]))))]",
            "ftInfAUExpanded": "((G ((! ((! Experiment) & (X Experiment))) | (X ((! (Experiment & (X (! Experiment)))) U (Take2Picture & ComparePicture))))) & (Experiment -> ((! (Experiment & (X (! Experiment)))) U (Take2Picture & ComparePicture))))",
            "component": "PIXL"
        },
        "status": "",
        "_id": "eafc391f-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R10-B",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "If testing is imminent enter check\nmode",
        "comments": "",
        "fulltext": "whenever TESTING_IMMINENT IM shall at the next timepoint satisfy Checkmode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "TESTING_IMMINENT",
                "Checkmode"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(TESTING_IMMINENT)",
            "regular_condition": "(TESTING_IMMINENT)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "IM",
            "componentTextRange": [
                26,
                27
            ],
            "timingTextRange": [
                35,
                55
            ],
            "post_condition": "(Checkmode)",
            "responseTextRange": [
                57,
                73
            ],
            "diagramVariables": "CC = <b><i>(TESTING_IMMINENT)</i></b>, Response = <b><i>(Checkmode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(TESTING_IMMINENT)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "TESTING_IMMINENT",
            "regular_condition_unexp_ft": "TESTING_IMMINENT",
            "regular_condition_unexp_pctl": "TESTING_IMMINENT",
            "regular_condition_SMV_pt": "TESTING_IMMINENT",
            "regular_condition_SMV_ft": "TESTING_IMMINENT",
            "regular_condition_PRISM_pctl": "TESTING_IMMINENT",
            "post_condition_unexp_pt": "Checkmode",
            "post_condition_unexp_ft": "Checkmode",
            "post_condition_unexp_pctl": "Checkmode",
            "post_condition_SMV_pt": "Checkmode",
            "post_condition_SMV_ft": "Checkmode",
            "post_condition_PRISM_pctl": "Checkmode",
            "ft": "(LAST V (TESTING_IMMINENT -> (LAST | (X Checkmode))))",
            "pt": "(H ((Y TESTING_IMMINENT) -> (Checkmode | (Z FALSE))))",
            "pctl": "P>=1[(G (TESTING_IMMINENT => (P>=1[(LAST | (X Checkmode))])))]",
            "ptExpanded": "(H ((Y TESTING_IMMINENT) -> (Checkmode | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre(TESTING_IMMINENT) => (Checkmode or ZtoPre(false))))",
            "ftExpanded": "(LAST V (TESTING_IMMINENT -> (LAST | (X Checkmode))))",
            "pctlExpanded": "P>=1[(G (TESTING_IMMINENT => (P>=1[(false | (X Checkmode))])))]",
            "ftInfAUExpanded": "(G (TESTING_IMMINENT -> (X Checkmode)))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc3920-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R77-A1",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "However, if the vSLAM output re-\nmains unavailable for an extended\nperiod, the robot rotates in place un-\ntil the feature points detected in the\ncurrent view align with those in the\nstored map",
        "comments": "",
        "fulltext": "whenever vSLAMUnavailable IntBall2 shall until FeaturePointDetected satisfy RotateProtocol",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "vSLAMUnavailable",
                "FeaturePointDetected",
                "RotateProtocol"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(vSLAMUnavailable)",
            "regular_condition": "(vSLAMUnavailable)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "IntBall2",
            "componentTextRange": [
                26,
                33
            ],
            "stop_condition": "(FeaturePointDetected)",
            "timingTextRange": [
                41,
                66
            ],
            "post_condition": "(RotateProtocol)",
            "responseTextRange": [
                68,
                89
            ],
            "diagramVariables": "CC = <b><i>(vSLAMUnavailable)</i></b>, SC = <b><i>(FeaturePointDetected)</i></b>, Response = <b><i>(RotateProtocol)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(vSLAMUnavailable)</i></b> is true.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "vSLAMUnavailable",
            "regular_condition_unexp_ft": "vSLAMUnavailable",
            "regular_condition_unexp_pctl": "vSLAMUnavailable",
            "regular_condition_SMV_pt": "vSLAMUnavailable",
            "regular_condition_SMV_ft": "vSLAMUnavailable",
            "regular_condition_PRISM_pctl": "vSLAMUnavailable",
            "post_condition_unexp_pt": "RotateProtocol",
            "post_condition_unexp_ft": "RotateProtocol",
            "post_condition_unexp_pctl": "RotateProtocol",
            "post_condition_SMV_pt": "RotateProtocol",
            "post_condition_SMV_ft": "RotateProtocol",
            "post_condition_PRISM_pctl": "RotateProtocol",
            "stop_condition_unexp_pt": "FeaturePointDetected",
            "stop_condition_unexp_ft": "FeaturePointDetected",
            "stop_condition_PRISM_pctl": "FeaturePointDetected",
            "stop_condition_SMV_pt": "FeaturePointDetected",
            "stop_condition_SMV_ft": "FeaturePointDetected",
            "ft": "(LAST V (vSLAMUnavailable -> ((FeaturePointDetected V (RotateProtocol | FeaturePointDetected)) | (LAST V RotateProtocol))))",
            "pt": "(H ((H (! vSLAMUnavailable)) | (((! FeaturePointDetected) S ((! FeaturePointDetected) & vSLAMUnavailable)) -> RotateProtocol)))",
            "pctl": "P>=1[(G (vSLAMUnavailable => (P>=1[((undefined R (RotateProtocol | undefined)) | (LAST R RotateProtocol))])))]",
            "ptExpanded": "(H ((H (! vSLAMUnavailable)) | (((! FeaturePointDetected) S ((! FeaturePointDetected) & vSLAMUnavailable)) -> RotateProtocol)))",
            "CoCoSpecCode": "H((H(not (vSLAMUnavailable)) or (SI(vSLAMUnavailable,not (FeaturePointDetected)) => RotateProtocol)))",
            "ftExpanded": "(LAST V (vSLAMUnavailable -> ((FeaturePointDetected V (RotateProtocol | FeaturePointDetected)) | (LAST V RotateProtocol))))",
            "pctlExpanded": "P>=1[(G (vSLAMUnavailable => (P>=1[((FeaturePointDetected R (RotateProtocol | FeaturePointDetected)) | (false R RotateProtocol))])))]",
            "ftInfAUExpanded": "(G (vSLAMUnavailable -> (FeaturePointDetected V (RotateProtocol | FeaturePointDetected))))",
            "component": "IntBall2"
        },
        "status": "",
        "_id": "eafc3921-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R36",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The probability that the aircraft\nleaves the taxiway, i.e., |cte| >8 me-\nters, shall be extremely low",
        "comments": "",
        "fulltext": "Aircraft shall with probability <= 0.001 eventually satisfy absReal(cte) >8",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "cte"
            ],
            "component_name": "Aircraft",
            "componentTextRange": [
                0,
                7
            ],
            "probability_bound": [
                "<=",
                "0.001"
            ],
            "probabilityTextRange": [
                15,
                39
            ],
            "timingTextRange": [
                41,
                50
            ],
            "post_condition": "(absReal ( cte ) > 8)",
            "responseTextRange": [
                52,
                74
            ],
            "diagramVariables": "Response = <b><i>(absReal ( cte ) > 8)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.001",
            "post_condition_unexp_pt": "(absReal(cte) > 8)",
            "post_condition_unexp_ft": "(absReal(cte) > 8)",
            "post_condition_unexp_pctl": "(absReal(cte) > 8)",
            "post_condition_SMV_pt": "(absReal(cte) > 8)",
            "post_condition_SMV_ft": "(absReal(cte) > 8)",
            "post_condition_PRISM_pctl": "(absReal(cte) > 8)",
            "ft": "((! LAST) U (absReal(cte) > 8))",
            "pt": "(O (absReal(cte) > 8))",
            "pctl": "(P<=0.001[(F (absReal(cte) > 8))])",
            "ptExpanded": "(O (absReal(cte) > 8))",
            "CoCoSpecCode": "O((absReal(cte) > 8))",
            "ftExpanded": "((! LAST) U (absReal(cte) > 8))",
            "pctlExpanded": "(P<=0.001[(F (absReal(cte) > 8))])",
            "ftInfAUExpanded": "(F (absReal(cte) > 8))",
            "component": "Aircraft"
        },
        "status": "",
        "_id": "eafc3922-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R14-E",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "During transfer, the spacecraft\nmoves toward the Cygnus arrival\nnear the ISS",
        "comments": "",
        "fulltext": "Upon TransferPhase System shall eventually satisfy cyngusarriaval",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "TransferPhase",
                "cyngusarriaval"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(TransferPhase)",
            "regular_condition": "(TransferPhase)",
            "conditionTextRange": [
                0,
                17
            ],
            "component_name": "System",
            "componentTextRange": [
                19,
                24
            ],
            "timingTextRange": [
                32,
                41
            ],
            "post_condition": "(cyngusarriaval)",
            "responseTextRange": [
                43,
                64
            ],
            "diagramVariables": "TC = <b><i>(TransferPhase)</i></b>, Response = <b><i>(cyngusarriaval)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(TransferPhase)</i></b> is true and any point in the interval where <b><i>(TransferPhase)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "TransferPhase",
            "regular_condition_unexp_ft": "TransferPhase",
            "regular_condition_unexp_pctl": "TransferPhase",
            "regular_condition_SMV_pt": "TransferPhase",
            "regular_condition_SMV_ft": "TransferPhase",
            "regular_condition_PRISM_pctl": "TransferPhase",
            "post_condition_unexp_pt": "cyngusarriaval",
            "post_condition_unexp_ft": "cyngusarriaval",
            "post_condition_unexp_pctl": "cyngusarriaval",
            "post_condition_SMV_pt": "cyngusarriaval",
            "post_condition_SMV_ft": "cyngusarriaval",
            "post_condition_PRISM_pctl": "cyngusarriaval",
            "ft": "((LAST V (((! TransferPhase) & ((! LAST) & (X TransferPhase))) -> (X ((! LAST) U cyngusarriaval)))) & (TransferPhase -> ((! LAST) U cyngusarriaval)))",
            "pt": "((H (! TransferPhase)) | (! ((! cyngusarriaval) S ((! cyngusarriaval) & (TransferPhase & (Z (! TransferPhase)))))))",
            "pctl": "P>=1[((G (((! TransferPhase) & (X TransferPhase)) => (X (P>=1[(F cyngusarriaval)])))) & (TransferPhase => (P>=1[(F cyngusarriaval)])))]",
            "ptExpanded": "((H (! TransferPhase)) | (! ((! cyngusarriaval) S ((! cyngusarriaval) & (TransferPhase & (Z (! TransferPhase)))))))",
            "CoCoSpecCode": "(H(not (TransferPhase)) or not (SI((TransferPhase and ZtoPre(not (TransferPhase))),not (cyngusarriaval))))",
            "ftExpanded": "((LAST V (((! TransferPhase) & ((! LAST) & (X TransferPhase))) -> (X ((! LAST) U cyngusarriaval)))) & (TransferPhase -> ((! LAST) U cyngusarriaval)))",
            "pctlExpanded": "P>=1[((G (((! TransferPhase) & (X TransferPhase)) => (X (P>=1[(F cyngusarriaval)])))) & (TransferPhase => (P>=1[(F cyngusarriaval)])))]",
            "ftInfAUExpanded": "((G (((! TransferPhase) & (X TransferPhase)) -> (X (F cyngusarriaval)))) & (TransferPhase -> (F cyngusarriaval)))",
            "component": "System"
        },
        "status": "",
        "_id": "eafc3923-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R2",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "PIXL’s hexapod can compensate for\nX-Y drift if it is found to exceed a\npre-defined threshold",
        "comments": "",
        "fulltext": "In Experiment whenever !inthreshold Rover shall eventually satisfy inthreshold",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "Experiment",
                "inthreshold"
            ],
            "scope_mode": "Experiment",
            "scopeTextRange": [
                0,
                12
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(! inthreshold)",
            "regular_condition": "(! inthreshold)",
            "conditionTextRange": [
                14,
                34
            ],
            "component_name": "Rover",
            "componentTextRange": [
                36,
                40
            ],
            "timingTextRange": [
                48,
                57
            ],
            "post_condition": "(inthreshold)",
            "responseTextRange": [
                59,
                77
            ],
            "diagramVariables": "M = <b><i>Experiment</i></b>, CC = <b><i>(! inthreshold)</i></b>, Response = <b><i>(inthreshold)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Experiment</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(! inthreshold)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "Experiment",
            "scope_mode_ft": "Experiment",
            "scope_mode_pctl": "Experiment",
            "regular_condition_unexp_pt": "(! inthreshold)",
            "regular_condition_unexp_ft": "(! inthreshold)",
            "regular_condition_unexp_pctl": "(! inthreshold)",
            "regular_condition_SMV_pt": "(! inthreshold)",
            "regular_condition_SMV_ft": "(! inthreshold)",
            "regular_condition_PRISM_pctl": "(! inthreshold)",
            "post_condition_unexp_pt": "inthreshold",
            "post_condition_unexp_ft": "inthreshold",
            "post_condition_unexp_pctl": "inthreshold",
            "post_condition_SMV_pt": "inthreshold",
            "post_condition_SMV_ft": "inthreshold",
            "post_condition_PRISM_pctl": "inthreshold",
            "ft": "((LAST V ((! (Fin_Experiment & (! LAST))) | (X ((Lin_Experiment | LAST) V ((! inthreshold) -> ((! (Lin_Experiment | LAST)) U inthreshold)))))) & (Experiment -> ((Lin_Experiment | LAST) V ((! inthreshold) -> ((! (Lin_Experiment | LAST)) U inthreshold)))))",
            "pt": "((H (Lin_Experiment -> (Y (((! (! inthreshold)) S ((! (! inthreshold)) & Fin_Experiment)) | (! ((! inthreshold) S ((! inthreshold) & (! inthreshold)))))))) & (((! Lin_Experiment) S ((! Lin_Experiment) & Fin_Experiment)) -> (((! (! inthreshold)) S ((! (! inthreshold)) & Fin_Experiment)) | (! ((! inthreshold) S ((! inthreshold) & (! inthreshold)))))))",
            "pctl": "P>=1[((G ((! (Fin_Experiment & (! LAST))) | (X (Lin_Experiment R ((! inthreshold) => (P>=1[((! Lin_Experiment) U inthreshold)])))))) & (Experiment => (Lin_Experiment | (Lin_Experiment R ((! inthreshold) => (P>=1[((! Lin_Experiment) U inthreshold)]))))))]",
            "ptExpanded": "((H (((! Experiment) & (Y Experiment)) -> (Y ((inthreshold S (inthreshold & (Experiment & (Z (! Experiment))))) | inthreshold)))) & (((! ((! Experiment) & (Y Experiment))) S ((! ((! Experiment) & (Y Experiment))) & (Experiment & (Z (! Experiment))))) -> ((inthreshold S (inthreshold & (Experiment & (Z (! Experiment))))) | inthreshold)))",
            "CoCoSpecCode": "(H(((not (Experiment) and YtoPre(Experiment)) => YtoPre((SI((Experiment and ZtoPre(not (Experiment))),inthreshold) or inthreshold)))) and (SI((Experiment and ZtoPre(not (Experiment))),not ((not (Experiment) and YtoPre(Experiment)))) => (SI((Experiment and ZtoPre(not (Experiment))),inthreshold) or inthreshold)))",
            "ftExpanded": "((LAST V ((! ((((! Experiment) & (! LAST)) & (X Experiment)) & (! LAST))) | (X ((((Experiment & (! LAST)) & (X (! Experiment))) | LAST) V ((! inthreshold) -> ((! (((Experiment & (! LAST)) & (X (! Experiment))) | LAST)) U inthreshold)))))) & (Experiment -> ((((Experiment & (! LAST)) & (X (! Experiment))) | LAST) V ((! inthreshold) -> ((! (((Experiment & (! LAST)) & (X (! Experiment))) | LAST)) U inthreshold)))))",
            "pctlExpanded": "P>=1[((G ((! (((! Experiment) & (X Experiment)) & (! false))) | (X ((Experiment & (X (! Experiment))) R ((! inthreshold) => (P>=1[((! (Experiment & (X (! Experiment)))) U inthreshold)])))))) & (Experiment => ((Experiment & (X (! Experiment))) | ((Experiment & (X (! Experiment))) R ((! inthreshold) => (P>=1[((! (Experiment & (X (! Experiment)))) U inthreshold)]))))))]",
            "ftInfAUExpanded": "((G ((! ((! Experiment) & (X Experiment))) | (X ((Experiment & (X (! Experiment))) V ((! inthreshold) -> ((! (Experiment & (X (! Experiment)))) U inthreshold)))))) & (Experiment -> ((Experiment & (X (! Experiment))) V ((! inthreshold) -> ((! (Experiment & (X (! Experiment)))) U inthreshold)))))",
            "component": "Rover"
        },
        "status": "",
        "_id": "eafc3924-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R68-2",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The second phase is to control the\nrobot to move toward the planned\ngrasping location to make the robot\nready for the capturing of the target.",
        "comments": "",
        "fulltext": "Upon SecondPhase ServicingSatellite shall eventually satisfy MoveToPosition",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "SecondPhase",
                "MoveToPosition"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(SecondPhase)",
            "regular_condition": "(SecondPhase)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "ServicingSatellite",
            "componentTextRange": [
                17,
                34
            ],
            "timingTextRange": [
                42,
                51
            ],
            "post_condition": "(MoveToPosition)",
            "responseTextRange": [
                53,
                74
            ],
            "diagramVariables": "TC = <b><i>(SecondPhase)</i></b>, Response = <b><i>(MoveToPosition)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(SecondPhase)</i></b> is true and any point in the interval where <b><i>(SecondPhase)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "SecondPhase",
            "regular_condition_unexp_ft": "SecondPhase",
            "regular_condition_unexp_pctl": "SecondPhase",
            "regular_condition_SMV_pt": "SecondPhase",
            "regular_condition_SMV_ft": "SecondPhase",
            "regular_condition_PRISM_pctl": "SecondPhase",
            "post_condition_unexp_pt": "MoveToPosition",
            "post_condition_unexp_ft": "MoveToPosition",
            "post_condition_unexp_pctl": "MoveToPosition",
            "post_condition_SMV_pt": "MoveToPosition",
            "post_condition_SMV_ft": "MoveToPosition",
            "post_condition_PRISM_pctl": "MoveToPosition",
            "ft": "((LAST V (((! SecondPhase) & ((! LAST) & (X SecondPhase))) -> (X ((! LAST) U MoveToPosition)))) & (SecondPhase -> ((! LAST) U MoveToPosition)))",
            "pt": "((H (! SecondPhase)) | (! ((! MoveToPosition) S ((! MoveToPosition) & (SecondPhase & (Z (! SecondPhase)))))))",
            "pctl": "P>=1[((G (((! SecondPhase) & (X SecondPhase)) => (X (P>=1[(F MoveToPosition)])))) & (SecondPhase => (P>=1[(F MoveToPosition)])))]",
            "ptExpanded": "((H (! SecondPhase)) | (! ((! MoveToPosition) S ((! MoveToPosition) & (SecondPhase & (Z (! SecondPhase)))))))",
            "CoCoSpecCode": "(H(not (SecondPhase)) or not (SI((SecondPhase and ZtoPre(not (SecondPhase))),not (MoveToPosition))))",
            "ftExpanded": "((LAST V (((! SecondPhase) & ((! LAST) & (X SecondPhase))) -> (X ((! LAST) U MoveToPosition)))) & (SecondPhase -> ((! LAST) U MoveToPosition)))",
            "pctlExpanded": "P>=1[((G (((! SecondPhase) & (X SecondPhase)) => (X (P>=1[(F MoveToPosition)])))) & (SecondPhase => (P>=1[(F MoveToPosition)])))]",
            "ftInfAUExpanded": "((G (((! SecondPhase) & (X SecondPhase)) -> (X (F MoveToPosition)))) & (SecondPhase -> (F MoveToPosition)))",
            "component": "ServicingSatellite"
        },
        "status": "",
        "_id": "eafc3925-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R53",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "When docking, Astrobee au-\ntonomously approaches its berth\nusing visual servoing relative to\nfiducials mounted to the dock",
        "comments": "",
        "fulltext": "In DockingMode Astrobee shall eventually satisfy approachberth",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "DockingMode",
                "approachberth"
            ],
            "scope_mode": "DockingMode",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                15,
                22
            ],
            "timingTextRange": [
                30,
                39
            ],
            "post_condition": "(approachberth)",
            "responseTextRange": [
                41,
                61
            ],
            "diagramVariables": "M = <b><i>DockingMode</i></b>, Response = <b><i>(approachberth)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>DockingMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_eventually_satisfaction.svg",
            "scope_mode_pt": "DockingMode",
            "scope_mode_ft": "DockingMode",
            "scope_mode_pctl": "DockingMode",
            "post_condition_unexp_pt": "approachberth",
            "post_condition_unexp_ft": "approachberth",
            "post_condition_unexp_pctl": "approachberth",
            "post_condition_SMV_pt": "approachberth",
            "post_condition_SMV_ft": "approachberth",
            "post_condition_PRISM_pctl": "approachberth",
            "ft": "((LAST V ((! (Fin_DockingMode & (! LAST))) | (X ((! (Lin_DockingMode | LAST)) U approachberth)))) & (DockingMode -> ((! (Lin_DockingMode | LAST)) U approachberth)))",
            "pt": "((H (Lin_DockingMode -> (Y (! ((! approachberth) S ((! approachberth) & Fin_DockingMode)))))) & (((! Lin_DockingMode) S ((! Lin_DockingMode) & Fin_DockingMode)) -> (! ((! approachberth) S ((! approachberth) & Fin_DockingMode)))))",
            "pctl": "P>=1[((G ((! (Fin_DockingMode & (! LAST))) | (X (P>=1[((! Lin_DockingMode) U approachberth)])))) & (DockingMode => (Lin_DockingMode | (P>=1[((! Lin_DockingMode) U approachberth)]))))]",
            "ptExpanded": "((H (((! DockingMode) & (Y DockingMode)) -> (Y (! ((! approachberth) S ((! approachberth) & (DockingMode & (Z (! DockingMode))))))))) & (((! ((! DockingMode) & (Y DockingMode))) S ((! ((! DockingMode) & (Y DockingMode))) & (DockingMode & (Z (! DockingMode))))) -> (! ((! approachberth) S ((! approachberth) & (DockingMode & (Z (! DockingMode))))))))",
            "CoCoSpecCode": "(H(((not (DockingMode) and YtoPre(DockingMode)) => YtoPre(not (SI((DockingMode and ZtoPre(not (DockingMode))),not (approachberth)))))) and (SI((DockingMode and ZtoPre(not (DockingMode))),not ((not (DockingMode) and YtoPre(DockingMode)))) => not (SI((DockingMode and ZtoPre(not (DockingMode))),not (approachberth)))))",
            "ftExpanded": "((LAST V ((! ((((! DockingMode) & (! LAST)) & (X DockingMode)) & (! LAST))) | (X ((! (((DockingMode & (! LAST)) & (X (! DockingMode))) | LAST)) U approachberth)))) & (DockingMode -> ((! (((DockingMode & (! LAST)) & (X (! DockingMode))) | LAST)) U approachberth)))",
            "pctlExpanded": "P>=1[((G ((! (((! DockingMode) & (X DockingMode)) & (! false))) | (X (P>=1[((! (DockingMode & (X (! DockingMode)))) U approachberth)])))) & (DockingMode => ((DockingMode & (X (! DockingMode))) | (P>=1[((! (DockingMode & (X (! DockingMode)))) U approachberth)]))))]",
            "ftInfAUExpanded": "((G ((! ((! DockingMode) & (X DockingMode))) | (X ((! (DockingMode & (X (! DockingMode)))) U approachberth)))) & (DockingMode -> ((! (DockingMode & (X (! DockingMode)))) U approachberth)))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc3926-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R11-A",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Nominal testing mode: all compo-\nnents necessary to perform tests are\nactive",
        "comments": "",
        "fulltext": "In NOMINALTESTINGMODE IMCOMPONENT shall always satisfy necessary_testing_components_active",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "NOMINALTESTINGMODE",
                "necessary_testing_components_active"
            ],
            "scope_mode": "NOMINALTESTINGMODE",
            "scopeTextRange": [
                0,
                20
            ],
            "component_name": "IMCOMPONENT",
            "componentTextRange": [
                22,
                32
            ],
            "timingTextRange": [
                40,
                45
            ],
            "post_condition": "(necessary_testing_components_active)",
            "responseTextRange": [
                47,
                89
            ],
            "diagramVariables": "M = <b><i>NOMINALTESTINGMODE</i></b>, Response = <b><i>(necessary_testing_components_active)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>NOMINALTESTINGMODE</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "NOMINALTESTINGMODE",
            "scope_mode_ft": "NOMINALTESTINGMODE",
            "scope_mode_pctl": "NOMINALTESTINGMODE",
            "post_condition_unexp_pt": "necessary_testing_components_active",
            "post_condition_unexp_ft": "necessary_testing_components_active",
            "post_condition_unexp_pctl": "necessary_testing_components_active",
            "post_condition_SMV_pt": "necessary_testing_components_active",
            "post_condition_SMV_ft": "necessary_testing_components_active",
            "post_condition_PRISM_pctl": "necessary_testing_components_active",
            "ft": "(LAST V (NOMINALTESTINGMODE -> necessary_testing_components_active))",
            "pt": "(H (NOMINALTESTINGMODE -> necessary_testing_components_active))",
            "pctl": "P>=1[((G ((! (Fin_NOMINALTESTINGMODE & (! LAST))) | (X (P>=1[(Lin_NOMINALTESTINGMODE R necessary_testing_components_active)])))) & (NOMINALTESTINGMODE => (Lin_NOMINALTESTINGMODE | (P>=1[(Lin_NOMINALTESTINGMODE R necessary_testing_components_active)]))))]",
            "ptExpanded": "(H (NOMINALTESTINGMODE -> necessary_testing_components_active))",
            "CoCoSpecCode": "H((NOMINALTESTINGMODE => necessary_testing_components_active))",
            "ftExpanded": "(LAST V (NOMINALTESTINGMODE -> necessary_testing_components_active))",
            "pctlExpanded": "P>=1[((G ((! (((! NOMINALTESTINGMODE) & (X NOMINALTESTINGMODE)) & (! false))) | (X (P>=1[((NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE))) R necessary_testing_components_active)])))) & (NOMINALTESTINGMODE => ((NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE))) | (P>=1[((NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE))) R necessary_testing_components_active)]))))]",
            "ftInfAUExpanded": "(G (NOMINALTESTINGMODE -> necessary_testing_components_active))",
            "component": "IMCOMPONENT"
        },
        "status": "",
        "_id": "eafc3927-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R49",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "the top-facing SpeedCam sensor\npackage provides an independent\nover-speed cutoff function, estimat-\ning velocity using its own optical\nflow, infrared ranging, and IMU\nsensors",
        "comments": "",
        "fulltext": "Whenever Moving Astrobee shall always satisfy cutoff >currentspeed",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Moving",
                "cutoff",
                "currentspeed"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(Moving)",
            "regular_condition": "(Moving)",
            "conditionTextRange": [
                0,
                14
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                16,
                23
            ],
            "timingTextRange": [
                31,
                36
            ],
            "post_condition": "(cutoff > currentspeed)",
            "responseTextRange": [
                38,
                65
            ],
            "diagramVariables": "CC = <b><i>(Moving)</i></b>, Response = <b><i>(cutoff > currentspeed)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(Moving)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "Moving",
            "regular_condition_unexp_ft": "Moving",
            "regular_condition_unexp_pctl": "Moving",
            "regular_condition_SMV_pt": "Moving",
            "regular_condition_SMV_ft": "Moving",
            "regular_condition_PRISM_pctl": "Moving",
            "post_condition_unexp_pt": "(cutoff > currentspeed)",
            "post_condition_unexp_ft": "(cutoff > currentspeed)",
            "post_condition_unexp_pctl": "(cutoff > currentspeed)",
            "post_condition_SMV_pt": "(cutoff > currentspeed)",
            "post_condition_SMV_ft": "(cutoff > currentspeed)",
            "post_condition_PRISM_pctl": "(cutoff > currentspeed)",
            "ft": "(LAST V (Moving -> (LAST V (cutoff > currentspeed))))",
            "pt": "(H ((H (! Moving)) | (cutoff > currentspeed)))",
            "pctl": "P>=1[(G (Moving => (P>=1[(G (cutoff > currentspeed))])))]",
            "ptExpanded": "(H ((H (! Moving)) | (cutoff > currentspeed)))",
            "CoCoSpecCode": "H((H(not (Moving)) or (cutoff > currentspeed)))",
            "ftExpanded": "(LAST V (Moving -> (LAST V (cutoff > currentspeed))))",
            "pctlExpanded": "P>=1[(G (Moving => (P>=1[(G (cutoff > currentspeed))])))]",
            "ftInfAUExpanded": "(G (Moving -> (G (cutoff > currentspeed))))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc3928-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R61-A",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The Control Station warns opera-\ntors when they create plans that\ntranslate through a KOZ.",
        "comments": "",
        "fulltext": "Whenever KOZPlan ControlStation shall at the next timepoint satisfy Warn",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "KOZPlan",
                "Warn"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(KOZPlan)",
            "regular_condition": "(KOZPlan)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "ControlStation",
            "componentTextRange": [
                17,
                30
            ],
            "timingTextRange": [
                38,
                58
            ],
            "post_condition": "(Warn)",
            "responseTextRange": [
                60,
                71
            ],
            "diagramVariables": "CC = <b><i>(KOZPlan)</i></b>, Response = <b><i>(Warn)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(KOZPlan)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "KOZPlan",
            "regular_condition_unexp_ft": "KOZPlan",
            "regular_condition_unexp_pctl": "KOZPlan",
            "regular_condition_SMV_pt": "KOZPlan",
            "regular_condition_SMV_ft": "KOZPlan",
            "regular_condition_PRISM_pctl": "KOZPlan",
            "post_condition_unexp_pt": "Warn",
            "post_condition_unexp_ft": "Warn",
            "post_condition_unexp_pctl": "Warn",
            "post_condition_SMV_pt": "Warn",
            "post_condition_SMV_ft": "Warn",
            "post_condition_PRISM_pctl": "Warn",
            "ft": "(LAST V (KOZPlan -> (LAST | (X Warn))))",
            "pt": "(H ((Y KOZPlan) -> (Warn | (Z FALSE))))",
            "pctl": "P>=1[(G (KOZPlan => (P>=1[(LAST | (X Warn))])))]",
            "ptExpanded": "(H ((Y KOZPlan) -> (Warn | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre(KOZPlan) => (Warn or ZtoPre(false))))",
            "ftExpanded": "(LAST V (KOZPlan -> (LAST | (X Warn))))",
            "pctlExpanded": "P>=1[(G (KOZPlan => (P>=1[(false | (X Warn))])))]",
            "ftInfAUExpanded": "(G (KOZPlan -> (X Warn)))",
            "component": "ControlStation"
        },
        "status": "",
        "_id": "eafc3929-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R14-F",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Finally, the rendezvous phase cov-\ners the approach.",
        "comments": "",
        "fulltext": "Upon cyngusarriaval System shall at the next timepoint satisfy RendezvousPhase",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "cyngusarriaval",
                "RendezvousPhase"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(cyngusarriaval)",
            "regular_condition": "(cyngusarriaval)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "timingTextRange": [
                33,
                53
            ],
            "post_condition": "(RendezvousPhase)",
            "responseTextRange": [
                55,
                77
            ],
            "diagramVariables": "TC = <b><i>(cyngusarriaval)</i></b>, Response = <b><i>(RendezvousPhase)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(cyngusarriaval)</i></b> is true and any point in the interval where <b><i>(cyngusarriaval)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "cyngusarriaval",
            "regular_condition_unexp_ft": "cyngusarriaval",
            "regular_condition_unexp_pctl": "cyngusarriaval",
            "regular_condition_SMV_pt": "cyngusarriaval",
            "regular_condition_SMV_ft": "cyngusarriaval",
            "regular_condition_PRISM_pctl": "cyngusarriaval",
            "post_condition_unexp_pt": "RendezvousPhase",
            "post_condition_unexp_ft": "RendezvousPhase",
            "post_condition_unexp_pctl": "RendezvousPhase",
            "post_condition_SMV_pt": "RendezvousPhase",
            "post_condition_SMV_ft": "RendezvousPhase",
            "post_condition_PRISM_pctl": "RendezvousPhase",
            "ft": "((LAST V (((! cyngusarriaval) & ((! LAST) & (X cyngusarriaval))) -> (X (LAST | (X RendezvousPhase))))) & (cyngusarriaval -> (LAST | (X RendezvousPhase))))",
            "pt": "(H ((Y (cyngusarriaval & (Z (! cyngusarriaval)))) -> (RendezvousPhase | (Z FALSE))))",
            "pctl": "P>=1[((G (((! cyngusarriaval) & (X cyngusarriaval)) => (X (P>=1[(LAST | (X RendezvousPhase))])))) & (cyngusarriaval => (P>=1[(LAST | (X RendezvousPhase))])))]",
            "ptExpanded": "(H ((Y (cyngusarriaval & (Z (! cyngusarriaval)))) -> (RendezvousPhase | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre((cyngusarriaval and ZtoPre(not (cyngusarriaval)))) => (RendezvousPhase or ZtoPre(false))))",
            "ftExpanded": "((LAST V (((! cyngusarriaval) & ((! LAST) & (X cyngusarriaval))) -> (X (LAST | (X RendezvousPhase))))) & (cyngusarriaval -> (LAST | (X RendezvousPhase))))",
            "pctlExpanded": "P>=1[((G (((! cyngusarriaval) & (X cyngusarriaval)) => (X (P>=1[(false | (X RendezvousPhase))])))) & (cyngusarriaval => (P>=1[(false | (X RendezvousPhase))])))]",
            "ftInfAUExpanded": "((G (((! cyngusarriaval) & (X cyngusarriaval)) -> (X (X RendezvousPhase)))) & (cyngusarriaval -> (X RendezvousPhase)))",
            "component": "System"
        },
        "status": "",
        "_id": "eafc392a-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R11-B",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "data are transmitted to SM to be\nelaborated, then transmitted to ISS\nand eventually to Ground Segment",
        "comments": "",
        "fulltext": "In NOMINALTESTINGMODE whenever SMConnection & ISSConnection & GroundSegment & !files IM shall until files satisfy transmit",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "NOMINALTESTINGMODE",
                "SMConnection",
                "ISSConnection",
                "GroundSegment",
                "files",
                "transmit"
            ],
            "scope_mode": "NOMINALTESTINGMODE",
            "scopeTextRange": [
                0,
                20
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(SMConnection & ISSConnection & GroundSegment & ! files)",
            "regular_condition": "(SMConnection & ISSConnection & GroundSegment & ! files)",
            "conditionTextRange": [
                22,
                83
            ],
            "component_name": "IM",
            "componentTextRange": [
                85,
                86
            ],
            "stop_condition": "(files)",
            "timingTextRange": [
                94,
                104
            ],
            "post_condition": "(transmit)",
            "responseTextRange": [
                106,
                121
            ],
            "diagramVariables": "M = <b><i>NOMINALTESTINGMODE</i></b>, CC = <b><i>(SMConnection & ISSConnection & GroundSegment & ! files)</i></b>, SC = <b><i>(files)</i></b>, Response = <b><i>(transmit)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>NOMINALTESTINGMODE</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(SMConnection & ISSConnection & GroundSegment & ! files)</i></b> is true.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_until_satisfaction.svg",
            "scope_mode_pt": "NOMINALTESTINGMODE",
            "scope_mode_ft": "NOMINALTESTINGMODE",
            "scope_mode_pctl": "NOMINALTESTINGMODE",
            "regular_condition_unexp_pt": "(((SMConnection & ISSConnection) & GroundSegment) & (! files))",
            "regular_condition_unexp_ft": "(((SMConnection & ISSConnection) & GroundSegment) & (! files))",
            "regular_condition_unexp_pctl": "(((SMConnection & ISSConnection) & GroundSegment) & (! files))",
            "regular_condition_SMV_pt": "(((SMConnection & ISSConnection) & GroundSegment) & (! files))",
            "regular_condition_SMV_ft": "(((SMConnection & ISSConnection) & GroundSegment) & (! files))",
            "regular_condition_PRISM_pctl": "(((SMConnection & ISSConnection) & GroundSegment) & (! files))",
            "post_condition_unexp_pt": "transmit",
            "post_condition_unexp_ft": "transmit",
            "post_condition_unexp_pctl": "transmit",
            "post_condition_SMV_pt": "transmit",
            "post_condition_SMV_ft": "transmit",
            "post_condition_PRISM_pctl": "transmit",
            "stop_condition_unexp_pt": "files",
            "stop_condition_unexp_ft": "files",
            "stop_condition_PRISM_pctl": "files",
            "stop_condition_SMV_pt": "files",
            "stop_condition_SMV_ft": "files",
            "ft": "((LAST V ((! (Fin_NOMINALTESTINGMODE & (! LAST))) | (X ((Lin_NOMINALTESTINGMODE | LAST) V ((((SMConnection & ISSConnection) & GroundSegment) & (! files)) -> ((! (((! files) & (! (Lin_NOMINALTESTINGMODE | LAST))) U ((! transmit) & (! files)))) | (((transmit & (Lin_NOMINALTESTINGMODE | LAST)) | (Lin_NOMINALTESTINGMODE | LAST)) V transmit))))))) & (NOMINALTESTINGMODE -> ((Lin_NOMINALTESTINGMODE | LAST) V ((((SMConnection & ISSConnection) & GroundSegment) & (! files)) -> ((! (((! files) & (! (Lin_NOMINALTESTINGMODE | LAST))) U ((! transmit) & (! files)))) | (((transmit & (Lin_NOMINALTESTINGMODE | LAST)) | (Lin_NOMINALTESTINGMODE | LAST)) V transmit))))))",
            "pt": "((H (Lin_NOMINALTESTINGMODE -> (Y ((((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) S ((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) & Fin_NOMINALTESTINGMODE)) | (((! files) S ((! files) & (((SMConnection & ISSConnection) & GroundSegment) & (! files)))) -> transmit)) S ((((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) S ((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) & Fin_NOMINALTESTINGMODE)) | (((! files) S ((! files) & (((SMConnection & ISSConnection) & GroundSegment) & (! files)))) -> transmit)) & Fin_NOMINALTESTINGMODE))))) & (((! Lin_NOMINALTESTINGMODE) S ((! Lin_NOMINALTESTINGMODE) & Fin_NOMINALTESTINGMODE)) -> ((((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) S ((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) & Fin_NOMINALTESTINGMODE)) | (((! files) S ((! files) & (((SMConnection & ISSConnection) & GroundSegment) & (! files)))) -> transmit)) S ((((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) S ((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) & Fin_NOMINALTESTINGMODE)) | (((! files) S ((! files) & (((SMConnection & ISSConnection) & GroundSegment) & (! files)))) -> transmit)) & Fin_NOMINALTESTINGMODE))))",
            "pctl": "P>=1[((G ((! (Fin_NOMINALTESTINGMODE & (! LAST))) | (X (Lin_NOMINALTESTINGMODE R ((((SMConnection & ISSConnection) & GroundSegment) & (! files)) => (P>=1[((! (((! undefined) & (! Lin_NOMINALTESTINGMODE)) U ((! transmit) & (! undefined)))) | (((transmit & Lin_NOMINALTESTINGMODE) | Lin_NOMINALTESTINGMODE) R transmit))])))))) & (NOMINALTESTINGMODE => (Lin_NOMINALTESTINGMODE | (Lin_NOMINALTESTINGMODE R ((((SMConnection & ISSConnection) & GroundSegment) & (! files)) => (P>=1[((! (((! undefined) & (! Lin_NOMINALTESTINGMODE)) U ((! transmit) & (! undefined)))) | (((transmit & Lin_NOMINALTESTINGMODE) | Lin_NOMINALTESTINGMODE) R transmit))]))))))]",
            "ptExpanded": "((H (((! NOMINALTESTINGMODE) & (Y NOMINALTESTINGMODE)) -> (Y ((((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) S ((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) & (NOMINALTESTINGMODE & (Z (! NOMINALTESTINGMODE))))) | (((! files) S ((! files) & (((SMConnection & ISSConnection) & GroundSegment) & (! files)))) -> transmit)) S ((((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) S ((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) & (NOMINALTESTINGMODE & (Z (! NOMINALTESTINGMODE))))) | (((! files) S ((! files) & (((SMConnection & ISSConnection) & GroundSegment) & (! files)))) -> transmit)) & (NOMINALTESTINGMODE & (Z (! NOMINALTESTINGMODE)))))))) & (((! ((! NOMINALTESTINGMODE) & (Y NOMINALTESTINGMODE))) S ((! ((! NOMINALTESTINGMODE) & (Y NOMINALTESTINGMODE))) & (NOMINALTESTINGMODE & (Z (! NOMINALTESTINGMODE))))) -> ((((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) S ((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) & (NOMINALTESTINGMODE & (Z (! NOMINALTESTINGMODE))))) | (((! files) S ((! files) & (((SMConnection & ISSConnection) & GroundSegment) & (! files)))) -> transmit)) S ((((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) S ((! (((SMConnection & ISSConnection) & GroundSegment) & (! files))) & (NOMINALTESTINGMODE & (Z (! NOMINALTESTINGMODE))))) | (((! files) S ((! files) & (((SMConnection & ISSConnection) & GroundSegment) & (! files)))) -> transmit)) & (NOMINALTESTINGMODE & (Z (! NOMINALTESTINGMODE)))))))",
            "CoCoSpecCode": "(H(((not (NOMINALTESTINGMODE) and YtoPre(NOMINALTESTINGMODE)) => YtoPre(SI((NOMINALTESTINGMODE and ZtoPre(not (NOMINALTESTINGMODE))),(SI((NOMINALTESTINGMODE and ZtoPre(not (NOMINALTESTINGMODE))),not ((((SMConnection and ISSConnection) and GroundSegment) and not (files)))) or (SI((((SMConnection and ISSConnection) and GroundSegment) and not (files)),not (files)) => transmit)))))) and (SI((NOMINALTESTINGMODE and ZtoPre(not (NOMINALTESTINGMODE))),not ((not (NOMINALTESTINGMODE) and YtoPre(NOMINALTESTINGMODE)))) => SI((NOMINALTESTINGMODE and ZtoPre(not (NOMINALTESTINGMODE))),(SI((NOMINALTESTINGMODE and ZtoPre(not (NOMINALTESTINGMODE))),not ((((SMConnection and ISSConnection) and GroundSegment) and not (files)))) or (SI((((SMConnection and ISSConnection) and GroundSegment) and not (files)),not (files)) => transmit)))))",
            "ftExpanded": "((LAST V ((! ((((! NOMINALTESTINGMODE) & (! LAST)) & (X NOMINALTESTINGMODE)) & (! LAST))) | (X ((((NOMINALTESTINGMODE & (! LAST)) & (X (! NOMINALTESTINGMODE))) | LAST) V ((((SMConnection & ISSConnection) & GroundSegment) & (! files)) -> ((! (((! files) & (! (((NOMINALTESTINGMODE & (! LAST)) & (X (! NOMINALTESTINGMODE))) | LAST))) U ((! transmit) & (! files)))) | (((transmit & (((NOMINALTESTINGMODE & (! LAST)) & (X (! NOMINALTESTINGMODE))) | LAST)) | (((NOMINALTESTINGMODE & (! LAST)) & (X (! NOMINALTESTINGMODE))) | LAST)) V transmit))))))) & (NOMINALTESTINGMODE -> ((((NOMINALTESTINGMODE & (! LAST)) & (X (! NOMINALTESTINGMODE))) | LAST) V ((((SMConnection & ISSConnection) & GroundSegment) & (! files)) -> ((! (((! files) & (! (((NOMINALTESTINGMODE & (! LAST)) & (X (! NOMINALTESTINGMODE))) | LAST))) U ((! transmit) & (! files)))) | (((transmit & (((NOMINALTESTINGMODE & (! LAST)) & (X (! NOMINALTESTINGMODE))) | LAST)) | (((NOMINALTESTINGMODE & (! LAST)) & (X (! NOMINALTESTINGMODE))) | LAST)) V transmit))))))",
            "pctlExpanded": "P>=1[((G ((! (((! NOMINALTESTINGMODE) & (X NOMINALTESTINGMODE)) & (! false))) | (X ((NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE))) R ((((SMConnection & ISSConnection) & GroundSegment) & (! files)) => (P>=1[((! (((! files) & (! (NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE))))) U ((! transmit) & (! files)))) | (((transmit & (NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE)))) | (NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE)))) R transmit))])))))) & (NOMINALTESTINGMODE => ((NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE))) | ((NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE))) R ((((SMConnection & ISSConnection) & GroundSegment) & (! files)) => (P>=1[((! (((! files) & (! (NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE))))) U ((! transmit) & (! files)))) | (((transmit & (NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE)))) | (NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE)))) R transmit))]))))))]",
            "ftInfAUExpanded": "((G ((! ((! NOMINALTESTINGMODE) & (X NOMINALTESTINGMODE))) | (X ((NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE))) V ((((SMConnection & ISSConnection) & GroundSegment) & (! files)) -> ((! (((! files) & (! (NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE))))) U ((! transmit) & (! files)))) | (((transmit & (NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE)))) | (NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE)))) V transmit))))))) & (NOMINALTESTINGMODE -> ((NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE))) V ((((SMConnection & ISSConnection) & GroundSegment) & (! files)) -> ((! (((! files) & (! (NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE))))) U ((! transmit) & (! files)))) | (((transmit & (NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE)))) | (NOMINALTESTINGMODE & (X (! NOMINALTESTINGMODE)))) V transmit))))))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc392b-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R77-A2",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "However, if the vSLAM output re-\nmains unavailable for an extended\nperiod, the robot rotates in place un-\ntil the feature points detected in the\ncurrent view align with those in the\nstored map",
        "comments": "",
        "fulltext": "whenever vSLAMUnavailable IntBall2 shall eventually satisfy FeaturePointDetected",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "vSLAMUnavailable",
                "FeaturePointDetected"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(vSLAMUnavailable)",
            "regular_condition": "(vSLAMUnavailable)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "IntBall2",
            "componentTextRange": [
                26,
                33
            ],
            "timingTextRange": [
                41,
                50
            ],
            "post_condition": "(FeaturePointDetected)",
            "responseTextRange": [
                52,
                79
            ],
            "diagramVariables": "CC = <b><i>(vSLAMUnavailable)</i></b>, Response = <b><i>(FeaturePointDetected)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(vSLAMUnavailable)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "vSLAMUnavailable",
            "regular_condition_unexp_ft": "vSLAMUnavailable",
            "regular_condition_unexp_pctl": "vSLAMUnavailable",
            "regular_condition_SMV_pt": "vSLAMUnavailable",
            "regular_condition_SMV_ft": "vSLAMUnavailable",
            "regular_condition_PRISM_pctl": "vSLAMUnavailable",
            "post_condition_unexp_pt": "FeaturePointDetected",
            "post_condition_unexp_ft": "FeaturePointDetected",
            "post_condition_unexp_pctl": "FeaturePointDetected",
            "post_condition_SMV_pt": "FeaturePointDetected",
            "post_condition_SMV_ft": "FeaturePointDetected",
            "post_condition_PRISM_pctl": "FeaturePointDetected",
            "ft": "(LAST V (vSLAMUnavailable -> ((! LAST) U FeaturePointDetected)))",
            "pt": "((H (! vSLAMUnavailable)) | (! ((! FeaturePointDetected) S ((! FeaturePointDetected) & vSLAMUnavailable))))",
            "pctl": "P>=1[(G (vSLAMUnavailable => (P>=1[(F FeaturePointDetected)])))]",
            "ptExpanded": "((H (! vSLAMUnavailable)) | (! ((! FeaturePointDetected) S ((! FeaturePointDetected) & vSLAMUnavailable))))",
            "CoCoSpecCode": "(H(not (vSLAMUnavailable)) or not (SI(vSLAMUnavailable,not (FeaturePointDetected))))",
            "ftExpanded": "(LAST V (vSLAMUnavailable -> ((! LAST) U FeaturePointDetected)))",
            "pctlExpanded": "P>=1[(G (vSLAMUnavailable => (P>=1[(F FeaturePointDetected)])))]",
            "ftInfAUExpanded": "(G (vSLAMUnavailable -> (F FeaturePointDetected)))",
            "component": "IntBall2"
        },
        "status": "",
        "_id": "eafc392c-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R54",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "When mating is complete, perma-\nnent magnets on the berth attract\nstriker plates on the robot, provid-\ning a passive retention force",
        "comments": "",
        "fulltext": "Upon MatingComplete DS shall eventually satisfy StrikeMagnets",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "MatingComplete",
                "StrikeMagnets"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(MatingComplete)",
            "regular_condition": "(MatingComplete)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "DS",
            "componentTextRange": [
                20,
                21
            ],
            "timingTextRange": [
                29,
                38
            ],
            "post_condition": "(StrikeMagnets)",
            "responseTextRange": [
                40,
                60
            ],
            "diagramVariables": "TC = <b><i>(MatingComplete)</i></b>, Response = <b><i>(StrikeMagnets)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(MatingComplete)</i></b> is true and any point in the interval where <b><i>(MatingComplete)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "MatingComplete",
            "regular_condition_unexp_ft": "MatingComplete",
            "regular_condition_unexp_pctl": "MatingComplete",
            "regular_condition_SMV_pt": "MatingComplete",
            "regular_condition_SMV_ft": "MatingComplete",
            "regular_condition_PRISM_pctl": "MatingComplete",
            "post_condition_unexp_pt": "StrikeMagnets",
            "post_condition_unexp_ft": "StrikeMagnets",
            "post_condition_unexp_pctl": "StrikeMagnets",
            "post_condition_SMV_pt": "StrikeMagnets",
            "post_condition_SMV_ft": "StrikeMagnets",
            "post_condition_PRISM_pctl": "StrikeMagnets",
            "ft": "((LAST V (((! MatingComplete) & ((! LAST) & (X MatingComplete))) -> (X ((! LAST) U StrikeMagnets)))) & (MatingComplete -> ((! LAST) U StrikeMagnets)))",
            "pt": "((H (! MatingComplete)) | (! ((! StrikeMagnets) S ((! StrikeMagnets) & (MatingComplete & (Z (! MatingComplete)))))))",
            "pctl": "P>=1[((G (((! MatingComplete) & (X MatingComplete)) => (X (P>=1[(F StrikeMagnets)])))) & (MatingComplete => (P>=1[(F StrikeMagnets)])))]",
            "ptExpanded": "((H (! MatingComplete)) | (! ((! StrikeMagnets) S ((! StrikeMagnets) & (MatingComplete & (Z (! MatingComplete)))))))",
            "CoCoSpecCode": "(H(not (MatingComplete)) or not (SI((MatingComplete and ZtoPre(not (MatingComplete))),not (StrikeMagnets))))",
            "ftExpanded": "((LAST V (((! MatingComplete) & ((! LAST) & (X MatingComplete))) -> (X ((! LAST) U StrikeMagnets)))) & (MatingComplete -> ((! LAST) U StrikeMagnets)))",
            "pctlExpanded": "P>=1[((G (((! MatingComplete) & (X MatingComplete)) => (X (P>=1[(F StrikeMagnets)])))) & (MatingComplete => (P>=1[(F StrikeMagnets)])))]",
            "ftInfAUExpanded": "((G (((! MatingComplete) & (X MatingComplete)) -> (X (F StrikeMagnets)))) & (MatingComplete -> (F StrikeMagnets)))",
            "component": "DS"
        },
        "status": "",
        "_id": "eafc392d-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R14-G",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Finally, the rendezvous phase cov-\ners the approach and capture by the\nrobotic arm",
        "comments": "",
        "fulltext": "Upon RendezvousPhase System shall eventually satisfy captureroboticarm",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "RendezvousPhase",
                "captureroboticarm"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(RendezvousPhase)",
            "regular_condition": "(RendezvousPhase)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "System",
            "componentTextRange": [
                21,
                26
            ],
            "timingTextRange": [
                34,
                43
            ],
            "post_condition": "(captureroboticarm)",
            "responseTextRange": [
                45,
                69
            ],
            "diagramVariables": "TC = <b><i>(RendezvousPhase)</i></b>, Response = <b><i>(captureroboticarm)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(RendezvousPhase)</i></b> is true and any point in the interval where <b><i>(RendezvousPhase)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "RendezvousPhase",
            "regular_condition_unexp_ft": "RendezvousPhase",
            "regular_condition_unexp_pctl": "RendezvousPhase",
            "regular_condition_SMV_pt": "RendezvousPhase",
            "regular_condition_SMV_ft": "RendezvousPhase",
            "regular_condition_PRISM_pctl": "RendezvousPhase",
            "post_condition_unexp_pt": "captureroboticarm",
            "post_condition_unexp_ft": "captureroboticarm",
            "post_condition_unexp_pctl": "captureroboticarm",
            "post_condition_SMV_pt": "captureroboticarm",
            "post_condition_SMV_ft": "captureroboticarm",
            "post_condition_PRISM_pctl": "captureroboticarm",
            "ft": "((LAST V (((! RendezvousPhase) & ((! LAST) & (X RendezvousPhase))) -> (X ((! LAST) U captureroboticarm)))) & (RendezvousPhase -> ((! LAST) U captureroboticarm)))",
            "pt": "((H (! RendezvousPhase)) | (! ((! captureroboticarm) S ((! captureroboticarm) & (RendezvousPhase & (Z (! RendezvousPhase)))))))",
            "pctl": "P>=1[((G (((! RendezvousPhase) & (X RendezvousPhase)) => (X (P>=1[(F captureroboticarm)])))) & (RendezvousPhase => (P>=1[(F captureroboticarm)])))]",
            "ptExpanded": "((H (! RendezvousPhase)) | (! ((! captureroboticarm) S ((! captureroboticarm) & (RendezvousPhase & (Z (! RendezvousPhase)))))))",
            "CoCoSpecCode": "(H(not (RendezvousPhase)) or not (SI((RendezvousPhase and ZtoPre(not (RendezvousPhase))),not (captureroboticarm))))",
            "ftExpanded": "((LAST V (((! RendezvousPhase) & ((! LAST) & (X RendezvousPhase))) -> (X ((! LAST) U captureroboticarm)))) & (RendezvousPhase -> ((! LAST) U captureroboticarm)))",
            "pctlExpanded": "P>=1[((G (((! RendezvousPhase) & (X RendezvousPhase)) => (X (P>=1[(F captureroboticarm)])))) & (RendezvousPhase => (P>=1[(F captureroboticarm)])))]",
            "ftInfAUExpanded": "((G (((! RendezvousPhase) & (X RendezvousPhase)) -> (X (F captureroboticarm)))) & (RendezvousPhase -> (F captureroboticarm)))",
            "component": "System"
        },
        "status": "",
        "_id": "eafc392e-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R37",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The probability that the aircraft\nturns more than a prescribed degree\n(|he| ≤ 35°) shall be extremely low",
        "comments": "",
        "fulltext": "Aircraft shall with probability <= 0.002 eventually satisfy absReal(he) <= 35",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "bound",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "he"
            ],
            "component_name": "Aircraft",
            "componentTextRange": [
                0,
                7
            ],
            "probability_bound": [
                "<=",
                "0.002"
            ],
            "probabilityTextRange": [
                15,
                39
            ],
            "timingTextRange": [
                41,
                50
            ],
            "post_condition": "(absReal ( he ) <= 35)",
            "responseTextRange": [
                52,
                76
            ],
            "diagramVariables": "Response = <b><i>(absReal ( he ) <= 35)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "bound": "<=0.002",
            "post_condition_unexp_pt": "(absReal(he) <= 35)",
            "post_condition_unexp_ft": "(absReal(he) <= 35)",
            "post_condition_unexp_pctl": "(absReal(he) <= 35)",
            "post_condition_SMV_pt": "(absReal(he) <= 35)",
            "post_condition_SMV_ft": "(absReal(he) <= 35)",
            "post_condition_PRISM_pctl": "(absReal(he) <= 35)",
            "ft": "((! LAST) U (absReal(he) <= 35))",
            "pt": "(O (absReal(he) <= 35))",
            "pctl": "(P<=0.002[(F (absReal(he) <= 35))])",
            "ptExpanded": "(O (absReal(he) <= 35))",
            "CoCoSpecCode": "O((absReal(he) <= 35))",
            "ftExpanded": "((! LAST) U (absReal(he) <= 35))",
            "pctlExpanded": "(P<=0.002[(F (absReal(he) <= 35))])",
            "ftInfAUExpanded": "(F (absReal(he) <= 35))",
            "component": "Aircraft"
        },
        "status": "",
        "_id": "eafc392f-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R61-B1",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The Control Station prevents oper-\nators from sending plans that trans-\nlate through a KOZ to Astrobee un-\ntil the violating segments are modi-\nfied",
        "comments": "",
        "fulltext": "ControlStation shall until !KOZPlan satisfy !SendPlan",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "null",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "KOZPlan",
                "SendPlan"
            ],
            "component_name": "ControlStation",
            "componentTextRange": [
                0,
                13
            ],
            "stop_condition": "(! KOZPlan)",
            "timingTextRange": [
                21,
                34
            ],
            "post_condition": "(! SendPlan)",
            "responseTextRange": [
                36,
                52
            ],
            "diagramVariables": "SC = <b><i>(! KOZPlan)</i></b>, Response = <b><i>(! SendPlan)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(! SendPlan)",
            "post_condition_unexp_ft": "(! SendPlan)",
            "post_condition_unexp_pctl": "(! SendPlan)",
            "post_condition_SMV_pt": "(! SendPlan)",
            "post_condition_SMV_ft": "(! SendPlan)",
            "post_condition_PRISM_pctl": "(! SendPlan)",
            "stop_condition_unexp_pt": "(! KOZPlan)",
            "stop_condition_unexp_ft": "(! KOZPlan)",
            "stop_condition_PRISM_pctl": "(! KOZPlan)",
            "stop_condition_SMV_pt": "(! KOZPlan)",
            "stop_condition_SMV_ft": "(! KOZPlan)",
            "ft": "(((! KOZPlan) V ((! SendPlan) | (! KOZPlan))) | (LAST V (! SendPlan)))",
            "pt": "(H ((H (! (! KOZPlan))) -> (! SendPlan)))",
            "pctl": "(P>=1[((undefined R ((! SendPlan) | undefined)) | (LAST R (! SendPlan)))])",
            "ptExpanded": "(H ((H KOZPlan) -> (! SendPlan)))",
            "CoCoSpecCode": "H((H(KOZPlan) => not (SendPlan)))",
            "ftExpanded": "(((! KOZPlan) V ((! SendPlan) | (! KOZPlan))) | (LAST V (! SendPlan)))",
            "pctlExpanded": "(P>=1[(((! KOZPlan) R ((! SendPlan) | (! KOZPlan))) | (false R (! SendPlan)))])",
            "ftInfAUExpanded": "((! KOZPlan) V ((! SendPlan) | (! KOZPlan)))",
            "component": "ControlStation"
        },
        "status": "",
        "_id": "eafc3930-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R12",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Nominal crew mode: all main func-\ntionalities are active and access of\nthe crew to perform visual inspec-\ntions is allowed.",
        "comments": "",
        "fulltext": "In NOMINALCREWMODE IM shall always satisfy main_functionalities_active & crew_access",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "NOMINALCREWMODE",
                "main_functionalities_active",
                "crew_access"
            ],
            "scope_mode": "NOMINALCREWMODE",
            "scopeTextRange": [
                0,
                17
            ],
            "component_name": "IM",
            "componentTextRange": [
                19,
                20
            ],
            "timingTextRange": [
                28,
                33
            ],
            "post_condition": "(main_functionalities_active & crew_access)",
            "responseTextRange": [
                35,
                83
            ],
            "diagramVariables": "M = <b><i>NOMINALCREWMODE</i></b>, Response = <b><i>(main_functionalities_active & crew_access)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>NOMINALCREWMODE</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "NOMINALCREWMODE",
            "scope_mode_ft": "NOMINALCREWMODE",
            "scope_mode_pctl": "NOMINALCREWMODE",
            "post_condition_unexp_pt": "(main_functionalities_active & crew_access)",
            "post_condition_unexp_ft": "(main_functionalities_active & crew_access)",
            "post_condition_unexp_pctl": "(main_functionalities_active & crew_access)",
            "post_condition_SMV_pt": "(main_functionalities_active & crew_access)",
            "post_condition_SMV_ft": "(main_functionalities_active & crew_access)",
            "post_condition_PRISM_pctl": "(main_functionalities_active & crew_access)",
            "ft": "(LAST V (NOMINALCREWMODE -> (main_functionalities_active & crew_access)))",
            "pt": "(H (NOMINALCREWMODE -> (main_functionalities_active & crew_access)))",
            "pctl": "P>=1[((G ((! (Fin_NOMINALCREWMODE & (! LAST))) | (X (P>=1[(Lin_NOMINALCREWMODE R (main_functionalities_active & crew_access))])))) & (NOMINALCREWMODE => (Lin_NOMINALCREWMODE | (P>=1[(Lin_NOMINALCREWMODE R (main_functionalities_active & crew_access))]))))]",
            "ptExpanded": "(H (NOMINALCREWMODE -> (main_functionalities_active & crew_access)))",
            "CoCoSpecCode": "H((NOMINALCREWMODE => (main_functionalities_active and crew_access)))",
            "ftExpanded": "(LAST V (NOMINALCREWMODE -> (main_functionalities_active & crew_access)))",
            "pctlExpanded": "P>=1[((G ((! (((! NOMINALCREWMODE) & (X NOMINALCREWMODE)) & (! false))) | (X (P>=1[((NOMINALCREWMODE & (X (! NOMINALCREWMODE))) R (main_functionalities_active & crew_access))])))) & (NOMINALCREWMODE => ((NOMINALCREWMODE & (X (! NOMINALCREWMODE))) | (P>=1[((NOMINALCREWMODE & (X (! NOMINALCREWMODE))) R (main_functionalities_active & crew_access))]))))]",
            "ftInfAUExpanded": "(G (NOMINALCREWMODE -> (main_functionalities_active & crew_access)))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc3931-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R69-1",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The third phase is the capture (phys-\nical interception) phase in which the\nmanipulator physically captures the\ntarget satellite",
        "comments": "",
        "fulltext": "Upon MoveToPosition ServicingSatellite shall at the next timepoint satisfy ThirdPhase",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "MoveToPosition",
                "ThirdPhase"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(MoveToPosition)",
            "regular_condition": "(MoveToPosition)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "ServicingSatellite",
            "componentTextRange": [
                20,
                37
            ],
            "timingTextRange": [
                45,
                65
            ],
            "post_condition": "(ThirdPhase)",
            "responseTextRange": [
                67,
                84
            ],
            "diagramVariables": "TC = <b><i>(MoveToPosition)</i></b>, Response = <b><i>(ThirdPhase)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(MoveToPosition)</i></b> is true and any point in the interval where <b><i>(MoveToPosition)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "MoveToPosition",
            "regular_condition_unexp_ft": "MoveToPosition",
            "regular_condition_unexp_pctl": "MoveToPosition",
            "regular_condition_SMV_pt": "MoveToPosition",
            "regular_condition_SMV_ft": "MoveToPosition",
            "regular_condition_PRISM_pctl": "MoveToPosition",
            "post_condition_unexp_pt": "ThirdPhase",
            "post_condition_unexp_ft": "ThirdPhase",
            "post_condition_unexp_pctl": "ThirdPhase",
            "post_condition_SMV_pt": "ThirdPhase",
            "post_condition_SMV_ft": "ThirdPhase",
            "post_condition_PRISM_pctl": "ThirdPhase",
            "ft": "((LAST V (((! MoveToPosition) & ((! LAST) & (X MoveToPosition))) -> (X (LAST | (X ThirdPhase))))) & (MoveToPosition -> (LAST | (X ThirdPhase))))",
            "pt": "(H ((Y (MoveToPosition & (Z (! MoveToPosition)))) -> (ThirdPhase | (Z FALSE))))",
            "pctl": "P>=1[((G (((! MoveToPosition) & (X MoveToPosition)) => (X (P>=1[(LAST | (X ThirdPhase))])))) & (MoveToPosition => (P>=1[(LAST | (X ThirdPhase))])))]",
            "ptExpanded": "(H ((Y (MoveToPosition & (Z (! MoveToPosition)))) -> (ThirdPhase | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre((MoveToPosition and ZtoPre(not (MoveToPosition)))) => (ThirdPhase or ZtoPre(false))))",
            "ftExpanded": "((LAST V (((! MoveToPosition) & ((! LAST) & (X MoveToPosition))) -> (X (LAST | (X ThirdPhase))))) & (MoveToPosition -> (LAST | (X ThirdPhase))))",
            "pctlExpanded": "P>=1[((G (((! MoveToPosition) & (X MoveToPosition)) => (X (P>=1[(false | (X ThirdPhase))])))) & (MoveToPosition => (P>=1[(false | (X ThirdPhase))])))]",
            "ftInfAUExpanded": "((G (((! MoveToPosition) & (X MoveToPosition)) -> (X (X ThirdPhase)))) & (MoveToPosition -> (X ThirdPhase)))",
            "component": "ServicingSatellite"
        },
        "status": "",
        "_id": "eafc3932-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R50",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "After a sortie, Astrobee transfers\nlarge files through a hard-wired Eth-\nernet connection with its dock",
        "comments": "",
        "fulltext": "whenever ISSConnection & Ethernet & !LargeFile Astrobee shall until LargeFile satisfy Transfer",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "ISSConnection",
                "Ethernet",
                "LargeFile",
                "Transfer"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(ISSConnection & Ethernet & ! LargeFile)",
            "regular_condition": "(ISSConnection & Ethernet & ! LargeFile)",
            "conditionTextRange": [
                0,
                45
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                47,
                54
            ],
            "stop_condition": "(LargeFile)",
            "timingTextRange": [
                62,
                76
            ],
            "post_condition": "(Transfer)",
            "responseTextRange": [
                78,
                93
            ],
            "diagramVariables": "CC = <b><i>(ISSConnection & Ethernet & ! LargeFile)</i></b>, SC = <b><i>(LargeFile)</i></b>, Response = <b><i>(Transfer)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(ISSConnection & Ethernet & ! LargeFile)</i></b> is true.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "((ISSConnection & Ethernet) & (! LargeFile))",
            "regular_condition_unexp_ft": "((ISSConnection & Ethernet) & (! LargeFile))",
            "regular_condition_unexp_pctl": "((ISSConnection & Ethernet) & (! LargeFile))",
            "regular_condition_SMV_pt": "((ISSConnection & Ethernet) & (! LargeFile))",
            "regular_condition_SMV_ft": "((ISSConnection & Ethernet) & (! LargeFile))",
            "regular_condition_PRISM_pctl": "((ISSConnection & Ethernet) & (! LargeFile))",
            "post_condition_unexp_pt": "Transfer",
            "post_condition_unexp_ft": "Transfer",
            "post_condition_unexp_pctl": "Transfer",
            "post_condition_SMV_pt": "Transfer",
            "post_condition_SMV_ft": "Transfer",
            "post_condition_PRISM_pctl": "Transfer",
            "stop_condition_unexp_pt": "LargeFile",
            "stop_condition_unexp_ft": "LargeFile",
            "stop_condition_PRISM_pctl": "LargeFile",
            "stop_condition_SMV_pt": "LargeFile",
            "stop_condition_SMV_ft": "LargeFile",
            "ft": "(LAST V (((ISSConnection & Ethernet) & (! LargeFile)) -> ((LargeFile V (Transfer | LargeFile)) | (LAST V Transfer))))",
            "pt": "(H ((H (! ((ISSConnection & Ethernet) & (! LargeFile)))) | (((! LargeFile) S ((! LargeFile) & ((ISSConnection & Ethernet) & (! LargeFile)))) -> Transfer)))",
            "pctl": "P>=1[(G (((ISSConnection & Ethernet) & (! LargeFile)) => (P>=1[((undefined R (Transfer | undefined)) | (LAST R Transfer))])))]",
            "ptExpanded": "(H ((H (! ((ISSConnection & Ethernet) & (! LargeFile)))) | (((! LargeFile) S ((! LargeFile) & ((ISSConnection & Ethernet) & (! LargeFile)))) -> Transfer)))",
            "CoCoSpecCode": "H((H(not (((ISSConnection and Ethernet) and not (LargeFile)))) or (SI(((ISSConnection and Ethernet) and not (LargeFile)),not (LargeFile)) => Transfer)))",
            "ftExpanded": "(LAST V (((ISSConnection & Ethernet) & (! LargeFile)) -> ((LargeFile V (Transfer | LargeFile)) | (LAST V Transfer))))",
            "pctlExpanded": "P>=1[(G (((ISSConnection & Ethernet) & (! LargeFile)) => (P>=1[((LargeFile R (Transfer | LargeFile)) | (false R Transfer))])))]",
            "ftInfAUExpanded": "(G (((ISSConnection & Ethernet) & (! LargeFile)) -> (LargeFile V (Transfer | LargeFile))))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc3933-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R15",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Autonomously release the SEPM\nwhen the right jettison attitude is\nreached",
        "comments": "",
        "fulltext": "Upon Currentattitude <= Rightattitude ReleaseBepiColombo shall immediately satisfy release_SEPM",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "Currentattitude",
                "Rightattitude",
                "release_SEPM"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(Currentattitude <= Rightattitude)",
            "regular_condition": "(Currentattitude <= Rightattitude)",
            "conditionTextRange": [
                0,
                36
            ],
            "component_name": "ReleaseBepiColombo",
            "componentTextRange": [
                38,
                55
            ],
            "timingTextRange": [
                63,
                73
            ],
            "post_condition": "(release_SEPM)",
            "responseTextRange": [
                75,
                94
            ],
            "diagramVariables": "TC = <b><i>(Currentattitude <= Rightattitude)</i></b>, Response = <b><i>(release_SEPM)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(Currentattitude <= Rightattitude)</i></b> is true and any point in the interval where <b><i>(Currentattitude <= Rightattitude)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(Currentattitude <= Rightattitude)",
            "regular_condition_unexp_ft": "(Currentattitude <= Rightattitude)",
            "regular_condition_unexp_pctl": "(Currentattitude <= Rightattitude)",
            "regular_condition_SMV_pt": "(Currentattitude <= Rightattitude)",
            "regular_condition_SMV_ft": "(Currentattitude <= Rightattitude)",
            "regular_condition_PRISM_pctl": "(Currentattitude <= Rightattitude)",
            "post_condition_unexp_pt": "release_SEPM",
            "post_condition_unexp_ft": "release_SEPM",
            "post_condition_unexp_pctl": "release_SEPM",
            "post_condition_SMV_pt": "release_SEPM",
            "post_condition_SMV_ft": "release_SEPM",
            "post_condition_PRISM_pctl": "release_SEPM",
            "ft": "((LAST V (((! (Currentattitude <= Rightattitude)) & ((! LAST) & (X (Currentattitude <= Rightattitude)))) -> (X release_SEPM))) & ((Currentattitude <= Rightattitude) -> release_SEPM))",
            "pt": "(H (((Currentattitude <= Rightattitude) & (Z (! (Currentattitude <= Rightattitude)))) -> release_SEPM))",
            "pctl": "P>=1[((G (((! (Currentattitude <= Rightattitude)) & (X (Currentattitude <= Rightattitude))) => (X (P>=1[release_SEPM])))) & ((Currentattitude <= Rightattitude) => (P>=1[release_SEPM])))]",
            "ptExpanded": "(H (((Currentattitude <= Rightattitude) & (Z (! (Currentattitude <= Rightattitude)))) -> release_SEPM))",
            "CoCoSpecCode": "H((((Currentattitude <= Rightattitude) and ZtoPre(not ((Currentattitude <= Rightattitude)))) => release_SEPM))",
            "ftExpanded": "((LAST V (((! (Currentattitude <= Rightattitude)) & ((! LAST) & (X (Currentattitude <= Rightattitude)))) -> (X release_SEPM))) & ((Currentattitude <= Rightattitude) -> release_SEPM))",
            "pctlExpanded": "P>=1[((G (((! (Currentattitude <= Rightattitude)) & (X (Currentattitude <= Rightattitude))) => (X (P>=1[release_SEPM])))) & ((Currentattitude <= Rightattitude) => (P>=1[release_SEPM])))]",
            "ftInfAUExpanded": "((G (((! (Currentattitude <= Rightattitude)) & (X (Currentattitude <= Rightattitude))) -> (X release_SEPM))) & ((Currentattitude <= Rightattitude) -> release_SEPM))",
            "component": "ReleaseBepiColombo"
        },
        "status": "",
        "_id": "eafc3934-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R55",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "To enable undocking, linear actua-\ntors within the berths pull the mag-\nnets away from the striker plates,\nallowing the propulsion system to\neasily overcome the reduced mag-\nnetic force",
        "comments": "",
        "fulltext": "In UndockingMode DS shall at the next timepoint satisfy LinearActuators",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "UndockingMode",
                "LinearActuators"
            ],
            "scope_mode": "UndockingMode",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "DS",
            "componentTextRange": [
                17,
                18
            ],
            "timingTextRange": [
                26,
                46
            ],
            "post_condition": "(LinearActuators)",
            "responseTextRange": [
                48,
                70
            ],
            "diagramVariables": "M = <b><i>UndockingMode</i></b>, Response = <b><i>(LinearActuators)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>UndockingMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_next_satisfaction.svg",
            "scope_mode_pt": "UndockingMode",
            "scope_mode_ft": "UndockingMode",
            "scope_mode_pctl": "UndockingMode",
            "post_condition_unexp_pt": "LinearActuators",
            "post_condition_unexp_ft": "LinearActuators",
            "post_condition_unexp_pctl": "LinearActuators",
            "post_condition_SMV_pt": "LinearActuators",
            "post_condition_SMV_ft": "LinearActuators",
            "post_condition_PRISM_pctl": "LinearActuators",
            "ft": "((LAST V ((! (Fin_UndockingMode & (! LAST))) | (X ((Lin_UndockingMode | LAST) | ((X LinearActuators) & (! (Lin_UndockingMode | LAST))))))) & (UndockingMode -> ((Lin_UndockingMode | LAST) | ((X LinearActuators) & (! (Lin_UndockingMode | LAST))))))",
            "pt": "((H (Lin_UndockingMode -> (Y (((Y Fin_UndockingMode) -> LinearActuators) S (((Y Fin_UndockingMode) -> LinearActuators) & Fin_UndockingMode))))) & (((! Lin_UndockingMode) S ((! Lin_UndockingMode) & Fin_UndockingMode)) -> (((Y Fin_UndockingMode) -> LinearActuators) S (((Y Fin_UndockingMode) -> LinearActuators) & Fin_UndockingMode))))",
            "pctl": "P>=1[((G ((! (Fin_UndockingMode & (! LAST))) | (X (P>=1[(Lin_UndockingMode | ((X LinearActuators) & (! Lin_UndockingMode)))])))) & (UndockingMode => (Lin_UndockingMode | (P>=1[(Lin_UndockingMode | ((X LinearActuators) & (! Lin_UndockingMode)))]))))]",
            "ptExpanded": "((H (((! UndockingMode) & (Y UndockingMode)) -> (Y (((Y (UndockingMode & (Z (! UndockingMode)))) -> LinearActuators) S (((Y (UndockingMode & (Z (! UndockingMode)))) -> LinearActuators) & (UndockingMode & (Z (! UndockingMode)))))))) & (((! ((! UndockingMode) & (Y UndockingMode))) S ((! ((! UndockingMode) & (Y UndockingMode))) & (UndockingMode & (Z (! UndockingMode))))) -> (((Y (UndockingMode & (Z (! UndockingMode)))) -> LinearActuators) S (((Y (UndockingMode & (Z (! UndockingMode)))) -> LinearActuators) & (UndockingMode & (Z (! UndockingMode)))))))",
            "CoCoSpecCode": "(H(((not (UndockingMode) and YtoPre(UndockingMode)) => YtoPre(SI((UndockingMode and ZtoPre(not (UndockingMode))),(YtoPre((UndockingMode and ZtoPre(not (UndockingMode)))) => LinearActuators))))) and (SI((UndockingMode and ZtoPre(not (UndockingMode))),not ((not (UndockingMode) and YtoPre(UndockingMode)))) => SI((UndockingMode and ZtoPre(not (UndockingMode))),(YtoPre((UndockingMode and ZtoPre(not (UndockingMode)))) => LinearActuators))))",
            "ftExpanded": "((LAST V ((! ((((! UndockingMode) & (! LAST)) & (X UndockingMode)) & (! LAST))) | (X ((((UndockingMode & (! LAST)) & (X (! UndockingMode))) | LAST) | ((X LinearActuators) & (! (((UndockingMode & (! LAST)) & (X (! UndockingMode))) | LAST))))))) & (UndockingMode -> ((((UndockingMode & (! LAST)) & (X (! UndockingMode))) | LAST) | ((X LinearActuators) & (! (((UndockingMode & (! LAST)) & (X (! UndockingMode))) | LAST))))))",
            "pctlExpanded": "P>=1[((G ((! (((! UndockingMode) & (X UndockingMode)) & (! false))) | (X (P>=1[((UndockingMode & (X (! UndockingMode))) | ((X LinearActuators) & (! (UndockingMode & (X (! UndockingMode))))))])))) & (UndockingMode => ((UndockingMode & (X (! UndockingMode))) | (P>=1[((UndockingMode & (X (! UndockingMode))) | ((X LinearActuators) & (! (UndockingMode & (X (! UndockingMode))))))]))))]",
            "ftInfAUExpanded": "((G ((! ((! UndockingMode) & (X UndockingMode))) | (X ((UndockingMode & (X (! UndockingMode))) | ((X LinearActuators) & (! (UndockingMode & (X (! UndockingMode))))))))) & (UndockingMode -> ((UndockingMode & (X (! UndockingMode))) | ((X LinearActuators) & (! (UndockingMode & (X (! UndockingMode))))))))",
            "component": "DS"
        },
        "status": "",
        "_id": "eafc3935-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R77-B",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "if the vSLAM output remains un-\navailable for an extended period",
        "comments": "",
        "fulltext": "Whenever vSLAMOutput=0 & TimePassed <= ExtendedPeriod IntBall2 shall at the next timepoint satisfy vSLAMUnavailable",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "vSLAMOutput",
                "TimePassed",
                "ExtendedPeriod",
                "vSLAMUnavailable"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(vSLAMOutput = 0 & TimePassed <= ExtendedPeriod)",
            "regular_condition": "(vSLAMOutput = 0 & TimePassed <= ExtendedPeriod)",
            "conditionTextRange": [
                0,
                52
            ],
            "component_name": "IntBall2",
            "componentTextRange": [
                54,
                61
            ],
            "timingTextRange": [
                69,
                89
            ],
            "post_condition": "(vSLAMUnavailable)",
            "responseTextRange": [
                91,
                114
            ],
            "diagramVariables": "CC = <b><i>(vSLAMOutput = 0 & TimePassed <= ExtendedPeriod)</i></b>, Response = <b><i>(vSLAMUnavailable)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(vSLAMOutput = 0 & TimePassed <= ExtendedPeriod)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "((vSLAMOutput = 0) & (TimePassed <= ExtendedPeriod))",
            "regular_condition_unexp_ft": "((vSLAMOutput = 0) & (TimePassed <= ExtendedPeriod))",
            "regular_condition_unexp_pctl": "((vSLAMOutput = 0) & (TimePassed <= ExtendedPeriod))",
            "regular_condition_SMV_pt": "((vSLAMOutput = 0) & (TimePassed <= ExtendedPeriod))",
            "regular_condition_SMV_ft": "((vSLAMOutput = 0) & (TimePassed <= ExtendedPeriod))",
            "regular_condition_PRISM_pctl": "((vSLAMOutput = 0) & (TimePassed <= ExtendedPeriod))",
            "post_condition_unexp_pt": "vSLAMUnavailable",
            "post_condition_unexp_ft": "vSLAMUnavailable",
            "post_condition_unexp_pctl": "vSLAMUnavailable",
            "post_condition_SMV_pt": "vSLAMUnavailable",
            "post_condition_SMV_ft": "vSLAMUnavailable",
            "post_condition_PRISM_pctl": "vSLAMUnavailable",
            "ft": "(LAST V (((vSLAMOutput = 0) & (TimePassed <= ExtendedPeriod)) -> (LAST | (X vSLAMUnavailable))))",
            "pt": "(H ((Y ((vSLAMOutput = 0) & (TimePassed <= ExtendedPeriod))) -> (vSLAMUnavailable | (Z FALSE))))",
            "pctl": "P>=1[(G (((vSLAMOutput = 0) & (TimePassed <= ExtendedPeriod)) => (P>=1[(LAST | (X vSLAMUnavailable))])))]",
            "ptExpanded": "(H ((Y ((vSLAMOutput = 0) & (TimePassed <= ExtendedPeriod))) -> (vSLAMUnavailable | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre(((vSLAMOutput = 0) and (TimePassed <= ExtendedPeriod))) => (vSLAMUnavailable or ZtoPre(false))))",
            "ftExpanded": "(LAST V (((vSLAMOutput = 0) & (TimePassed <= ExtendedPeriod)) -> (LAST | (X vSLAMUnavailable))))",
            "pctlExpanded": "P>=1[(G (((vSLAMOutput = 0) & (TimePassed <= ExtendedPeriod)) => (P>=1[(false | (X vSLAMUnavailable))])))]",
            "ftInfAUExpanded": "(G (((vSLAMOutput = 0) & (TimePassed <= ExtendedPeriod)) -> (X vSLAMUnavailable)))",
            "component": "IntBall2"
        },
        "status": "",
        "_id": "eafc3936-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R38",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "We also require that the rear pro-\npeller be always used, except in HC\nmode",
        "comments": "",
        "fulltext": "If not in HCMode LPC shall always satisfy RearPropeller",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "notin"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "HCMode",
                "RearPropeller"
            ],
            "scope_mode": "HCMode",
            "scopeTextRange": [
                0,
                15
            ],
            "component_name": "LPC",
            "componentTextRange": [
                17,
                19
            ],
            "timingTextRange": [
                27,
                32
            ],
            "post_condition": "(RearPropeller)",
            "responseTextRange": [
                34,
                54
            ],
            "diagramVariables": "M = <b><i>HCMode</i></b>, Response = <b><i>(RearPropeller)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>HCMode</i></b> does NOT hold.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/notin_null_always_satisfaction.svg",
            "scope_mode_pt": "HCMode",
            "scope_mode_ft": "HCMode",
            "scope_mode_pctl": "HCMode",
            "post_condition_unexp_pt": "RearPropeller",
            "post_condition_unexp_ft": "RearPropeller",
            "post_condition_unexp_pctl": "RearPropeller",
            "post_condition_SMV_pt": "RearPropeller",
            "post_condition_SMV_ft": "RearPropeller",
            "post_condition_PRISM_pctl": "RearPropeller",
            "ft": "(LAST V ((! HCMode) -> RearPropeller))",
            "pt": "(H ((! HCMode) -> RearPropeller))",
            "pctl": "P>=1[((G ((! (FNin_HCMode & (! LAST))) | (X (P>=1[(LNin_HCMode R RearPropeller)])))) & ((! HCMode) => (LNin_HCMode | (P>=1[(LNin_HCMode R RearPropeller)]))))]",
            "ptExpanded": "(H ((! HCMode) -> RearPropeller))",
            "CoCoSpecCode": "H((not (HCMode) => RearPropeller))",
            "ftExpanded": "(LAST V ((! HCMode) -> RearPropeller))",
            "pctlExpanded": "P>=1[((G ((! ((HCMode & (X (! HCMode))) & (! false))) | (X (P>=1[(((! HCMode) & (X HCMode)) R RearPropeller)])))) & ((! HCMode) => (((! HCMode) & (X HCMode)) | (P>=1[(((! HCMode) & (X HCMode)) R RearPropeller)]))))]",
            "ftInfAUExpanded": "(G ((! HCMode) -> RearPropeller))",
            "component": "LPC"
        },
        "status": "",
        "_id": "eafc3937-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R13-A",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "During the Launch Phase the\nonly mode of operation in use is\nSTANDBY mode which should be\ndone when the IM is in a stowed\nconfiguration",
        "comments": "",
        "fulltext": "In LAUNCHPHASE whenever stowed IM shall eventually satisfy STANDBYMODE",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "LAUNCHPHASE",
                "stowed",
                "STANDBYMODE"
            ],
            "scope_mode": "LAUNCHPHASE",
            "scopeTextRange": [
                0,
                13
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(stowed)",
            "regular_condition": "(stowed)",
            "conditionTextRange": [
                15,
                29
            ],
            "component_name": "IM",
            "componentTextRange": [
                31,
                32
            ],
            "timingTextRange": [
                40,
                49
            ],
            "post_condition": "(STANDBYMODE)",
            "responseTextRange": [
                51,
                69
            ],
            "diagramVariables": "M = <b><i>LAUNCHPHASE</i></b>, CC = <b><i>(stowed)</i></b>, Response = <b><i>(STANDBYMODE)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>LAUNCHPHASE</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(stowed)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "LAUNCHPHASE",
            "scope_mode_ft": "LAUNCHPHASE",
            "scope_mode_pctl": "LAUNCHPHASE",
            "regular_condition_unexp_pt": "stowed",
            "regular_condition_unexp_ft": "stowed",
            "regular_condition_unexp_pctl": "stowed",
            "regular_condition_SMV_pt": "stowed",
            "regular_condition_SMV_ft": "stowed",
            "regular_condition_PRISM_pctl": "stowed",
            "post_condition_unexp_pt": "STANDBYMODE",
            "post_condition_unexp_ft": "STANDBYMODE",
            "post_condition_unexp_pctl": "STANDBYMODE",
            "post_condition_SMV_pt": "STANDBYMODE",
            "post_condition_SMV_ft": "STANDBYMODE",
            "post_condition_PRISM_pctl": "STANDBYMODE",
            "ft": "((LAST V ((! (Fin_LAUNCHPHASE & (! LAST))) | (X ((Lin_LAUNCHPHASE | LAST) V (stowed -> ((! (Lin_LAUNCHPHASE | LAST)) U STANDBYMODE)))))) & (LAUNCHPHASE -> ((Lin_LAUNCHPHASE | LAST) V (stowed -> ((! (Lin_LAUNCHPHASE | LAST)) U STANDBYMODE)))))",
            "pt": "((H (Lin_LAUNCHPHASE -> (Y (((! stowed) S ((! stowed) & Fin_LAUNCHPHASE)) | (! ((! STANDBYMODE) S ((! STANDBYMODE) & stowed))))))) & (((! Lin_LAUNCHPHASE) S ((! Lin_LAUNCHPHASE) & Fin_LAUNCHPHASE)) -> (((! stowed) S ((! stowed) & Fin_LAUNCHPHASE)) | (! ((! STANDBYMODE) S ((! STANDBYMODE) & stowed))))))",
            "pctl": "P>=1[((G ((! (Fin_LAUNCHPHASE & (! LAST))) | (X (Lin_LAUNCHPHASE R (stowed => (P>=1[((! Lin_LAUNCHPHASE) U STANDBYMODE)])))))) & (LAUNCHPHASE => (Lin_LAUNCHPHASE | (Lin_LAUNCHPHASE R (stowed => (P>=1[((! Lin_LAUNCHPHASE) U STANDBYMODE)]))))))]",
            "ptExpanded": "((H (((! LAUNCHPHASE) & (Y LAUNCHPHASE)) -> (Y (((! stowed) S ((! stowed) & (LAUNCHPHASE & (Z (! LAUNCHPHASE))))) | (! ((! STANDBYMODE) S ((! STANDBYMODE) & stowed))))))) & (((! ((! LAUNCHPHASE) & (Y LAUNCHPHASE))) S ((! ((! LAUNCHPHASE) & (Y LAUNCHPHASE))) & (LAUNCHPHASE & (Z (! LAUNCHPHASE))))) -> (((! stowed) S ((! stowed) & (LAUNCHPHASE & (Z (! LAUNCHPHASE))))) | (! ((! STANDBYMODE) S ((! STANDBYMODE) & stowed))))))",
            "CoCoSpecCode": "(H(((not (LAUNCHPHASE) and YtoPre(LAUNCHPHASE)) => YtoPre((SI((LAUNCHPHASE and ZtoPre(not (LAUNCHPHASE))),not (stowed)) or not (SI(stowed,not (STANDBYMODE))))))) and (SI((LAUNCHPHASE and ZtoPre(not (LAUNCHPHASE))),not ((not (LAUNCHPHASE) and YtoPre(LAUNCHPHASE)))) => (SI((LAUNCHPHASE and ZtoPre(not (LAUNCHPHASE))),not (stowed)) or not (SI(stowed,not (STANDBYMODE))))))",
            "ftExpanded": "((LAST V ((! ((((! LAUNCHPHASE) & (! LAST)) & (X LAUNCHPHASE)) & (! LAST))) | (X ((((LAUNCHPHASE & (! LAST)) & (X (! LAUNCHPHASE))) | LAST) V (stowed -> ((! (((LAUNCHPHASE & (! LAST)) & (X (! LAUNCHPHASE))) | LAST)) U STANDBYMODE)))))) & (LAUNCHPHASE -> ((((LAUNCHPHASE & (! LAST)) & (X (! LAUNCHPHASE))) | LAST) V (stowed -> ((! (((LAUNCHPHASE & (! LAST)) & (X (! LAUNCHPHASE))) | LAST)) U STANDBYMODE)))))",
            "pctlExpanded": "P>=1[((G ((! (((! LAUNCHPHASE) & (X LAUNCHPHASE)) & (! false))) | (X ((LAUNCHPHASE & (X (! LAUNCHPHASE))) R (stowed => (P>=1[((! (LAUNCHPHASE & (X (! LAUNCHPHASE)))) U STANDBYMODE)])))))) & (LAUNCHPHASE => ((LAUNCHPHASE & (X (! LAUNCHPHASE))) | ((LAUNCHPHASE & (X (! LAUNCHPHASE))) R (stowed => (P>=1[((! (LAUNCHPHASE & (X (! LAUNCHPHASE)))) U STANDBYMODE)]))))))]",
            "ftInfAUExpanded": "((G ((! ((! LAUNCHPHASE) & (X LAUNCHPHASE))) | (X ((LAUNCHPHASE & (X (! LAUNCHPHASE))) V (stowed -> ((! (LAUNCHPHASE & (X (! LAUNCHPHASE)))) U STANDBYMODE)))))) & (LAUNCHPHASE -> ((LAUNCHPHASE & (X (! LAUNCHPHASE))) V (stowed -> ((! (LAUNCHPHASE & (X (! LAUNCHPHASE)))) U STANDBYMODE)))))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc3938-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R26",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "if three Shuttle main engines fail se-\nquentially or simultaneously begin\ncalculating/commanding safe abort\nmanoeuvres.",
        "comments": "",
        "fulltext": "Upon ThreeEngineFailure ThreeE_O shall immediately satisfy CalculatePlan & SafeManoeuvres",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "ThreeEngineFailure",
                "CalculatePlan",
                "SafeManoeuvres"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ThreeEngineFailure)",
            "regular_condition": "(ThreeEngineFailure)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "ThreeE_O",
            "componentTextRange": [
                24,
                31
            ],
            "timingTextRange": [
                39,
                49
            ],
            "post_condition": "(CalculatePlan & SafeManoeuvres)",
            "responseTextRange": [
                51,
                88
            ],
            "diagramVariables": "TC = <b><i>(ThreeEngineFailure)</i></b>, Response = <b><i>(CalculatePlan & SafeManoeuvres)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ThreeEngineFailure)</i></b> is true and any point in the interval where <b><i>(ThreeEngineFailure)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ThreeEngineFailure",
            "regular_condition_unexp_ft": "ThreeEngineFailure",
            "regular_condition_unexp_pctl": "ThreeEngineFailure",
            "regular_condition_SMV_pt": "ThreeEngineFailure",
            "regular_condition_SMV_ft": "ThreeEngineFailure",
            "regular_condition_PRISM_pctl": "ThreeEngineFailure",
            "post_condition_unexp_pt": "(CalculatePlan & SafeManoeuvres)",
            "post_condition_unexp_ft": "(CalculatePlan & SafeManoeuvres)",
            "post_condition_unexp_pctl": "(CalculatePlan & SafeManoeuvres)",
            "post_condition_SMV_pt": "(CalculatePlan & SafeManoeuvres)",
            "post_condition_SMV_ft": "(CalculatePlan & SafeManoeuvres)",
            "post_condition_PRISM_pctl": "(CalculatePlan & SafeManoeuvres)",
            "ft": "((LAST V (((! ThreeEngineFailure) & ((! LAST) & (X ThreeEngineFailure))) -> (X (CalculatePlan & SafeManoeuvres)))) & (ThreeEngineFailure -> (CalculatePlan & SafeManoeuvres)))",
            "pt": "(H ((ThreeEngineFailure & (Z (! ThreeEngineFailure))) -> (CalculatePlan & SafeManoeuvres)))",
            "pctl": "P>=1[((G (((! ThreeEngineFailure) & (X ThreeEngineFailure)) => (X (P>=1[(CalculatePlan & SafeManoeuvres)])))) & (ThreeEngineFailure => (P>=1[(CalculatePlan & SafeManoeuvres)])))]",
            "ptExpanded": "(H ((ThreeEngineFailure & (Z (! ThreeEngineFailure))) -> (CalculatePlan & SafeManoeuvres)))",
            "CoCoSpecCode": "H(((ThreeEngineFailure and ZtoPre(not (ThreeEngineFailure))) => (CalculatePlan and SafeManoeuvres)))",
            "ftExpanded": "((LAST V (((! ThreeEngineFailure) & ((! LAST) & (X ThreeEngineFailure))) -> (X (CalculatePlan & SafeManoeuvres)))) & (ThreeEngineFailure -> (CalculatePlan & SafeManoeuvres)))",
            "pctlExpanded": "P>=1[((G (((! ThreeEngineFailure) & (X ThreeEngineFailure)) => (X (P>=1[(CalculatePlan & SafeManoeuvres)])))) & (ThreeEngineFailure => (P>=1[(CalculatePlan & SafeManoeuvres)])))]",
            "ftInfAUExpanded": "((G (((! ThreeEngineFailure) & (X ThreeEngineFailure)) -> (X (CalculatePlan & SafeManoeuvres)))) & (ThreeEngineFailure -> (CalculatePlan & SafeManoeuvres)))",
            "component": "ThreeE_O"
        },
        "status": "",
        "_id": "eafc3939-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R16",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Autonomously release MMO when\nthe polar orbit is reached",
        "comments": "",
        "fulltext": "Upon polar_orbit_reached BepiColombo shall immediately satisfy release_MMO",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "polar_orbit_reached",
                "release_MMO"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(polar_orbit_reached)",
            "regular_condition": "(polar_orbit_reached)",
            "conditionTextRange": [
                0,
                23
            ],
            "component_name": "BepiColombo",
            "componentTextRange": [
                25,
                35
            ],
            "timingTextRange": [
                43,
                53
            ],
            "post_condition": "(release_MMO)",
            "responseTextRange": [
                55,
                73
            ],
            "diagramVariables": "TC = <b><i>(polar_orbit_reached)</i></b>, Response = <b><i>(release_MMO)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(polar_orbit_reached)</i></b> is true and any point in the interval where <b><i>(polar_orbit_reached)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "polar_orbit_reached",
            "regular_condition_unexp_ft": "polar_orbit_reached",
            "regular_condition_unexp_pctl": "polar_orbit_reached",
            "regular_condition_SMV_pt": "polar_orbit_reached",
            "regular_condition_SMV_ft": "polar_orbit_reached",
            "regular_condition_PRISM_pctl": "polar_orbit_reached",
            "post_condition_unexp_pt": "release_MMO",
            "post_condition_unexp_ft": "release_MMO",
            "post_condition_unexp_pctl": "release_MMO",
            "post_condition_SMV_pt": "release_MMO",
            "post_condition_SMV_ft": "release_MMO",
            "post_condition_PRISM_pctl": "release_MMO",
            "ft": "((LAST V (((! polar_orbit_reached) & ((! LAST) & (X polar_orbit_reached))) -> (X release_MMO))) & (polar_orbit_reached -> release_MMO))",
            "pt": "(H ((polar_orbit_reached & (Z (! polar_orbit_reached))) -> release_MMO))",
            "pctl": "P>=1[((G (((! polar_orbit_reached) & (X polar_orbit_reached)) => (X (P>=1[release_MMO])))) & (polar_orbit_reached => (P>=1[release_MMO])))]",
            "ptExpanded": "(H ((polar_orbit_reached & (Z (! polar_orbit_reached))) -> release_MMO))",
            "CoCoSpecCode": "H(((polar_orbit_reached and ZtoPre(not (polar_orbit_reached))) => release_MMO))",
            "ftExpanded": "((LAST V (((! polar_orbit_reached) & ((! LAST) & (X polar_orbit_reached))) -> (X release_MMO))) & (polar_orbit_reached -> release_MMO))",
            "pctlExpanded": "P>=1[((G (((! polar_orbit_reached) & (X polar_orbit_reached)) => (X (P>=1[release_MMO])))) & (polar_orbit_reached => (P>=1[release_MMO])))]",
            "ftInfAUExpanded": "((G (((! polar_orbit_reached) & (X polar_orbit_reached)) -> (X release_MMO))) & (polar_orbit_reached -> release_MMO))",
            "component": "BepiColombo"
        },
        "status": "",
        "_id": "eafc393a-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R61-B2",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The Control Station prevents oper-\nators from sending plans that trans-\nlate through a KOZ to Astrobee un-\ntil the violating segments are modi-\nfied",
        "comments": "",
        "fulltext": "ControlStation shall eventually satisfy !KOZPlan",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "KOZPlan"
            ],
            "component_name": "ControlStation",
            "componentTextRange": [
                0,
                13
            ],
            "timingTextRange": [
                21,
                30
            ],
            "post_condition": "(! KOZPlan)",
            "responseTextRange": [
                32,
                47
            ],
            "diagramVariables": "Response = <b><i>(! KOZPlan)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(! KOZPlan)",
            "post_condition_unexp_ft": "(! KOZPlan)",
            "post_condition_unexp_pctl": "(! KOZPlan)",
            "post_condition_SMV_pt": "(! KOZPlan)",
            "post_condition_SMV_ft": "(! KOZPlan)",
            "post_condition_PRISM_pctl": "(! KOZPlan)",
            "ft": "((! LAST) U (! KOZPlan))",
            "pt": "(O (! KOZPlan))",
            "pctl": "(P>=1[(F (! KOZPlan))])",
            "ptExpanded": "(O (! KOZPlan))",
            "CoCoSpecCode": "O(not (KOZPlan))",
            "ftExpanded": "((! LAST) U (! KOZPlan))",
            "pctlExpanded": "(P>=1[(F (! KOZPlan))])",
            "ftInfAUExpanded": "(F (! KOZPlan))",
            "component": "ControlStation"
        },
        "status": "",
        "_id": "eafc393b-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R51",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Once Astrobee grasps a handrail, it\npowers down its propulsion system.",
        "comments": "",
        "fulltext": "Upon Perched Astrobee shall at the next timepoint satisfy !PropulsionSystem",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "Perched",
                "PropulsionSystem"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(Perched)",
            "regular_condition": "(Perched)",
            "conditionTextRange": [
                0,
                11
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                13,
                20
            ],
            "timingTextRange": [
                28,
                48
            ],
            "post_condition": "(! PropulsionSystem)",
            "responseTextRange": [
                50,
                74
            ],
            "diagramVariables": "TC = <b><i>(Perched)</i></b>, Response = <b><i>(! PropulsionSystem)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(Perched)</i></b> is true and any point in the interval where <b><i>(Perched)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "Perched",
            "regular_condition_unexp_ft": "Perched",
            "regular_condition_unexp_pctl": "Perched",
            "regular_condition_SMV_pt": "Perched",
            "regular_condition_SMV_ft": "Perched",
            "regular_condition_PRISM_pctl": "Perched",
            "post_condition_unexp_pt": "(! PropulsionSystem)",
            "post_condition_unexp_ft": "(! PropulsionSystem)",
            "post_condition_unexp_pctl": "(! PropulsionSystem)",
            "post_condition_SMV_pt": "(! PropulsionSystem)",
            "post_condition_SMV_ft": "(! PropulsionSystem)",
            "post_condition_PRISM_pctl": "(! PropulsionSystem)",
            "ft": "((LAST V (((! Perched) & ((! LAST) & (X Perched))) -> (X (LAST | (X (! PropulsionSystem)))))) & (Perched -> (LAST | (X (! PropulsionSystem)))))",
            "pt": "(H ((Y (Perched & (Z (! Perched)))) -> ((! PropulsionSystem) | (Z FALSE))))",
            "pctl": "P>=1[((G (((! Perched) & (X Perched)) => (X (P>=1[(LAST | (X (! PropulsionSystem)))])))) & (Perched => (P>=1[(LAST | (X (! PropulsionSystem)))])))]",
            "ptExpanded": "(H ((Y (Perched & (Z (! Perched)))) -> ((! PropulsionSystem) | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre((Perched and ZtoPre(not (Perched)))) => (not (PropulsionSystem) or ZtoPre(false))))",
            "ftExpanded": "((LAST V (((! Perched) & ((! LAST) & (X Perched))) -> (X (LAST | (X (! PropulsionSystem)))))) & (Perched -> (LAST | (X (! PropulsionSystem)))))",
            "pctlExpanded": "P>=1[((G (((! Perched) & (X Perched)) => (X (P>=1[(false | (X (! PropulsionSystem)))])))) & (Perched => (P>=1[(false | (X (! PropulsionSystem)))])))]",
            "ftInfAUExpanded": "((G (((! Perched) & (X Perched)) -> (X (X (! PropulsionSystem))))) & (Perched -> (X (! PropulsionSystem))))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc393c-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R56",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "If multiple Astrobees are active, the\nControl Station displays the posi-\ntions of all of the Astrobees so that\nthe operators are aware of the other\nactivities and can avoid collisions.",
        "comments": "",
        "fulltext": "Whenever numberofAtrobees > 1 CS shall immediately satisfy DisplayALL",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "numberofAtrobees",
                "DisplayALL"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(numberofAtrobees > 1)",
            "regular_condition": "(numberofAtrobees > 1)",
            "conditionTextRange": [
                0,
                28
            ],
            "component_name": "CS",
            "componentTextRange": [
                30,
                31
            ],
            "timingTextRange": [
                39,
                49
            ],
            "post_condition": "(DisplayALL)",
            "responseTextRange": [
                51,
                68
            ],
            "diagramVariables": "CC = <b><i>(numberofAtrobees > 1)</i></b>, Response = <b><i>(DisplayALL)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(numberofAtrobees > 1)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(numberofAtrobees > 1)",
            "regular_condition_unexp_ft": "(numberofAtrobees > 1)",
            "regular_condition_unexp_pctl": "(numberofAtrobees > 1)",
            "regular_condition_SMV_pt": "(numberofAtrobees > 1)",
            "regular_condition_SMV_ft": "(numberofAtrobees > 1)",
            "regular_condition_PRISM_pctl": "(numberofAtrobees > 1)",
            "post_condition_unexp_pt": "DisplayALL",
            "post_condition_unexp_ft": "DisplayALL",
            "post_condition_unexp_pctl": "DisplayALL",
            "post_condition_SMV_pt": "DisplayALL",
            "post_condition_SMV_ft": "DisplayALL",
            "post_condition_PRISM_pctl": "DisplayALL",
            "ft": "(LAST V ((numberofAtrobees > 1) -> DisplayALL))",
            "pt": "(H ((numberofAtrobees > 1) -> DisplayALL))",
            "pctl": "P>=1[(G ((numberofAtrobees > 1) => (P>=1[DisplayALL])))]",
            "ptExpanded": "(H ((numberofAtrobees > 1) -> DisplayALL))",
            "CoCoSpecCode": "H(((numberofAtrobees > 1) => DisplayALL))",
            "ftExpanded": "(LAST V ((numberofAtrobees > 1) -> DisplayALL))",
            "pctlExpanded": "P>=1[(G ((numberofAtrobees > 1) => (P>=1[DisplayALL])))]",
            "ftInfAUExpanded": "(G ((numberofAtrobees > 1) -> DisplayALL))",
            "component": "CS"
        },
        "status": "",
        "_id": "eafc393d-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R78",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Furthermore, when the Int-Ball2\nautomatically detects that the re-\nmaining battery power is low, it re-\nturns to the DS for recharging",
        "comments": "",
        "fulltext": "Whenever IntBall2Power <= SafeBattery IntBall2 shall at the next timepoint satisfy RechargeMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "IntBall2Power",
                "SafeBattery",
                "RechargeMode"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(IntBall2Power <= SafeBattery)",
            "regular_condition": "(IntBall2Power <= SafeBattery)",
            "conditionTextRange": [
                0,
                36
            ],
            "component_name": "IntBall2",
            "componentTextRange": [
                38,
                45
            ],
            "timingTextRange": [
                53,
                73
            ],
            "post_condition": "(RechargeMode)",
            "responseTextRange": [
                75,
                94
            ],
            "diagramVariables": "CC = <b><i>(IntBall2Power <= SafeBattery)</i></b>, Response = <b><i>(RechargeMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(IntBall2Power <= SafeBattery)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(IntBall2Power <= SafeBattery)",
            "regular_condition_unexp_ft": "(IntBall2Power <= SafeBattery)",
            "regular_condition_unexp_pctl": "(IntBall2Power <= SafeBattery)",
            "regular_condition_SMV_pt": "(IntBall2Power <= SafeBattery)",
            "regular_condition_SMV_ft": "(IntBall2Power <= SafeBattery)",
            "regular_condition_PRISM_pctl": "(IntBall2Power <= SafeBattery)",
            "post_condition_unexp_pt": "RechargeMode",
            "post_condition_unexp_ft": "RechargeMode",
            "post_condition_unexp_pctl": "RechargeMode",
            "post_condition_SMV_pt": "RechargeMode",
            "post_condition_SMV_ft": "RechargeMode",
            "post_condition_PRISM_pctl": "RechargeMode",
            "ft": "(LAST V ((IntBall2Power <= SafeBattery) -> (LAST | (X RechargeMode))))",
            "pt": "(H ((Y (IntBall2Power <= SafeBattery)) -> (RechargeMode | (Z FALSE))))",
            "pctl": "P>=1[(G ((IntBall2Power <= SafeBattery) => (P>=1[(LAST | (X RechargeMode))])))]",
            "ptExpanded": "(H ((Y (IntBall2Power <= SafeBattery)) -> (RechargeMode | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre((IntBall2Power <= SafeBattery)) => (RechargeMode or ZtoPre(false))))",
            "ftExpanded": "(LAST V ((IntBall2Power <= SafeBattery) -> (LAST | (X RechargeMode))))",
            "pctlExpanded": "P>=1[(G ((IntBall2Power <= SafeBattery) => (P>=1[(false | (X RechargeMode))])))]",
            "ftInfAUExpanded": "(G ((IntBall2Power <= SafeBattery) -> (X RechargeMode)))",
            "component": "IntBall2"
        },
        "status": "",
        "_id": "eafc393e-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R27",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "If it is required to know the state of\nthe spacecraft, even during the sec-\ntion of the orbit without a commu-\nnication link with ground segment,\nstore telemetry data.",
        "comments": "",
        "fulltext": "If StateRequired & !CommunitcationLink CubeSat shall immediately satisfy StoreData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "StateRequired",
                "CommunitcationLink",
                "StoreData"
            ],
            "qualifier_word": "if",
            "pre_condition": "(StateRequired & ! CommunitcationLink)",
            "regular_condition": "(StateRequired & ! CommunitcationLink)",
            "conditionTextRange": [
                0,
                37
            ],
            "component_name": "CubeSat",
            "componentTextRange": [
                39,
                45
            ],
            "timingTextRange": [
                53,
                63
            ],
            "post_condition": "(StoreData)",
            "responseTextRange": [
                65,
                81
            ],
            "diagramVariables": "TC = <b><i>(StateRequired & ! CommunitcationLink)</i></b>, Response = <b><i>(StoreData)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(StateRequired & ! CommunitcationLink)</i></b> is true and any point in the interval where <b><i>(StateRequired & ! CommunitcationLink)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(StateRequired & (! CommunitcationLink))",
            "regular_condition_unexp_ft": "(StateRequired & (! CommunitcationLink))",
            "regular_condition_unexp_pctl": "(StateRequired & (! CommunitcationLink))",
            "regular_condition_SMV_pt": "(StateRequired & (! CommunitcationLink))",
            "regular_condition_SMV_ft": "(StateRequired & (! CommunitcationLink))",
            "regular_condition_PRISM_pctl": "(StateRequired & (! CommunitcationLink))",
            "post_condition_unexp_pt": "StoreData",
            "post_condition_unexp_ft": "StoreData",
            "post_condition_unexp_pctl": "StoreData",
            "post_condition_SMV_pt": "StoreData",
            "post_condition_SMV_ft": "StoreData",
            "post_condition_PRISM_pctl": "StoreData",
            "ft": "((LAST V (((! (StateRequired & (! CommunitcationLink))) & ((! LAST) & (X (StateRequired & (! CommunitcationLink))))) -> (X StoreData))) & ((StateRequired & (! CommunitcationLink)) -> StoreData))",
            "pt": "(H (((StateRequired & (! CommunitcationLink)) & (Z (! (StateRequired & (! CommunitcationLink))))) -> StoreData))",
            "pctl": "P>=1[((G (((! (StateRequired & (! CommunitcationLink))) & (X (StateRequired & (! CommunitcationLink)))) => (X (P>=1[StoreData])))) & ((StateRequired & (! CommunitcationLink)) => (P>=1[StoreData])))]",
            "ptExpanded": "(H (((StateRequired & (! CommunitcationLink)) & (Z (! (StateRequired & (! CommunitcationLink))))) -> StoreData))",
            "CoCoSpecCode": "H((((StateRequired and not (CommunitcationLink)) and ZtoPre(not ((StateRequired and not (CommunitcationLink))))) => StoreData))",
            "ftExpanded": "((LAST V (((! (StateRequired & (! CommunitcationLink))) & ((! LAST) & (X (StateRequired & (! CommunitcationLink))))) -> (X StoreData))) & ((StateRequired & (! CommunitcationLink)) -> StoreData))",
            "pctlExpanded": "P>=1[((G (((! (StateRequired & (! CommunitcationLink))) & (X (StateRequired & (! CommunitcationLink)))) => (X (P>=1[StoreData])))) & ((StateRequired & (! CommunitcationLink)) => (P>=1[StoreData])))]",
            "ftInfAUExpanded": "((G (((! (StateRequired & (! CommunitcationLink))) & (X (StateRequired & (! CommunitcationLink)))) -> (X StoreData))) & ((StateRequired & (! CommunitcationLink)) -> StoreData))",
            "component": "CubeSat"
        },
        "status": "",
        "_id": "eafc393f-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R69-2",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The third phase is the capture (phys-\nical interception) phase in which the\nmanipulator physically captures the\ntarget satellite",
        "comments": "",
        "fulltext": "Upon ThirdPhase RobotManipulator shall eventually satisfy PhysicalCapture",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "ThirdPhase",
                "PhysicalCapture"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(ThirdPhase)",
            "regular_condition": "(ThirdPhase)",
            "conditionTextRange": [
                0,
                14
            ],
            "component_name": "RobotManipulator",
            "componentTextRange": [
                16,
                31
            ],
            "timingTextRange": [
                39,
                48
            ],
            "post_condition": "(PhysicalCapture)",
            "responseTextRange": [
                50,
                72
            ],
            "diagramVariables": "TC = <b><i>(ThirdPhase)</i></b>, Response = <b><i>(PhysicalCapture)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ThirdPhase)</i></b> is true and any point in the interval where <b><i>(ThirdPhase)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ThirdPhase",
            "regular_condition_unexp_ft": "ThirdPhase",
            "regular_condition_unexp_pctl": "ThirdPhase",
            "regular_condition_SMV_pt": "ThirdPhase",
            "regular_condition_SMV_ft": "ThirdPhase",
            "regular_condition_PRISM_pctl": "ThirdPhase",
            "post_condition_unexp_pt": "PhysicalCapture",
            "post_condition_unexp_ft": "PhysicalCapture",
            "post_condition_unexp_pctl": "PhysicalCapture",
            "post_condition_SMV_pt": "PhysicalCapture",
            "post_condition_SMV_ft": "PhysicalCapture",
            "post_condition_PRISM_pctl": "PhysicalCapture",
            "ft": "((LAST V (((! ThirdPhase) & ((! LAST) & (X ThirdPhase))) -> (X ((! LAST) U PhysicalCapture)))) & (ThirdPhase -> ((! LAST) U PhysicalCapture)))",
            "pt": "((H (! ThirdPhase)) | (! ((! PhysicalCapture) S ((! PhysicalCapture) & (ThirdPhase & (Z (! ThirdPhase)))))))",
            "pctl": "P>=1[((G (((! ThirdPhase) & (X ThirdPhase)) => (X (P>=1[(F PhysicalCapture)])))) & (ThirdPhase => (P>=1[(F PhysicalCapture)])))]",
            "ptExpanded": "((H (! ThirdPhase)) | (! ((! PhysicalCapture) S ((! PhysicalCapture) & (ThirdPhase & (Z (! ThirdPhase)))))))",
            "CoCoSpecCode": "(H(not (ThirdPhase)) or not (SI((ThirdPhase and ZtoPre(not (ThirdPhase))),not (PhysicalCapture))))",
            "ftExpanded": "((LAST V (((! ThirdPhase) & ((! LAST) & (X ThirdPhase))) -> (X ((! LAST) U PhysicalCapture)))) & (ThirdPhase -> ((! LAST) U PhysicalCapture)))",
            "pctlExpanded": "P>=1[((G (((! ThirdPhase) & (X ThirdPhase)) => (X (P>=1[(F PhysicalCapture)])))) & (ThirdPhase => (P>=1[(F PhysicalCapture)])))]",
            "ftInfAUExpanded": "((G (((! ThirdPhase) & (X ThirdPhase)) -> (X (F PhysicalCapture)))) & (ThirdPhase -> (F PhysicalCapture)))",
            "component": "RobotManipulator"
        },
        "status": "",
        "_id": "eafc3940-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R17",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Autonomously determine a steering\nlaw",
        "comments": "",
        "fulltext": "whenever operating BepiColombo shall eventually satisfy determine_steering_law",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "operating",
                "determine_steering_law"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(operating)",
            "regular_condition": "(operating)",
            "conditionTextRange": [
                0,
                17
            ],
            "component_name": "BepiColombo",
            "componentTextRange": [
                19,
                29
            ],
            "timingTextRange": [
                37,
                46
            ],
            "post_condition": "(determine_steering_law)",
            "responseTextRange": [
                48,
                77
            ],
            "diagramVariables": "CC = <b><i>(operating)</i></b>, Response = <b><i>(determine_steering_law)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(operating)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "operating",
            "regular_condition_unexp_ft": "operating",
            "regular_condition_unexp_pctl": "operating",
            "regular_condition_SMV_pt": "operating",
            "regular_condition_SMV_ft": "operating",
            "regular_condition_PRISM_pctl": "operating",
            "post_condition_unexp_pt": "determine_steering_law",
            "post_condition_unexp_ft": "determine_steering_law",
            "post_condition_unexp_pctl": "determine_steering_law",
            "post_condition_SMV_pt": "determine_steering_law",
            "post_condition_SMV_ft": "determine_steering_law",
            "post_condition_PRISM_pctl": "determine_steering_law",
            "ft": "(LAST V (operating -> ((! LAST) U determine_steering_law)))",
            "pt": "((H (! operating)) | (! ((! determine_steering_law) S ((! determine_steering_law) & operating))))",
            "pctl": "P>=1[(G (operating => (P>=1[(F determine_steering_law)])))]",
            "ptExpanded": "((H (! operating)) | (! ((! determine_steering_law) S ((! determine_steering_law) & operating))))",
            "CoCoSpecCode": "(H(not (operating)) or not (SI(operating,not (determine_steering_law))))",
            "ftExpanded": "(LAST V (operating -> ((! LAST) U determine_steering_law)))",
            "pctlExpanded": "P>=1[(G (operating => (P>=1[(F determine_steering_law)])))]",
            "ftInfAUExpanded": "(G (operating -> (F determine_steering_law)))",
            "component": "BepiColombo"
        },
        "status": "",
        "_id": "eafc3941-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R13-B",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "During the Separation Phase the\nonly mode of operation in use\nis STANDBY mode which should\nboth be done when the IM is in a\nstowed configuration",
        "comments": "",
        "fulltext": "In SEPARATIONPHASE whenever stowed IM shall eventually satisfy STANDBYMODE",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "SEPARATIONPHASE",
                "stowed",
                "STANDBYMODE"
            ],
            "scope_mode": "SEPARATIONPHASE",
            "scopeTextRange": [
                0,
                17
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(stowed)",
            "regular_condition": "(stowed)",
            "conditionTextRange": [
                19,
                33
            ],
            "component_name": "IM",
            "componentTextRange": [
                35,
                36
            ],
            "timingTextRange": [
                44,
                53
            ],
            "post_condition": "(STANDBYMODE)",
            "responseTextRange": [
                55,
                73
            ],
            "diagramVariables": "M = <b><i>SEPARATIONPHASE</i></b>, CC = <b><i>(stowed)</i></b>, Response = <b><i>(STANDBYMODE)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SEPARATIONPHASE</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(stowed)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "SEPARATIONPHASE",
            "scope_mode_ft": "SEPARATIONPHASE",
            "scope_mode_pctl": "SEPARATIONPHASE",
            "regular_condition_unexp_pt": "stowed",
            "regular_condition_unexp_ft": "stowed",
            "regular_condition_unexp_pctl": "stowed",
            "regular_condition_SMV_pt": "stowed",
            "regular_condition_SMV_ft": "stowed",
            "regular_condition_PRISM_pctl": "stowed",
            "post_condition_unexp_pt": "STANDBYMODE",
            "post_condition_unexp_ft": "STANDBYMODE",
            "post_condition_unexp_pctl": "STANDBYMODE",
            "post_condition_SMV_pt": "STANDBYMODE",
            "post_condition_SMV_ft": "STANDBYMODE",
            "post_condition_PRISM_pctl": "STANDBYMODE",
            "ft": "((LAST V ((! (Fin_SEPARATIONPHASE & (! LAST))) | (X ((Lin_SEPARATIONPHASE | LAST) V (stowed -> ((! (Lin_SEPARATIONPHASE | LAST)) U STANDBYMODE)))))) & (SEPARATIONPHASE -> ((Lin_SEPARATIONPHASE | LAST) V (stowed -> ((! (Lin_SEPARATIONPHASE | LAST)) U STANDBYMODE)))))",
            "pt": "((H (Lin_SEPARATIONPHASE -> (Y (((! stowed) S ((! stowed) & Fin_SEPARATIONPHASE)) | (! ((! STANDBYMODE) S ((! STANDBYMODE) & stowed))))))) & (((! Lin_SEPARATIONPHASE) S ((! Lin_SEPARATIONPHASE) & Fin_SEPARATIONPHASE)) -> (((! stowed) S ((! stowed) & Fin_SEPARATIONPHASE)) | (! ((! STANDBYMODE) S ((! STANDBYMODE) & stowed))))))",
            "pctl": "P>=1[((G ((! (Fin_SEPARATIONPHASE & (! LAST))) | (X (Lin_SEPARATIONPHASE R (stowed => (P>=1[((! Lin_SEPARATIONPHASE) U STANDBYMODE)])))))) & (SEPARATIONPHASE => (Lin_SEPARATIONPHASE | (Lin_SEPARATIONPHASE R (stowed => (P>=1[((! Lin_SEPARATIONPHASE) U STANDBYMODE)]))))))]",
            "ptExpanded": "((H (((! SEPARATIONPHASE) & (Y SEPARATIONPHASE)) -> (Y (((! stowed) S ((! stowed) & (SEPARATIONPHASE & (Z (! SEPARATIONPHASE))))) | (! ((! STANDBYMODE) S ((! STANDBYMODE) & stowed))))))) & (((! ((! SEPARATIONPHASE) & (Y SEPARATIONPHASE))) S ((! ((! SEPARATIONPHASE) & (Y SEPARATIONPHASE))) & (SEPARATIONPHASE & (Z (! SEPARATIONPHASE))))) -> (((! stowed) S ((! stowed) & (SEPARATIONPHASE & (Z (! SEPARATIONPHASE))))) | (! ((! STANDBYMODE) S ((! STANDBYMODE) & stowed))))))",
            "CoCoSpecCode": "(H(((not (SEPARATIONPHASE) and YtoPre(SEPARATIONPHASE)) => YtoPre((SI((SEPARATIONPHASE and ZtoPre(not (SEPARATIONPHASE))),not (stowed)) or not (SI(stowed,not (STANDBYMODE))))))) and (SI((SEPARATIONPHASE and ZtoPre(not (SEPARATIONPHASE))),not ((not (SEPARATIONPHASE) and YtoPre(SEPARATIONPHASE)))) => (SI((SEPARATIONPHASE and ZtoPre(not (SEPARATIONPHASE))),not (stowed)) or not (SI(stowed,not (STANDBYMODE))))))",
            "ftExpanded": "((LAST V ((! ((((! SEPARATIONPHASE) & (! LAST)) & (X SEPARATIONPHASE)) & (! LAST))) | (X ((((SEPARATIONPHASE & (! LAST)) & (X (! SEPARATIONPHASE))) | LAST) V (stowed -> ((! (((SEPARATIONPHASE & (! LAST)) & (X (! SEPARATIONPHASE))) | LAST)) U STANDBYMODE)))))) & (SEPARATIONPHASE -> ((((SEPARATIONPHASE & (! LAST)) & (X (! SEPARATIONPHASE))) | LAST) V (stowed -> ((! (((SEPARATIONPHASE & (! LAST)) & (X (! SEPARATIONPHASE))) | LAST)) U STANDBYMODE)))))",
            "pctlExpanded": "P>=1[((G ((! (((! SEPARATIONPHASE) & (X SEPARATIONPHASE)) & (! false))) | (X ((SEPARATIONPHASE & (X (! SEPARATIONPHASE))) R (stowed => (P>=1[((! (SEPARATIONPHASE & (X (! SEPARATIONPHASE)))) U STANDBYMODE)])))))) & (SEPARATIONPHASE => ((SEPARATIONPHASE & (X (! SEPARATIONPHASE))) | ((SEPARATIONPHASE & (X (! SEPARATIONPHASE))) R (stowed => (P>=1[((! (SEPARATIONPHASE & (X (! SEPARATIONPHASE)))) U STANDBYMODE)]))))))]",
            "ftInfAUExpanded": "((G ((! ((! SEPARATIONPHASE) & (X SEPARATIONPHASE))) | (X ((SEPARATIONPHASE & (X (! SEPARATIONPHASE))) V (stowed -> ((! (SEPARATIONPHASE & (X (! SEPARATIONPHASE)))) U STANDBYMODE)))))) & (SEPARATIONPHASE -> ((SEPARATIONPHASE & (X (! SEPARATIONPHASE))) V (stowed -> ((! (SEPARATIONPHASE & (X (! SEPARATIONPHASE)))) U STANDBYMODE)))))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc3942-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R62",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "As a final safeguard, Astrobee itself\nhas an internal list of KOZs that it\nchecks before moving",
        "comments": "",
        "fulltext": "Whenever moving Astrobee shall immediately satisfy !KOZ1 & !KOZ2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "moving",
                "KOZ1",
                "KOZ2"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(moving)",
            "regular_condition": "(moving)",
            "conditionTextRange": [
                0,
                14
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                16,
                23
            ],
            "timingTextRange": [
                31,
                41
            ],
            "post_condition": "(! KOZ1 & ! KOZ2)",
            "responseTextRange": [
                43,
                63
            ],
            "diagramVariables": "CC = <b><i>(moving)</i></b>, Response = <b><i>(! KOZ1 & ! KOZ2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(moving)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "moving",
            "regular_condition_unexp_ft": "moving",
            "regular_condition_unexp_pctl": "moving",
            "regular_condition_SMV_pt": "moving",
            "regular_condition_SMV_ft": "moving",
            "regular_condition_PRISM_pctl": "moving",
            "post_condition_unexp_pt": "((! KOZ1) & (! KOZ2))",
            "post_condition_unexp_ft": "((! KOZ1) & (! KOZ2))",
            "post_condition_unexp_pctl": "((! KOZ1) & (! KOZ2))",
            "post_condition_SMV_pt": "((! KOZ1) & (! KOZ2))",
            "post_condition_SMV_ft": "((! KOZ1) & (! KOZ2))",
            "post_condition_PRISM_pctl": "((! KOZ1) & (! KOZ2))",
            "ft": "(LAST V (moving -> ((! KOZ1) & (! KOZ2))))",
            "pt": "(H (moving -> ((! KOZ1) & (! KOZ2))))",
            "pctl": "P>=1[(G (moving => (P>=1[((! KOZ1) & (! KOZ2))])))]",
            "ptExpanded": "(H (moving -> ((! KOZ1) & (! KOZ2))))",
            "CoCoSpecCode": "H((moving => (not (KOZ1) and not (KOZ2))))",
            "ftExpanded": "(LAST V (moving -> ((! KOZ1) & (! KOZ2))))",
            "pctlExpanded": "P>=1[(G (moving => (P>=1[((! KOZ1) & (! KOZ2))])))]",
            "ftInfAUExpanded": "(G (moving -> ((! KOZ1) & (! KOZ2))))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc3943-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R52",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Initially, Astrobee will use these\ncomponents primarily to help crew\nunderstand its state and intentions\n(for example, by providing turn sig-\nnals)",
        "comments": "",
        "fulltext": "whenever Turning Astrobee shall at the next timepoint satisfy Indicate",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "Turning",
                "Indicate"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(Turning)",
            "regular_condition": "(Turning)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                17,
                24
            ],
            "timingTextRange": [
                32,
                52
            ],
            "post_condition": "(Indicate)",
            "responseTextRange": [
                54,
                69
            ],
            "diagramVariables": "CC = <b><i>(Turning)</i></b>, Response = <b><i>(Indicate)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(Turning)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "Turning",
            "regular_condition_unexp_ft": "Turning",
            "regular_condition_unexp_pctl": "Turning",
            "regular_condition_SMV_pt": "Turning",
            "regular_condition_SMV_ft": "Turning",
            "regular_condition_PRISM_pctl": "Turning",
            "post_condition_unexp_pt": "Indicate",
            "post_condition_unexp_ft": "Indicate",
            "post_condition_unexp_pctl": "Indicate",
            "post_condition_SMV_pt": "Indicate",
            "post_condition_SMV_ft": "Indicate",
            "post_condition_PRISM_pctl": "Indicate",
            "ft": "(LAST V (Turning -> (LAST | (X Indicate))))",
            "pt": "(H ((Y Turning) -> (Indicate | (Z FALSE))))",
            "pctl": "P>=1[(G (Turning => (P>=1[(LAST | (X Indicate))])))]",
            "ptExpanded": "(H ((Y Turning) -> (Indicate | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre(Turning) => (Indicate or ZtoPre(false))))",
            "ftExpanded": "(LAST V (Turning -> (LAST | (X Indicate))))",
            "pctlExpanded": "P>=1[(G (Turning => (P>=1[(false | (X Indicate))])))]",
            "ftInfAUExpanded": "(G (Turning -> (X Indicate)))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc3944-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R57",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Operators use the Plan Editor tab in\nthe Control Station to construct and\nvalidate sequences of commands for\nAstrobee (“.fplans”), that include\nwaypoints and actions to perform at\nthe waypoints.",
        "comments": "",
        "fulltext": "whenever CommandReceived Astrobee shall eventually satisfy PerformCommand",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "CommandReceived",
                "PerformCommand"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(CommandReceived)",
            "regular_condition": "(CommandReceived)",
            "conditionTextRange": [
                0,
                23
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                25,
                32
            ],
            "timingTextRange": [
                40,
                49
            ],
            "post_condition": "(PerformCommand)",
            "responseTextRange": [
                51,
                72
            ],
            "diagramVariables": "CC = <b><i>(CommandReceived)</i></b>, Response = <b><i>(PerformCommand)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(CommandReceived)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "CommandReceived",
            "regular_condition_unexp_ft": "CommandReceived",
            "regular_condition_unexp_pctl": "CommandReceived",
            "regular_condition_SMV_pt": "CommandReceived",
            "regular_condition_SMV_ft": "CommandReceived",
            "regular_condition_PRISM_pctl": "CommandReceived",
            "post_condition_unexp_pt": "PerformCommand",
            "post_condition_unexp_ft": "PerformCommand",
            "post_condition_unexp_pctl": "PerformCommand",
            "post_condition_SMV_pt": "PerformCommand",
            "post_condition_SMV_ft": "PerformCommand",
            "post_condition_PRISM_pctl": "PerformCommand",
            "ft": "(LAST V (CommandReceived -> ((! LAST) U PerformCommand)))",
            "pt": "((H (! CommandReceived)) | (! ((! PerformCommand) S ((! PerformCommand) & CommandReceived))))",
            "pctl": "P>=1[(G (CommandReceived => (P>=1[(F PerformCommand)])))]",
            "ptExpanded": "((H (! CommandReceived)) | (! ((! PerformCommand) S ((! PerformCommand) & CommandReceived))))",
            "CoCoSpecCode": "(H(not (CommandReceived)) or not (SI(CommandReceived,not (PerformCommand))))",
            "ftExpanded": "(LAST V (CommandReceived -> ((! LAST) U PerformCommand)))",
            "pctlExpanded": "P>=1[(G (CommandReceived => (P>=1[(F PerformCommand)])))]",
            "ftInfAUExpanded": "(G (CommandReceived -> (F PerformCommand)))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc3945-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R28-A",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "in charge of providing the ground\nsegment with telemetry data about\nthe state and health of the space-\ncraft, therefore this service shall\nbe able to automatically collect\ntelemetry data.",
        "comments": "",
        "fulltext": "Cubesat shall always satisfy CollectData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "CollectData"
            ],
            "component_name": "Cubesat",
            "componentTextRange": [
                0,
                6
            ],
            "timingTextRange": [
                14,
                19
            ],
            "post_condition": "(CollectData)",
            "responseTextRange": [
                21,
                39
            ],
            "diagramVariables": "Response = <b><i>(CollectData)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "CollectData",
            "post_condition_unexp_ft": "CollectData",
            "post_condition_unexp_pctl": "CollectData",
            "post_condition_SMV_pt": "CollectData",
            "post_condition_SMV_ft": "CollectData",
            "post_condition_PRISM_pctl": "CollectData",
            "ft": "(LAST V CollectData)",
            "pt": "(H CollectData)",
            "pctl": "(P>=1[(G CollectData)])",
            "ptExpanded": "(H CollectData)",
            "CoCoSpecCode": "H(CollectData)",
            "ftExpanded": "(LAST V CollectData)",
            "pctlExpanded": "(P>=1[(G CollectData)])",
            "ftInfAUExpanded": "(G CollectData)",
            "component": "Cubesat"
        },
        "status": "",
        "_id": "eafc3946-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R39",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "If the vehicle is slowing down\nfrom the wing-borne mode (WB),\nthe transition to semi-wing-borne\n(SWB) kicks in at an indicated air-\nspeed of 90 knots (kias <= 90.0)",
        "comments": "",
        "fulltext": "In Wbmode whenever airspeed <= 90 LPC shall eventually satisfy SWBMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "Wbmode",
                "airspeed",
                "SWBMode"
            ],
            "scope_mode": "Wbmode",
            "scopeTextRange": [
                0,
                8
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(airspeed <= 90)",
            "regular_condition": "(airspeed <= 90)",
            "conditionTextRange": [
                10,
                32
            ],
            "component_name": "LPC",
            "componentTextRange": [
                34,
                36
            ],
            "timingTextRange": [
                44,
                53
            ],
            "post_condition": "(SWBMode)",
            "responseTextRange": [
                55,
                69
            ],
            "diagramVariables": "M = <b><i>Wbmode</i></b>, CC = <b><i>(airspeed <= 90)</i></b>, Response = <b><i>(SWBMode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>Wbmode</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(airspeed <= 90)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "Wbmode",
            "scope_mode_ft": "Wbmode",
            "scope_mode_pctl": "Wbmode",
            "regular_condition_unexp_pt": "(airspeed <= 90)",
            "regular_condition_unexp_ft": "(airspeed <= 90)",
            "regular_condition_unexp_pctl": "(airspeed <= 90)",
            "regular_condition_SMV_pt": "(airspeed <= 90)",
            "regular_condition_SMV_ft": "(airspeed <= 90)",
            "regular_condition_PRISM_pctl": "(airspeed <= 90)",
            "post_condition_unexp_pt": "SWBMode",
            "post_condition_unexp_ft": "SWBMode",
            "post_condition_unexp_pctl": "SWBMode",
            "post_condition_SMV_pt": "SWBMode",
            "post_condition_SMV_ft": "SWBMode",
            "post_condition_PRISM_pctl": "SWBMode",
            "ft": "((LAST V ((! (Fin_Wbmode & (! LAST))) | (X ((Lin_Wbmode | LAST) V ((airspeed <= 90) -> ((! (Lin_Wbmode | LAST)) U SWBMode)))))) & (Wbmode -> ((Lin_Wbmode | LAST) V ((airspeed <= 90) -> ((! (Lin_Wbmode | LAST)) U SWBMode)))))",
            "pt": "((H (Lin_Wbmode -> (Y (((! (airspeed <= 90)) S ((! (airspeed <= 90)) & Fin_Wbmode)) | (! ((! SWBMode) S ((! SWBMode) & (airspeed <= 90)))))))) & (((! Lin_Wbmode) S ((! Lin_Wbmode) & Fin_Wbmode)) -> (((! (airspeed <= 90)) S ((! (airspeed <= 90)) & Fin_Wbmode)) | (! ((! SWBMode) S ((! SWBMode) & (airspeed <= 90)))))))",
            "pctl": "P>=1[((G ((! (Fin_Wbmode & (! LAST))) | (X (Lin_Wbmode R ((airspeed <= 90) => (P>=1[((! Lin_Wbmode) U SWBMode)])))))) & (Wbmode => (Lin_Wbmode | (Lin_Wbmode R ((airspeed <= 90) => (P>=1[((! Lin_Wbmode) U SWBMode)]))))))]",
            "ptExpanded": "((H (((! Wbmode) & (Y Wbmode)) -> (Y (((! (airspeed <= 90)) S ((! (airspeed <= 90)) & (Wbmode & (Z (! Wbmode))))) | (! ((! SWBMode) S ((! SWBMode) & (airspeed <= 90)))))))) & (((! ((! Wbmode) & (Y Wbmode))) S ((! ((! Wbmode) & (Y Wbmode))) & (Wbmode & (Z (! Wbmode))))) -> (((! (airspeed <= 90)) S ((! (airspeed <= 90)) & (Wbmode & (Z (! Wbmode))))) | (! ((! SWBMode) S ((! SWBMode) & (airspeed <= 90)))))))",
            "CoCoSpecCode": "(H(((not (Wbmode) and YtoPre(Wbmode)) => YtoPre((SI((Wbmode and ZtoPre(not (Wbmode))),not ((airspeed <= 90))) or not (SI((airspeed <= 90),not (SWBMode))))))) and (SI((Wbmode and ZtoPre(not (Wbmode))),not ((not (Wbmode) and YtoPre(Wbmode)))) => (SI((Wbmode and ZtoPre(not (Wbmode))),not ((airspeed <= 90))) or not (SI((airspeed <= 90),not (SWBMode))))))",
            "ftExpanded": "((LAST V ((! ((((! Wbmode) & (! LAST)) & (X Wbmode)) & (! LAST))) | (X ((((Wbmode & (! LAST)) & (X (! Wbmode))) | LAST) V ((airspeed <= 90) -> ((! (((Wbmode & (! LAST)) & (X (! Wbmode))) | LAST)) U SWBMode)))))) & (Wbmode -> ((((Wbmode & (! LAST)) & (X (! Wbmode))) | LAST) V ((airspeed <= 90) -> ((! (((Wbmode & (! LAST)) & (X (! Wbmode))) | LAST)) U SWBMode)))))",
            "pctlExpanded": "P>=1[((G ((! (((! Wbmode) & (X Wbmode)) & (! false))) | (X ((Wbmode & (X (! Wbmode))) R ((airspeed <= 90) => (P>=1[((! (Wbmode & (X (! Wbmode)))) U SWBMode)])))))) & (Wbmode => ((Wbmode & (X (! Wbmode))) | ((Wbmode & (X (! Wbmode))) R ((airspeed <= 90) => (P>=1[((! (Wbmode & (X (! Wbmode)))) U SWBMode)]))))))]",
            "ftInfAUExpanded": "((G ((! ((! Wbmode) & (X Wbmode))) | (X ((Wbmode & (X (! Wbmode))) V ((airspeed <= 90) -> ((! (Wbmode & (X (! Wbmode)))) U SWBMode)))))) & (Wbmode -> ((Wbmode & (X (! Wbmode))) V ((airspeed <= 90) -> ((! (Wbmode & (X (! Wbmode)))) U SWBMode)))))",
            "component": "LPC"
        },
        "status": "",
        "_id": "eafc3947-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R18",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Use low thrust to achieve capture\naround Mercury",
        "comments": "",
        "fulltext": "whenever capturing BepiColombo shall immediately satisfy low_thrust",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "capturing",
                "low_thrust"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(capturing)",
            "regular_condition": "(capturing)",
            "conditionTextRange": [
                0,
                17
            ],
            "component_name": "BepiColombo",
            "componentTextRange": [
                19,
                29
            ],
            "timingTextRange": [
                37,
                47
            ],
            "post_condition": "(low_thrust)",
            "responseTextRange": [
                49,
                66
            ],
            "diagramVariables": "CC = <b><i>(capturing)</i></b>, Response = <b><i>(low_thrust)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(capturing)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "capturing",
            "regular_condition_unexp_ft": "capturing",
            "regular_condition_unexp_pctl": "capturing",
            "regular_condition_SMV_pt": "capturing",
            "regular_condition_SMV_ft": "capturing",
            "regular_condition_PRISM_pctl": "capturing",
            "post_condition_unexp_pt": "low_thrust",
            "post_condition_unexp_ft": "low_thrust",
            "post_condition_unexp_pctl": "low_thrust",
            "post_condition_SMV_pt": "low_thrust",
            "post_condition_SMV_ft": "low_thrust",
            "post_condition_PRISM_pctl": "low_thrust",
            "ft": "(LAST V (capturing -> low_thrust))",
            "pt": "(H (capturing -> low_thrust))",
            "pctl": "P>=1[(G (capturing => (P>=1[low_thrust])))]",
            "ptExpanded": "(H (capturing -> low_thrust))",
            "CoCoSpecCode": "H((capturing => low_thrust))",
            "ftExpanded": "(LAST V (capturing -> low_thrust))",
            "pctlExpanded": "P>=1[(G (capturing => (P>=1[low_thrust])))]",
            "ftInfAUExpanded": "(G (capturing -> low_thrust))",
            "component": "BepiColombo"
        },
        "status": "",
        "_id": "eafc3948-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R13-C",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "During the Transfer Phase the\nonly modes of operation in use is\nSTANDBY and SAFE mode which\nshould both be done when the IM is\nin a stowed configuration",
        "comments": "",
        "fulltext": "In TRANSFERPHASE whenever stowed IM shall eventually satisfy STANDBYMODE & SAFE",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "TRANSFERPHASE",
                "stowed",
                "STANDBYMODE",
                "SAFE"
            ],
            "scope_mode": "TRANSFERPHASE",
            "scopeTextRange": [
                0,
                15
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(stowed)",
            "regular_condition": "(stowed)",
            "conditionTextRange": [
                17,
                31
            ],
            "component_name": "IM",
            "componentTextRange": [
                33,
                34
            ],
            "timingTextRange": [
                42,
                51
            ],
            "post_condition": "(STANDBYMODE & SAFE)",
            "responseTextRange": [
                53,
                78
            ],
            "diagramVariables": "M = <b><i>TRANSFERPHASE</i></b>, CC = <b><i>(stowed)</i></b>, Response = <b><i>(STANDBYMODE & SAFE)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>TRANSFERPHASE</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(stowed)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "TRANSFERPHASE",
            "scope_mode_ft": "TRANSFERPHASE",
            "scope_mode_pctl": "TRANSFERPHASE",
            "regular_condition_unexp_pt": "stowed",
            "regular_condition_unexp_ft": "stowed",
            "regular_condition_unexp_pctl": "stowed",
            "regular_condition_SMV_pt": "stowed",
            "regular_condition_SMV_ft": "stowed",
            "regular_condition_PRISM_pctl": "stowed",
            "post_condition_unexp_pt": "(STANDBYMODE & SAFE)",
            "post_condition_unexp_ft": "(STANDBYMODE & SAFE)",
            "post_condition_unexp_pctl": "(STANDBYMODE & SAFE)",
            "post_condition_SMV_pt": "(STANDBYMODE & SAFE)",
            "post_condition_SMV_ft": "(STANDBYMODE & SAFE)",
            "post_condition_PRISM_pctl": "(STANDBYMODE & SAFE)",
            "ft": "((LAST V ((! (Fin_TRANSFERPHASE & (! LAST))) | (X ((Lin_TRANSFERPHASE | LAST) V (stowed -> ((! (Lin_TRANSFERPHASE | LAST)) U (STANDBYMODE & SAFE))))))) & (TRANSFERPHASE -> ((Lin_TRANSFERPHASE | LAST) V (stowed -> ((! (Lin_TRANSFERPHASE | LAST)) U (STANDBYMODE & SAFE))))))",
            "pt": "((H (Lin_TRANSFERPHASE -> (Y (((! stowed) S ((! stowed) & Fin_TRANSFERPHASE)) | (! ((! (STANDBYMODE & SAFE)) S ((! (STANDBYMODE & SAFE)) & stowed))))))) & (((! Lin_TRANSFERPHASE) S ((! Lin_TRANSFERPHASE) & Fin_TRANSFERPHASE)) -> (((! stowed) S ((! stowed) & Fin_TRANSFERPHASE)) | (! ((! (STANDBYMODE & SAFE)) S ((! (STANDBYMODE & SAFE)) & stowed))))))",
            "pctl": "P>=1[((G ((! (Fin_TRANSFERPHASE & (! LAST))) | (X (Lin_TRANSFERPHASE R (stowed => (P>=1[((! Lin_TRANSFERPHASE) U (STANDBYMODE & SAFE))])))))) & (TRANSFERPHASE => (Lin_TRANSFERPHASE | (Lin_TRANSFERPHASE R (stowed => (P>=1[((! Lin_TRANSFERPHASE) U (STANDBYMODE & SAFE))]))))))]",
            "ptExpanded": "((H (((! TRANSFERPHASE) & (Y TRANSFERPHASE)) -> (Y (((! stowed) S ((! stowed) & (TRANSFERPHASE & (Z (! TRANSFERPHASE))))) | (! ((! (STANDBYMODE & SAFE)) S ((! (STANDBYMODE & SAFE)) & stowed))))))) & (((! ((! TRANSFERPHASE) & (Y TRANSFERPHASE))) S ((! ((! TRANSFERPHASE) & (Y TRANSFERPHASE))) & (TRANSFERPHASE & (Z (! TRANSFERPHASE))))) -> (((! stowed) S ((! stowed) & (TRANSFERPHASE & (Z (! TRANSFERPHASE))))) | (! ((! (STANDBYMODE & SAFE)) S ((! (STANDBYMODE & SAFE)) & stowed))))))",
            "CoCoSpecCode": "(H(((not (TRANSFERPHASE) and YtoPre(TRANSFERPHASE)) => YtoPre((SI((TRANSFERPHASE and ZtoPre(not (TRANSFERPHASE))),not (stowed)) or not (SI(stowed,not ((STANDBYMODE and SAFE)))))))) and (SI((TRANSFERPHASE and ZtoPre(not (TRANSFERPHASE))),not ((not (TRANSFERPHASE) and YtoPre(TRANSFERPHASE)))) => (SI((TRANSFERPHASE and ZtoPre(not (TRANSFERPHASE))),not (stowed)) or not (SI(stowed,not ((STANDBYMODE and SAFE)))))))",
            "ftExpanded": "((LAST V ((! ((((! TRANSFERPHASE) & (! LAST)) & (X TRANSFERPHASE)) & (! LAST))) | (X ((((TRANSFERPHASE & (! LAST)) & (X (! TRANSFERPHASE))) | LAST) V (stowed -> ((! (((TRANSFERPHASE & (! LAST)) & (X (! TRANSFERPHASE))) | LAST)) U (STANDBYMODE & SAFE))))))) & (TRANSFERPHASE -> ((((TRANSFERPHASE & (! LAST)) & (X (! TRANSFERPHASE))) | LAST) V (stowed -> ((! (((TRANSFERPHASE & (! LAST)) & (X (! TRANSFERPHASE))) | LAST)) U (STANDBYMODE & SAFE))))))",
            "pctlExpanded": "P>=1[((G ((! (((! TRANSFERPHASE) & (X TRANSFERPHASE)) & (! false))) | (X ((TRANSFERPHASE & (X (! TRANSFERPHASE))) R (stowed => (P>=1[((! (TRANSFERPHASE & (X (! TRANSFERPHASE)))) U (STANDBYMODE & SAFE))])))))) & (TRANSFERPHASE => ((TRANSFERPHASE & (X (! TRANSFERPHASE))) | ((TRANSFERPHASE & (X (! TRANSFERPHASE))) R (stowed => (P>=1[((! (TRANSFERPHASE & (X (! TRANSFERPHASE)))) U (STANDBYMODE & SAFE))]))))))]",
            "ftInfAUExpanded": "((G ((! ((! TRANSFERPHASE) & (X TRANSFERPHASE))) | (X ((TRANSFERPHASE & (X (! TRANSFERPHASE))) V (stowed -> ((! (TRANSFERPHASE & (X (! TRANSFERPHASE)))) U (STANDBYMODE & SAFE))))))) & (TRANSFERPHASE -> ((TRANSFERPHASE & (X (! TRANSFERPHASE))) V (stowed -> ((! (TRANSFERPHASE & (X (! TRANSFERPHASE)))) U (STANDBYMODE & SAFE))))))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc3949-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R70-1",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The fourth phase is the post-capture\nphase in which captured target\nsatellite is stabilized along with the\nservicing system",
        "comments": "",
        "fulltext": "Upon PhysicalCapture ServicingSatellite shall at the next timepoint satisfy FourthPhase",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "PhysicalCapture",
                "FourthPhase"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(PhysicalCapture)",
            "regular_condition": "(PhysicalCapture)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "ServicingSatellite",
            "componentTextRange": [
                21,
                38
            ],
            "timingTextRange": [
                46,
                66
            ],
            "post_condition": "(FourthPhase)",
            "responseTextRange": [
                68,
                86
            ],
            "diagramVariables": "TC = <b><i>(PhysicalCapture)</i></b>, Response = <b><i>(FourthPhase)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(PhysicalCapture)</i></b> is true and any point in the interval where <b><i>(PhysicalCapture)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "PhysicalCapture",
            "regular_condition_unexp_ft": "PhysicalCapture",
            "regular_condition_unexp_pctl": "PhysicalCapture",
            "regular_condition_SMV_pt": "PhysicalCapture",
            "regular_condition_SMV_ft": "PhysicalCapture",
            "regular_condition_PRISM_pctl": "PhysicalCapture",
            "post_condition_unexp_pt": "FourthPhase",
            "post_condition_unexp_ft": "FourthPhase",
            "post_condition_unexp_pctl": "FourthPhase",
            "post_condition_SMV_pt": "FourthPhase",
            "post_condition_SMV_ft": "FourthPhase",
            "post_condition_PRISM_pctl": "FourthPhase",
            "ft": "((LAST V (((! PhysicalCapture) & ((! LAST) & (X PhysicalCapture))) -> (X (LAST | (X FourthPhase))))) & (PhysicalCapture -> (LAST | (X FourthPhase))))",
            "pt": "(H ((Y (PhysicalCapture & (Z (! PhysicalCapture)))) -> (FourthPhase | (Z FALSE))))",
            "pctl": "P>=1[((G (((! PhysicalCapture) & (X PhysicalCapture)) => (X (P>=1[(LAST | (X FourthPhase))])))) & (PhysicalCapture => (P>=1[(LAST | (X FourthPhase))])))]",
            "ptExpanded": "(H ((Y (PhysicalCapture & (Z (! PhysicalCapture)))) -> (FourthPhase | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre((PhysicalCapture and ZtoPre(not (PhysicalCapture)))) => (FourthPhase or ZtoPre(false))))",
            "ftExpanded": "((LAST V (((! PhysicalCapture) & ((! LAST) & (X PhysicalCapture))) -> (X (LAST | (X FourthPhase))))) & (PhysicalCapture -> (LAST | (X FourthPhase))))",
            "pctlExpanded": "P>=1[((G (((! PhysicalCapture) & (X PhysicalCapture)) => (X (P>=1[(false | (X FourthPhase))])))) & (PhysicalCapture => (P>=1[(false | (X FourthPhase))])))]",
            "ftInfAUExpanded": "((G (((! PhysicalCapture) & (X PhysicalCapture)) -> (X (X FourthPhase)))) & (PhysicalCapture -> (X FourthPhase)))",
            "component": "ServicingSatellite"
        },
        "status": "",
        "_id": "eafc394a-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R63-A",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The robot can periodically update\nmulti-sensor 3D maps of the vehi-\ncle. air quality tracking can all help\nflight controllers understand system\nstatus",
        "comments": "",
        "fulltext": "Whenever TimeForAir Astrobee shall eventually satisfy AirSurvey",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "TimeForAir",
                "AirSurvey"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(TimeForAir)",
            "regular_condition": "(TimeForAir)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                20,
                27
            ],
            "timingTextRange": [
                35,
                44
            ],
            "post_condition": "(AirSurvey)",
            "responseTextRange": [
                46,
                62
            ],
            "diagramVariables": "CC = <b><i>(TimeForAir)</i></b>, Response = <b><i>(AirSurvey)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(TimeForAir)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "TimeForAir",
            "regular_condition_unexp_ft": "TimeForAir",
            "regular_condition_unexp_pctl": "TimeForAir",
            "regular_condition_SMV_pt": "TimeForAir",
            "regular_condition_SMV_ft": "TimeForAir",
            "regular_condition_PRISM_pctl": "TimeForAir",
            "post_condition_unexp_pt": "AirSurvey",
            "post_condition_unexp_ft": "AirSurvey",
            "post_condition_unexp_pctl": "AirSurvey",
            "post_condition_SMV_pt": "AirSurvey",
            "post_condition_SMV_ft": "AirSurvey",
            "post_condition_PRISM_pctl": "AirSurvey",
            "ft": "(LAST V (TimeForAir -> ((! LAST) U AirSurvey)))",
            "pt": "((H (! TimeForAir)) | (! ((! AirSurvey) S ((! AirSurvey) & TimeForAir))))",
            "pctl": "P>=1[(G (TimeForAir => (P>=1[(F AirSurvey)])))]",
            "ptExpanded": "((H (! TimeForAir)) | (! ((! AirSurvey) S ((! AirSurvey) & TimeForAir))))",
            "CoCoSpecCode": "(H(not (TimeForAir)) or not (SI(TimeForAir,not (AirSurvey))))",
            "ftExpanded": "(LAST V (TimeForAir -> ((! LAST) U AirSurvey)))",
            "pctlExpanded": "P>=1[(G (TimeForAir => (P>=1[(F AirSurvey)])))]",
            "ftInfAUExpanded": "(G (TimeForAir -> (F AirSurvey)))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc394b-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R28-B",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "in charge of providing the ground\nsegment with telemetry data about\nthe state and health of the space-\ncraft, therefore this service shall be\nable to automatically store teleme-\ntry data.",
        "comments": "",
        "fulltext": "Cubesat shall always satisfy StoreData",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "StoreData"
            ],
            "component_name": "Cubesat",
            "componentTextRange": [
                0,
                6
            ],
            "timingTextRange": [
                14,
                19
            ],
            "post_condition": "(StoreData)",
            "responseTextRange": [
                21,
                37
            ],
            "diagramVariables": "Response = <b><i>(StoreData)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "StoreData",
            "post_condition_unexp_ft": "StoreData",
            "post_condition_unexp_pctl": "StoreData",
            "post_condition_SMV_pt": "StoreData",
            "post_condition_SMV_ft": "StoreData",
            "post_condition_PRISM_pctl": "StoreData",
            "ft": "(LAST V StoreData)",
            "pt": "(H StoreData)",
            "pctl": "(P>=1[(G StoreData)])",
            "ptExpanded": "(H StoreData)",
            "CoCoSpecCode": "H(StoreData)",
            "ftExpanded": "(LAST V StoreData)",
            "pctlExpanded": "(P>=1[(G StoreData)])",
            "ftInfAUExpanded": "(G StoreData)",
            "component": "Cubesat"
        },
        "status": "",
        "_id": "eafc394c-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R40",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "whereas if the vehicle is speeding\nup from a SWB mode, the transition\nto WB mode occurs at kias >100.0\nknots",
        "comments": "",
        "fulltext": "In SWBmode whenever airspeed >100 LPC shall eventually satisfy WBMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "SWBmode",
                "airspeed",
                "WBMode"
            ],
            "scope_mode": "SWBmode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(airspeed > 100)",
            "regular_condition": "(airspeed > 100)",
            "conditionTextRange": [
                11,
                32
            ],
            "component_name": "LPC",
            "componentTextRange": [
                34,
                36
            ],
            "timingTextRange": [
                44,
                53
            ],
            "post_condition": "(WBMode)",
            "responseTextRange": [
                55,
                68
            ],
            "diagramVariables": "M = <b><i>SWBmode</i></b>, CC = <b><i>(airspeed > 100)</i></b>, Response = <b><i>(WBMode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SWBmode</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(airspeed > 100)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "SWBmode",
            "scope_mode_ft": "SWBmode",
            "scope_mode_pctl": "SWBmode",
            "regular_condition_unexp_pt": "(airspeed > 100)",
            "regular_condition_unexp_ft": "(airspeed > 100)",
            "regular_condition_unexp_pctl": "(airspeed > 100)",
            "regular_condition_SMV_pt": "(airspeed > 100)",
            "regular_condition_SMV_ft": "(airspeed > 100)",
            "regular_condition_PRISM_pctl": "(airspeed > 100)",
            "post_condition_unexp_pt": "WBMode",
            "post_condition_unexp_ft": "WBMode",
            "post_condition_unexp_pctl": "WBMode",
            "post_condition_SMV_pt": "WBMode",
            "post_condition_SMV_ft": "WBMode",
            "post_condition_PRISM_pctl": "WBMode",
            "ft": "((LAST V ((! (Fin_SWBmode & (! LAST))) | (X ((Lin_SWBmode | LAST) V ((airspeed > 100) -> ((! (Lin_SWBmode | LAST)) U WBMode)))))) & (SWBmode -> ((Lin_SWBmode | LAST) V ((airspeed > 100) -> ((! (Lin_SWBmode | LAST)) U WBMode)))))",
            "pt": "((H (Lin_SWBmode -> (Y (((! (airspeed > 100)) S ((! (airspeed > 100)) & Fin_SWBmode)) | (! ((! WBMode) S ((! WBMode) & (airspeed > 100)))))))) & (((! Lin_SWBmode) S ((! Lin_SWBmode) & Fin_SWBmode)) -> (((! (airspeed > 100)) S ((! (airspeed > 100)) & Fin_SWBmode)) | (! ((! WBMode) S ((! WBMode) & (airspeed > 100)))))))",
            "pctl": "P>=1[((G ((! (Fin_SWBmode & (! LAST))) | (X (Lin_SWBmode R ((airspeed > 100) => (P>=1[((! Lin_SWBmode) U WBMode)])))))) & (SWBmode => (Lin_SWBmode | (Lin_SWBmode R ((airspeed > 100) => (P>=1[((! Lin_SWBmode) U WBMode)]))))))]",
            "ptExpanded": "((H (((! SWBmode) & (Y SWBmode)) -> (Y (((! (airspeed > 100)) S ((! (airspeed > 100)) & (SWBmode & (Z (! SWBmode))))) | (! ((! WBMode) S ((! WBMode) & (airspeed > 100)))))))) & (((! ((! SWBmode) & (Y SWBmode))) S ((! ((! SWBmode) & (Y SWBmode))) & (SWBmode & (Z (! SWBmode))))) -> (((! (airspeed > 100)) S ((! (airspeed > 100)) & (SWBmode & (Z (! SWBmode))))) | (! ((! WBMode) S ((! WBMode) & (airspeed > 100)))))))",
            "CoCoSpecCode": "(H(((not (SWBmode) and YtoPre(SWBmode)) => YtoPre((SI((SWBmode and ZtoPre(not (SWBmode))),not ((airspeed > 100))) or not (SI((airspeed > 100),not (WBMode))))))) and (SI((SWBmode and ZtoPre(not (SWBmode))),not ((not (SWBmode) and YtoPre(SWBmode)))) => (SI((SWBmode and ZtoPre(not (SWBmode))),not ((airspeed > 100))) or not (SI((airspeed > 100),not (WBMode))))))",
            "ftExpanded": "((LAST V ((! ((((! SWBmode) & (! LAST)) & (X SWBmode)) & (! LAST))) | (X ((((SWBmode & (! LAST)) & (X (! SWBmode))) | LAST) V ((airspeed > 100) -> ((! (((SWBmode & (! LAST)) & (X (! SWBmode))) | LAST)) U WBMode)))))) & (SWBmode -> ((((SWBmode & (! LAST)) & (X (! SWBmode))) | LAST) V ((airspeed > 100) -> ((! (((SWBmode & (! LAST)) & (X (! SWBmode))) | LAST)) U WBMode)))))",
            "pctlExpanded": "P>=1[((G ((! (((! SWBmode) & (X SWBmode)) & (! false))) | (X ((SWBmode & (X (! SWBmode))) R ((airspeed > 100) => (P>=1[((! (SWBmode & (X (! SWBmode)))) U WBMode)])))))) & (SWBmode => ((SWBmode & (X (! SWBmode))) | ((SWBmode & (X (! SWBmode))) R ((airspeed > 100) => (P>=1[((! (SWBmode & (X (! SWBmode)))) U WBMode)]))))))]",
            "ftInfAUExpanded": "((G ((! ((! SWBmode) & (X SWBmode))) | (X ((SWBmode & (X (! SWBmode))) V ((airspeed > 100) -> ((! (SWBmode & (X (! SWBmode)))) U WBMode)))))) & (SWBmode -> ((SWBmode & (X (! SWBmode))) V ((airspeed > 100) -> ((! (SWBmode & (X (! SWBmode)))) U WBMode)))))",
            "component": "LPC"
        },
        "status": "",
        "_id": "eafc394d-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R13-D",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "During the Rendezvous Phase the\nonly modes of operation in use is\nSTANDBY and SAFE mode which\nshould both be done when the IM is\nin a stowed configuration",
        "comments": "",
        "fulltext": "In RENDEZVOUSPHASE whenever stowed IM shall eventually satisfy STANDBYMODE & SAFEMODE",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "RENDEZVOUSPHASE",
                "stowed",
                "STANDBYMODE",
                "SAFEMODE"
            ],
            "scope_mode": "RENDEZVOUSPHASE",
            "scopeTextRange": [
                0,
                17
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(stowed)",
            "regular_condition": "(stowed)",
            "conditionTextRange": [
                19,
                33
            ],
            "component_name": "IM",
            "componentTextRange": [
                35,
                36
            ],
            "timingTextRange": [
                44,
                53
            ],
            "post_condition": "(STANDBYMODE & SAFEMODE)",
            "responseTextRange": [
                55,
                84
            ],
            "diagramVariables": "M = <b><i>RENDEZVOUSPHASE</i></b>, CC = <b><i>(stowed)</i></b>, Response = <b><i>(STANDBYMODE & SAFEMODE)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>RENDEZVOUSPHASE</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(stowed)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "RENDEZVOUSPHASE",
            "scope_mode_ft": "RENDEZVOUSPHASE",
            "scope_mode_pctl": "RENDEZVOUSPHASE",
            "regular_condition_unexp_pt": "stowed",
            "regular_condition_unexp_ft": "stowed",
            "regular_condition_unexp_pctl": "stowed",
            "regular_condition_SMV_pt": "stowed",
            "regular_condition_SMV_ft": "stowed",
            "regular_condition_PRISM_pctl": "stowed",
            "post_condition_unexp_pt": "(STANDBYMODE & SAFEMODE)",
            "post_condition_unexp_ft": "(STANDBYMODE & SAFEMODE)",
            "post_condition_unexp_pctl": "(STANDBYMODE & SAFEMODE)",
            "post_condition_SMV_pt": "(STANDBYMODE & SAFEMODE)",
            "post_condition_SMV_ft": "(STANDBYMODE & SAFEMODE)",
            "post_condition_PRISM_pctl": "(STANDBYMODE & SAFEMODE)",
            "ft": "((LAST V ((! (Fin_RENDEZVOUSPHASE & (! LAST))) | (X ((Lin_RENDEZVOUSPHASE | LAST) V (stowed -> ((! (Lin_RENDEZVOUSPHASE | LAST)) U (STANDBYMODE & SAFEMODE))))))) & (RENDEZVOUSPHASE -> ((Lin_RENDEZVOUSPHASE | LAST) V (stowed -> ((! (Lin_RENDEZVOUSPHASE | LAST)) U (STANDBYMODE & SAFEMODE))))))",
            "pt": "((H (Lin_RENDEZVOUSPHASE -> (Y (((! stowed) S ((! stowed) & Fin_RENDEZVOUSPHASE)) | (! ((! (STANDBYMODE & SAFEMODE)) S ((! (STANDBYMODE & SAFEMODE)) & stowed))))))) & (((! Lin_RENDEZVOUSPHASE) S ((! Lin_RENDEZVOUSPHASE) & Fin_RENDEZVOUSPHASE)) -> (((! stowed) S ((! stowed) & Fin_RENDEZVOUSPHASE)) | (! ((! (STANDBYMODE & SAFEMODE)) S ((! (STANDBYMODE & SAFEMODE)) & stowed))))))",
            "pctl": "P>=1[((G ((! (Fin_RENDEZVOUSPHASE & (! LAST))) | (X (Lin_RENDEZVOUSPHASE R (stowed => (P>=1[((! Lin_RENDEZVOUSPHASE) U (STANDBYMODE & SAFEMODE))])))))) & (RENDEZVOUSPHASE => (Lin_RENDEZVOUSPHASE | (Lin_RENDEZVOUSPHASE R (stowed => (P>=1[((! Lin_RENDEZVOUSPHASE) U (STANDBYMODE & SAFEMODE))]))))))]",
            "ptExpanded": "((H (((! RENDEZVOUSPHASE) & (Y RENDEZVOUSPHASE)) -> (Y (((! stowed) S ((! stowed) & (RENDEZVOUSPHASE & (Z (! RENDEZVOUSPHASE))))) | (! ((! (STANDBYMODE & SAFEMODE)) S ((! (STANDBYMODE & SAFEMODE)) & stowed))))))) & (((! ((! RENDEZVOUSPHASE) & (Y RENDEZVOUSPHASE))) S ((! ((! RENDEZVOUSPHASE) & (Y RENDEZVOUSPHASE))) & (RENDEZVOUSPHASE & (Z (! RENDEZVOUSPHASE))))) -> (((! stowed) S ((! stowed) & (RENDEZVOUSPHASE & (Z (! RENDEZVOUSPHASE))))) | (! ((! (STANDBYMODE & SAFEMODE)) S ((! (STANDBYMODE & SAFEMODE)) & stowed))))))",
            "CoCoSpecCode": "(H(((not (RENDEZVOUSPHASE) and YtoPre(RENDEZVOUSPHASE)) => YtoPre((SI((RENDEZVOUSPHASE and ZtoPre(not (RENDEZVOUSPHASE))),not (stowed)) or not (SI(stowed,not ((STANDBYMODE and SAFEMODE)))))))) and (SI((RENDEZVOUSPHASE and ZtoPre(not (RENDEZVOUSPHASE))),not ((not (RENDEZVOUSPHASE) and YtoPre(RENDEZVOUSPHASE)))) => (SI((RENDEZVOUSPHASE and ZtoPre(not (RENDEZVOUSPHASE))),not (stowed)) or not (SI(stowed,not ((STANDBYMODE and SAFEMODE)))))))",
            "ftExpanded": "((LAST V ((! ((((! RENDEZVOUSPHASE) & (! LAST)) & (X RENDEZVOUSPHASE)) & (! LAST))) | (X ((((RENDEZVOUSPHASE & (! LAST)) & (X (! RENDEZVOUSPHASE))) | LAST) V (stowed -> ((! (((RENDEZVOUSPHASE & (! LAST)) & (X (! RENDEZVOUSPHASE))) | LAST)) U (STANDBYMODE & SAFEMODE))))))) & (RENDEZVOUSPHASE -> ((((RENDEZVOUSPHASE & (! LAST)) & (X (! RENDEZVOUSPHASE))) | LAST) V (stowed -> ((! (((RENDEZVOUSPHASE & (! LAST)) & (X (! RENDEZVOUSPHASE))) | LAST)) U (STANDBYMODE & SAFEMODE))))))",
            "pctlExpanded": "P>=1[((G ((! (((! RENDEZVOUSPHASE) & (X RENDEZVOUSPHASE)) & (! false))) | (X ((RENDEZVOUSPHASE & (X (! RENDEZVOUSPHASE))) R (stowed => (P>=1[((! (RENDEZVOUSPHASE & (X (! RENDEZVOUSPHASE)))) U (STANDBYMODE & SAFEMODE))])))))) & (RENDEZVOUSPHASE => ((RENDEZVOUSPHASE & (X (! RENDEZVOUSPHASE))) | ((RENDEZVOUSPHASE & (X (! RENDEZVOUSPHASE))) R (stowed => (P>=1[((! (RENDEZVOUSPHASE & (X (! RENDEZVOUSPHASE)))) U (STANDBYMODE & SAFEMODE))]))))))]",
            "ftInfAUExpanded": "((G ((! ((! RENDEZVOUSPHASE) & (X RENDEZVOUSPHASE))) | (X ((RENDEZVOUSPHASE & (X (! RENDEZVOUSPHASE))) V (stowed -> ((! (RENDEZVOUSPHASE & (X (! RENDEZVOUSPHASE)))) U (STANDBYMODE & SAFEMODE))))))) & (RENDEZVOUSPHASE -> ((RENDEZVOUSPHASE & (X (! RENDEZVOUSPHASE))) V (stowed -> ((! (RENDEZVOUSPHASE & (X (! RENDEZVOUSPHASE)))) U (STANDBYMODE & SAFEMODE))))))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc394e-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R19",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Autonomously acquire the escape\nprocedure and use it to leave Mer-\ncury if necessary",
        "comments": "",
        "fulltext": "Upon need_mercury_escape BepiColmbo shall immediately satisfy acquire_escape_procedure & escape",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "need_mercury_escape",
                "acquire_escape_procedure",
                "escape"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(need_mercury_escape)",
            "regular_condition": "(need_mercury_escape)",
            "conditionTextRange": [
                0,
                23
            ],
            "component_name": "BepiColmbo",
            "componentTextRange": [
                25,
                34
            ],
            "timingTextRange": [
                42,
                52
            ],
            "post_condition": "(acquire_escape_procedure & escape)",
            "responseTextRange": [
                54,
                94
            ],
            "diagramVariables": "TC = <b><i>(need_mercury_escape)</i></b>, Response = <b><i>(acquire_escape_procedure & escape)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(need_mercury_escape)</i></b> is true and any point in the interval where <b><i>(need_mercury_escape)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "need_mercury_escape",
            "regular_condition_unexp_ft": "need_mercury_escape",
            "regular_condition_unexp_pctl": "need_mercury_escape",
            "regular_condition_SMV_pt": "need_mercury_escape",
            "regular_condition_SMV_ft": "need_mercury_escape",
            "regular_condition_PRISM_pctl": "need_mercury_escape",
            "post_condition_unexp_pt": "(acquire_escape_procedure & escape)",
            "post_condition_unexp_ft": "(acquire_escape_procedure & escape)",
            "post_condition_unexp_pctl": "(acquire_escape_procedure & escape)",
            "post_condition_SMV_pt": "(acquire_escape_procedure & escape)",
            "post_condition_SMV_ft": "(acquire_escape_procedure & escape)",
            "post_condition_PRISM_pctl": "(acquire_escape_procedure & escape)",
            "ft": "((LAST V (((! need_mercury_escape) & ((! LAST) & (X need_mercury_escape))) -> (X (acquire_escape_procedure & escape)))) & (need_mercury_escape -> (acquire_escape_procedure & escape)))",
            "pt": "(H ((need_mercury_escape & (Z (! need_mercury_escape))) -> (acquire_escape_procedure & escape)))",
            "pctl": "P>=1[((G (((! need_mercury_escape) & (X need_mercury_escape)) => (X (P>=1[(acquire_escape_procedure & escape)])))) & (need_mercury_escape => (P>=1[(acquire_escape_procedure & escape)])))]",
            "ptExpanded": "(H ((need_mercury_escape & (Z (! need_mercury_escape))) -> (acquire_escape_procedure & escape)))",
            "CoCoSpecCode": "H(((need_mercury_escape and ZtoPre(not (need_mercury_escape))) => (acquire_escape_procedure and escape)))",
            "ftExpanded": "((LAST V (((! need_mercury_escape) & ((! LAST) & (X need_mercury_escape))) -> (X (acquire_escape_procedure & escape)))) & (need_mercury_escape -> (acquire_escape_procedure & escape)))",
            "pctlExpanded": "P>=1[((G (((! need_mercury_escape) & (X need_mercury_escape)) => (X (P>=1[(acquire_escape_procedure & escape)])))) & (need_mercury_escape => (P>=1[(acquire_escape_procedure & escape)])))]",
            "ftInfAUExpanded": "((G (((! need_mercury_escape) & (X need_mercury_escape)) -> (X (acquire_escape_procedure & escape)))) & (need_mercury_escape -> (acquire_escape_procedure & escape)))",
            "component": "BepiColmbo"
        },
        "status": "",
        "_id": "eafc394f-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R3",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "In order to ensure that PIXL’s XRF\nand OFS subsystems are behaving\nin the expected manner, the instru-\nment’s performance is periodically\nchecked by measuring the onboard\ncalibration target, and then compar-\ning the results of those measure-\nments against pre-flight measure-\nments of those standards.",
        "comments": "",
        "fulltext": "whenever timetocheck=1 PIXL shall at the next timepoint satisfy check ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "timetocheck",
                "check"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(timetocheck = 1)",
            "regular_condition": "(timetocheck = 1)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "PIXL",
            "componentTextRange": [
                23,
                26
            ],
            "timingTextRange": [
                34,
                54
            ],
            "post_condition": "(check)",
            "responseTextRange": [
                56,
                68
            ],
            "diagramVariables": "CC = <b><i>(timetocheck = 1)</i></b>, Response = <b><i>(check)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(timetocheck = 1)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(timetocheck = 1)",
            "regular_condition_unexp_ft": "(timetocheck = 1)",
            "regular_condition_unexp_pctl": "(timetocheck = 1)",
            "regular_condition_SMV_pt": "(timetocheck = 1)",
            "regular_condition_SMV_ft": "(timetocheck = 1)",
            "regular_condition_PRISM_pctl": "(timetocheck = 1)",
            "post_condition_unexp_pt": "check",
            "post_condition_unexp_ft": "check",
            "post_condition_unexp_pctl": "check",
            "post_condition_SMV_pt": "check",
            "post_condition_SMV_ft": "check",
            "post_condition_PRISM_pctl": "check",
            "ft": "(LAST V ((timetocheck = 1) -> (LAST | (X check))))",
            "pt": "(H ((Y (timetocheck = 1)) -> (check | (Z FALSE))))",
            "pctl": "P>=1[(G ((timetocheck = 1) => (P>=1[(LAST | (X check))])))]",
            "ptExpanded": "(H ((Y (timetocheck = 1)) -> (check | (Z FALSE))))",
            "CoCoSpecCode": "H((YtoPre((timetocheck = 1)) => (check or ZtoPre(false))))",
            "ftExpanded": "(LAST V ((timetocheck = 1) -> (LAST | (X check))))",
            "pctlExpanded": "P>=1[(G ((timetocheck = 1) => (P>=1[(false | (X check))])))]",
            "ftInfAUExpanded": "(G ((timetocheck = 1) -> (X check)))",
            "component": "PIXL"
        },
        "status": "",
        "_id": "eafc3950-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R58-A",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Astrobee can lose signal, when sig-\nnal is lost Astrobee enters LOS-\nMode",
        "comments": "",
        "fulltext": "whenever LostSignal Astrobee shall immediately satisfy LOSMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "LostSignal",
                "LOSMode"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(LostSignal)",
            "regular_condition": "(LostSignal)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                20,
                27
            ],
            "timingTextRange": [
                35,
                45
            ],
            "post_condition": "(LOSMode)",
            "responseTextRange": [
                47,
                61
            ],
            "diagramVariables": "CC = <b><i>(LostSignal)</i></b>, Response = <b><i>(LOSMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(LostSignal)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "LostSignal",
            "regular_condition_unexp_ft": "LostSignal",
            "regular_condition_unexp_pctl": "LostSignal",
            "regular_condition_SMV_pt": "LostSignal",
            "regular_condition_SMV_ft": "LostSignal",
            "regular_condition_PRISM_pctl": "LostSignal",
            "post_condition_unexp_pt": "LOSMode",
            "post_condition_unexp_ft": "LOSMode",
            "post_condition_unexp_pctl": "LOSMode",
            "post_condition_SMV_pt": "LOSMode",
            "post_condition_SMV_ft": "LOSMode",
            "post_condition_PRISM_pctl": "LOSMode",
            "ft": "(LAST V (LostSignal -> LOSMode))",
            "pt": "(H (LostSignal -> LOSMode))",
            "pctl": "P>=1[(G (LostSignal => (P>=1[LOSMode])))]",
            "ptExpanded": "(H (LostSignal -> LOSMode))",
            "CoCoSpecCode": "H((LostSignal => LOSMode))",
            "ftExpanded": "(LAST V (LostSignal -> LOSMode))",
            "pctlExpanded": "P>=1[(G (LostSignal => (P>=1[LOSMode])))]",
            "ftInfAUExpanded": "(G (LostSignal -> LOSMode))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc6000-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R70-2",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The fourth phase is the post-capture\nphase in which captured target\nsatellite is stabilized along with the\nservicing system",
        "comments": "",
        "fulltext": "Upon FourthPhase ServicingSatellite shall eventually satisfy Stabilization",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "FourthPhase",
                "Stabilization"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(FourthPhase)",
            "regular_condition": "(FourthPhase)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "ServicingSatellite",
            "componentTextRange": [
                17,
                34
            ],
            "timingTextRange": [
                42,
                51
            ],
            "post_condition": "(Stabilization)",
            "responseTextRange": [
                53,
                73
            ],
            "diagramVariables": "TC = <b><i>(FourthPhase)</i></b>, Response = <b><i>(Stabilization)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(FourthPhase)</i></b> is true and any point in the interval where <b><i>(FourthPhase)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "FourthPhase",
            "regular_condition_unexp_ft": "FourthPhase",
            "regular_condition_unexp_pctl": "FourthPhase",
            "regular_condition_SMV_pt": "FourthPhase",
            "regular_condition_SMV_ft": "FourthPhase",
            "regular_condition_PRISM_pctl": "FourthPhase",
            "post_condition_unexp_pt": "Stabilization",
            "post_condition_unexp_ft": "Stabilization",
            "post_condition_unexp_pctl": "Stabilization",
            "post_condition_SMV_pt": "Stabilization",
            "post_condition_SMV_ft": "Stabilization",
            "post_condition_PRISM_pctl": "Stabilization",
            "ft": "((LAST V (((! FourthPhase) & ((! LAST) & (X FourthPhase))) -> (X ((! LAST) U Stabilization)))) & (FourthPhase -> ((! LAST) U Stabilization)))",
            "pt": "((H (! FourthPhase)) | (! ((! Stabilization) S ((! Stabilization) & (FourthPhase & (Z (! FourthPhase)))))))",
            "pctl": "P>=1[((G (((! FourthPhase) & (X FourthPhase)) => (X (P>=1[(F Stabilization)])))) & (FourthPhase => (P>=1[(F Stabilization)])))]",
            "ptExpanded": "((H (! FourthPhase)) | (! ((! Stabilization) S ((! Stabilization) & (FourthPhase & (Z (! FourthPhase)))))))",
            "CoCoSpecCode": "(H(not (FourthPhase)) or not (SI((FourthPhase and ZtoPre(not (FourthPhase))),not (Stabilization))))",
            "ftExpanded": "((LAST V (((! FourthPhase) & ((! LAST) & (X FourthPhase))) -> (X ((! LAST) U Stabilization)))) & (FourthPhase -> ((! LAST) U Stabilization)))",
            "pctlExpanded": "P>=1[((G (((! FourthPhase) & (X FourthPhase)) => (X (P>=1[(F Stabilization)])))) & (FourthPhase => (P>=1[(F Stabilization)])))]",
            "ftInfAUExpanded": "((G (((! FourthPhase) & (X FourthPhase)) -> (X (F Stabilization)))) & (FourthPhase -> (F Stabilization)))",
            "component": "ServicingSatellite"
        },
        "status": "",
        "_id": "eafc6001-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R63-B",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The robot can periodically update\nmulti-sensor 3D maps of the ve-\nhicle. RFID quality tracking can\nall help flight controllers understand\nsystem status",
        "comments": "",
        "fulltext": "Whenever TimeForRFID Astrobee shall eventually satisfy RFIDSurvey",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "TimeForRFID",
                "RFIDSurvey"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(TimeForRFID)",
            "regular_condition": "(TimeForRFID)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                21,
                28
            ],
            "timingTextRange": [
                36,
                45
            ],
            "post_condition": "(RFIDSurvey)",
            "responseTextRange": [
                47,
                64
            ],
            "diagramVariables": "CC = <b><i>(TimeForRFID)</i></b>, Response = <b><i>(RFIDSurvey)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(TimeForRFID)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "TimeForRFID",
            "regular_condition_unexp_ft": "TimeForRFID",
            "regular_condition_unexp_pctl": "TimeForRFID",
            "regular_condition_SMV_pt": "TimeForRFID",
            "regular_condition_SMV_ft": "TimeForRFID",
            "regular_condition_PRISM_pctl": "TimeForRFID",
            "post_condition_unexp_pt": "RFIDSurvey",
            "post_condition_unexp_ft": "RFIDSurvey",
            "post_condition_unexp_pctl": "RFIDSurvey",
            "post_condition_SMV_pt": "RFIDSurvey",
            "post_condition_SMV_ft": "RFIDSurvey",
            "post_condition_PRISM_pctl": "RFIDSurvey",
            "ft": "(LAST V (TimeForRFID -> ((! LAST) U RFIDSurvey)))",
            "pt": "((H (! TimeForRFID)) | (! ((! RFIDSurvey) S ((! RFIDSurvey) & TimeForRFID))))",
            "pctl": "P>=1[(G (TimeForRFID => (P>=1[(F RFIDSurvey)])))]",
            "ptExpanded": "((H (! TimeForRFID)) | (! ((! RFIDSurvey) S ((! RFIDSurvey) & TimeForRFID))))",
            "CoCoSpecCode": "(H(not (TimeForRFID)) or not (SI(TimeForRFID,not (RFIDSurvey))))",
            "ftExpanded": "(LAST V (TimeForRFID -> ((! LAST) U RFIDSurvey)))",
            "pctlExpanded": "P>=1[(G (TimeForRFID => (P>=1[(F RFIDSurvey)])))]",
            "ftInfAUExpanded": "(G (TimeForRFID -> (F RFIDSurvey)))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc6002-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R13-E",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "During the Berthing Phase the\nonly modes of operation in use is\nSTANDBY and SAFE mode which\nshould both be done when the IM is\nin a stowed configuration",
        "comments": "",
        "fulltext": "In BERTHINGPHASE whenever stowed IM shall eventually satisfy STANDBYMODE & SAFEMODE",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "BERTHINGPHASE",
                "stowed",
                "STANDBYMODE",
                "SAFEMODE"
            ],
            "scope_mode": "BERTHINGPHASE",
            "scopeTextRange": [
                0,
                15
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(stowed)",
            "regular_condition": "(stowed)",
            "conditionTextRange": [
                17,
                31
            ],
            "component_name": "IM",
            "componentTextRange": [
                33,
                34
            ],
            "timingTextRange": [
                42,
                51
            ],
            "post_condition": "(STANDBYMODE & SAFEMODE)",
            "responseTextRange": [
                53,
                82
            ],
            "diagramVariables": "M = <b><i>BERTHINGPHASE</i></b>, CC = <b><i>(stowed)</i></b>, Response = <b><i>(STANDBYMODE & SAFEMODE)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>BERTHINGPHASE</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(stowed)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BERTHINGPHASE",
            "scope_mode_ft": "BERTHINGPHASE",
            "scope_mode_pctl": "BERTHINGPHASE",
            "regular_condition_unexp_pt": "stowed",
            "regular_condition_unexp_ft": "stowed",
            "regular_condition_unexp_pctl": "stowed",
            "regular_condition_SMV_pt": "stowed",
            "regular_condition_SMV_ft": "stowed",
            "regular_condition_PRISM_pctl": "stowed",
            "post_condition_unexp_pt": "(STANDBYMODE & SAFEMODE)",
            "post_condition_unexp_ft": "(STANDBYMODE & SAFEMODE)",
            "post_condition_unexp_pctl": "(STANDBYMODE & SAFEMODE)",
            "post_condition_SMV_pt": "(STANDBYMODE & SAFEMODE)",
            "post_condition_SMV_ft": "(STANDBYMODE & SAFEMODE)",
            "post_condition_PRISM_pctl": "(STANDBYMODE & SAFEMODE)",
            "ft": "((LAST V ((! (Fin_BERTHINGPHASE & (! LAST))) | (X ((Lin_BERTHINGPHASE | LAST) V (stowed -> ((! (Lin_BERTHINGPHASE | LAST)) U (STANDBYMODE & SAFEMODE))))))) & (BERTHINGPHASE -> ((Lin_BERTHINGPHASE | LAST) V (stowed -> ((! (Lin_BERTHINGPHASE | LAST)) U (STANDBYMODE & SAFEMODE))))))",
            "pt": "((H (Lin_BERTHINGPHASE -> (Y (((! stowed) S ((! stowed) & Fin_BERTHINGPHASE)) | (! ((! (STANDBYMODE & SAFEMODE)) S ((! (STANDBYMODE & SAFEMODE)) & stowed))))))) & (((! Lin_BERTHINGPHASE) S ((! Lin_BERTHINGPHASE) & Fin_BERTHINGPHASE)) -> (((! stowed) S ((! stowed) & Fin_BERTHINGPHASE)) | (! ((! (STANDBYMODE & SAFEMODE)) S ((! (STANDBYMODE & SAFEMODE)) & stowed))))))",
            "pctl": "P>=1[((G ((! (Fin_BERTHINGPHASE & (! LAST))) | (X (Lin_BERTHINGPHASE R (stowed => (P>=1[((! Lin_BERTHINGPHASE) U (STANDBYMODE & SAFEMODE))])))))) & (BERTHINGPHASE => (Lin_BERTHINGPHASE | (Lin_BERTHINGPHASE R (stowed => (P>=1[((! Lin_BERTHINGPHASE) U (STANDBYMODE & SAFEMODE))]))))))]",
            "ptExpanded": "((H (((! BERTHINGPHASE) & (Y BERTHINGPHASE)) -> (Y (((! stowed) S ((! stowed) & (BERTHINGPHASE & (Z (! BERTHINGPHASE))))) | (! ((! (STANDBYMODE & SAFEMODE)) S ((! (STANDBYMODE & SAFEMODE)) & stowed))))))) & (((! ((! BERTHINGPHASE) & (Y BERTHINGPHASE))) S ((! ((! BERTHINGPHASE) & (Y BERTHINGPHASE))) & (BERTHINGPHASE & (Z (! BERTHINGPHASE))))) -> (((! stowed) S ((! stowed) & (BERTHINGPHASE & (Z (! BERTHINGPHASE))))) | (! ((! (STANDBYMODE & SAFEMODE)) S ((! (STANDBYMODE & SAFEMODE)) & stowed))))))",
            "CoCoSpecCode": "(H(((not (BERTHINGPHASE) and YtoPre(BERTHINGPHASE)) => YtoPre((SI((BERTHINGPHASE and ZtoPre(not (BERTHINGPHASE))),not (stowed)) or not (SI(stowed,not ((STANDBYMODE and SAFEMODE)))))))) and (SI((BERTHINGPHASE and ZtoPre(not (BERTHINGPHASE))),not ((not (BERTHINGPHASE) and YtoPre(BERTHINGPHASE)))) => (SI((BERTHINGPHASE and ZtoPre(not (BERTHINGPHASE))),not (stowed)) or not (SI(stowed,not ((STANDBYMODE and SAFEMODE)))))))",
            "ftExpanded": "((LAST V ((! ((((! BERTHINGPHASE) & (! LAST)) & (X BERTHINGPHASE)) & (! LAST))) | (X ((((BERTHINGPHASE & (! LAST)) & (X (! BERTHINGPHASE))) | LAST) V (stowed -> ((! (((BERTHINGPHASE & (! LAST)) & (X (! BERTHINGPHASE))) | LAST)) U (STANDBYMODE & SAFEMODE))))))) & (BERTHINGPHASE -> ((((BERTHINGPHASE & (! LAST)) & (X (! BERTHINGPHASE))) | LAST) V (stowed -> ((! (((BERTHINGPHASE & (! LAST)) & (X (! BERTHINGPHASE))) | LAST)) U (STANDBYMODE & SAFEMODE))))))",
            "pctlExpanded": "P>=1[((G ((! (((! BERTHINGPHASE) & (X BERTHINGPHASE)) & (! false))) | (X ((BERTHINGPHASE & (X (! BERTHINGPHASE))) R (stowed => (P>=1[((! (BERTHINGPHASE & (X (! BERTHINGPHASE)))) U (STANDBYMODE & SAFEMODE))])))))) & (BERTHINGPHASE => ((BERTHINGPHASE & (X (! BERTHINGPHASE))) | ((BERTHINGPHASE & (X (! BERTHINGPHASE))) R (stowed => (P>=1[((! (BERTHINGPHASE & (X (! BERTHINGPHASE)))) U (STANDBYMODE & SAFEMODE))]))))))]",
            "ftInfAUExpanded": "((G ((! ((! BERTHINGPHASE) & (X BERTHINGPHASE))) | (X ((BERTHINGPHASE & (X (! BERTHINGPHASE))) V (stowed -> ((! (BERTHINGPHASE & (X (! BERTHINGPHASE)))) U (STANDBYMODE & SAFEMODE))))))) & (BERTHINGPHASE -> ((BERTHINGPHASE & (X (! BERTHINGPHASE))) V (stowed -> ((! (BERTHINGPHASE & (X (! BERTHINGPHASE)))) U (STANDBYMODE & SAFEMODE))))))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc6003-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R41",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The vehicle remains in the thrust-\nborne mode (TB) as long as kgs <=\n20.0 knots and Hover Control (HC)\nmode is selected.",
        "comments": "",
        "fulltext": "In HCmode whenever TBMode & Kgs <= 20 LPC shall always satisfy TBmode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "HCmode",
                "TBMode",
                "Kgs",
                "TBmode"
            ],
            "scope_mode": "HCmode",
            "scopeTextRange": [
                0,
                8
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(TBMode & Kgs <= 20)",
            "regular_condition": "(TBMode & Kgs <= 20)",
            "conditionTextRange": [
                10,
                36
            ],
            "component_name": "LPC",
            "componentTextRange": [
                38,
                40
            ],
            "timingTextRange": [
                48,
                53
            ],
            "post_condition": "(TBmode)",
            "responseTextRange": [
                55,
                68
            ],
            "diagramVariables": "M = <b><i>HCmode</i></b>, CC = <b><i>(TBMode & Kgs <= 20)</i></b>, Response = <b><i>(TBmode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>HCmode</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(TBMode & Kgs <= 20)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_always_satisfaction.svg",
            "scope_mode_pt": "HCmode",
            "scope_mode_ft": "HCmode",
            "scope_mode_pctl": "HCmode",
            "regular_condition_unexp_pt": "(TBMode & (Kgs <= 20))",
            "regular_condition_unexp_ft": "(TBMode & (Kgs <= 20))",
            "regular_condition_unexp_pctl": "(TBMode & (Kgs <= 20))",
            "regular_condition_SMV_pt": "(TBMode & (Kgs <= 20))",
            "regular_condition_SMV_ft": "(TBMode & (Kgs <= 20))",
            "regular_condition_PRISM_pctl": "(TBMode & (Kgs <= 20))",
            "post_condition_unexp_pt": "TBmode",
            "post_condition_unexp_ft": "TBmode",
            "post_condition_unexp_pctl": "TBmode",
            "post_condition_SMV_pt": "TBmode",
            "post_condition_SMV_ft": "TBmode",
            "post_condition_PRISM_pctl": "TBmode",
            "ft": "((LAST V ((! (Fin_HCmode & (! LAST))) | (X ((Lin_HCmode | LAST) V ((TBMode & (Kgs <= 20)) -> ((Lin_HCmode | LAST) V TBmode)))))) & (HCmode -> ((Lin_HCmode | LAST) V ((TBMode & (Kgs <= 20)) -> ((Lin_HCmode | LAST) V TBmode)))))",
            "pt": "((H (Lin_HCmode -> (Y ((((! (TBMode & (Kgs <= 20))) S ((! (TBMode & (Kgs <= 20))) & Fin_HCmode)) | TBmode) S ((((! (TBMode & (Kgs <= 20))) S ((! (TBMode & (Kgs <= 20))) & Fin_HCmode)) | TBmode) & Fin_HCmode))))) & (((! Lin_HCmode) S ((! Lin_HCmode) & Fin_HCmode)) -> ((((! (TBMode & (Kgs <= 20))) S ((! (TBMode & (Kgs <= 20))) & Fin_HCmode)) | TBmode) S ((((! (TBMode & (Kgs <= 20))) S ((! (TBMode & (Kgs <= 20))) & Fin_HCmode)) | TBmode) & Fin_HCmode))))",
            "pctl": "P>=1[((G ((! (Fin_HCmode & (! LAST))) | (X (Lin_HCmode R ((TBMode & (Kgs <= 20)) => (P>=1[(Lin_HCmode R TBmode)])))))) & (HCmode => (Lin_HCmode | (Lin_HCmode R ((TBMode & (Kgs <= 20)) => (P>=1[(Lin_HCmode R TBmode)]))))))]",
            "ptExpanded": "((H (((! HCmode) & (Y HCmode)) -> (Y ((((! (TBMode & (Kgs <= 20))) S ((! (TBMode & (Kgs <= 20))) & (HCmode & (Z (! HCmode))))) | TBmode) S ((((! (TBMode & (Kgs <= 20))) S ((! (TBMode & (Kgs <= 20))) & (HCmode & (Z (! HCmode))))) | TBmode) & (HCmode & (Z (! HCmode)))))))) & (((! ((! HCmode) & (Y HCmode))) S ((! ((! HCmode) & (Y HCmode))) & (HCmode & (Z (! HCmode))))) -> ((((! (TBMode & (Kgs <= 20))) S ((! (TBMode & (Kgs <= 20))) & (HCmode & (Z (! HCmode))))) | TBmode) S ((((! (TBMode & (Kgs <= 20))) S ((! (TBMode & (Kgs <= 20))) & (HCmode & (Z (! HCmode))))) | TBmode) & (HCmode & (Z (! HCmode)))))))",
            "CoCoSpecCode": "(H(((not (HCmode) and YtoPre(HCmode)) => YtoPre(SI((HCmode and ZtoPre(not (HCmode))),(SI((HCmode and ZtoPre(not (HCmode))),not ((TBMode and (Kgs <= 20)))) or TBmode))))) and (SI((HCmode and ZtoPre(not (HCmode))),not ((not (HCmode) and YtoPre(HCmode)))) => SI((HCmode and ZtoPre(not (HCmode))),(SI((HCmode and ZtoPre(not (HCmode))),not ((TBMode and (Kgs <= 20)))) or TBmode))))",
            "ftExpanded": "((LAST V ((! ((((! HCmode) & (! LAST)) & (X HCmode)) & (! LAST))) | (X ((((HCmode & (! LAST)) & (X (! HCmode))) | LAST) V ((TBMode & (Kgs <= 20)) -> ((((HCmode & (! LAST)) & (X (! HCmode))) | LAST) V TBmode)))))) & (HCmode -> ((((HCmode & (! LAST)) & (X (! HCmode))) | LAST) V ((TBMode & (Kgs <= 20)) -> ((((HCmode & (! LAST)) & (X (! HCmode))) | LAST) V TBmode)))))",
            "pctlExpanded": "P>=1[((G ((! (((! HCmode) & (X HCmode)) & (! false))) | (X ((HCmode & (X (! HCmode))) R ((TBMode & (Kgs <= 20)) => (P>=1[((HCmode & (X (! HCmode))) R TBmode)])))))) & (HCmode => ((HCmode & (X (! HCmode))) | ((HCmode & (X (! HCmode))) R ((TBMode & (Kgs <= 20)) => (P>=1[((HCmode & (X (! HCmode))) R TBmode)]))))))]",
            "ftInfAUExpanded": "((G ((! ((! HCmode) & (X HCmode))) | (X ((HCmode & (X (! HCmode))) V ((TBMode & (Kgs <= 20)) -> ((HCmode & (X (! HCmode))) V TBmode)))))) & (HCmode -> ((HCmode & (X (! HCmode))) V ((TBMode & (Kgs <= 20)) -> ((HCmode & (X (! HCmode))) V TBmode)))))",
            "component": "LPC"
        },
        "status": "",
        "_id": "eafc6004-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R28-C",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "in charge of providing the ground\nsegment with telemetry data about\nthe state and health of the space-\ncraft, therefore this service shall\nbe able to automatically transmit\ntelemetry data.",
        "comments": "",
        "fulltext": "Whenever groundsegmentconnection & !telemtrydata Cubesat shall until telemtrydata satisfy Transmit",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "groundsegmentconnection",
                "telemtrydata",
                "Transmit"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(groundsegmentconnection & ! telemtrydata)",
            "regular_condition": "(groundsegmentconnection & ! telemtrydata)",
            "conditionTextRange": [
                0,
                47
            ],
            "component_name": "Cubesat",
            "componentTextRange": [
                49,
                55
            ],
            "stop_condition": "(telemtrydata)",
            "timingTextRange": [
                63,
                80
            ],
            "post_condition": "(Transmit)",
            "responseTextRange": [
                82,
                97
            ],
            "diagramVariables": "CC = <b><i>(groundsegmentconnection & ! telemtrydata)</i></b>, SC = <b><i>(telemtrydata)</i></b>, Response = <b><i>(Transmit)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(groundsegmentconnection & ! telemtrydata)</i></b> is true.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(groundsegmentconnection & (! telemtrydata))",
            "regular_condition_unexp_ft": "(groundsegmentconnection & (! telemtrydata))",
            "regular_condition_unexp_pctl": "(groundsegmentconnection & (! telemtrydata))",
            "regular_condition_SMV_pt": "(groundsegmentconnection & (! telemtrydata))",
            "regular_condition_SMV_ft": "(groundsegmentconnection & (! telemtrydata))",
            "regular_condition_PRISM_pctl": "(groundsegmentconnection & (! telemtrydata))",
            "post_condition_unexp_pt": "Transmit",
            "post_condition_unexp_ft": "Transmit",
            "post_condition_unexp_pctl": "Transmit",
            "post_condition_SMV_pt": "Transmit",
            "post_condition_SMV_ft": "Transmit",
            "post_condition_PRISM_pctl": "Transmit",
            "stop_condition_unexp_pt": "telemtrydata",
            "stop_condition_unexp_ft": "telemtrydata",
            "stop_condition_PRISM_pctl": "telemtrydata",
            "stop_condition_SMV_pt": "telemtrydata",
            "stop_condition_SMV_ft": "telemtrydata",
            "ft": "(LAST V ((groundsegmentconnection & (! telemtrydata)) -> ((telemtrydata V (Transmit | telemtrydata)) | (LAST V Transmit))))",
            "pt": "(H ((H (! (groundsegmentconnection & (! telemtrydata)))) | (((! telemtrydata) S ((! telemtrydata) & (groundsegmentconnection & (! telemtrydata)))) -> Transmit)))",
            "pctl": "P>=1[(G ((groundsegmentconnection & (! telemtrydata)) => (P>=1[((undefined R (Transmit | undefined)) | (LAST R Transmit))])))]",
            "ptExpanded": "(H ((H (! (groundsegmentconnection & (! telemtrydata)))) | (((! telemtrydata) S ((! telemtrydata) & (groundsegmentconnection & (! telemtrydata)))) -> Transmit)))",
            "CoCoSpecCode": "H((H(not ((groundsegmentconnection and not (telemtrydata)))) or (SI((groundsegmentconnection and not (telemtrydata)),not (telemtrydata)) => Transmit)))",
            "ftExpanded": "(LAST V ((groundsegmentconnection & (! telemtrydata)) -> ((telemtrydata V (Transmit | telemtrydata)) | (LAST V Transmit))))",
            "pctlExpanded": "P>=1[(G ((groundsegmentconnection & (! telemtrydata)) => (P>=1[((telemtrydata R (Transmit | telemtrydata)) | (false R Transmit))])))]",
            "ftInfAUExpanded": "(G ((groundsegmentconnection & (! telemtrydata)) -> (telemtrydata V (Transmit | telemtrydata))))",
            "component": "Cubesat"
        },
        "status": "",
        "_id": "eafc6005-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R20-A",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Autonomously detect the presence\nof high solar irradiation",
        "comments": "",
        "fulltext": "whenever high_solar BepiColombo shall eventually satisfy detect",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "high_solar",
                "detect"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(high_solar)",
            "regular_condition": "(high_solar)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "BepiColombo",
            "componentTextRange": [
                20,
                30
            ],
            "timingTextRange": [
                38,
                47
            ],
            "post_condition": "(detect)",
            "responseTextRange": [
                49,
                62
            ],
            "diagramVariables": "CC = <b><i>(high_solar)</i></b>, Response = <b><i>(detect)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(high_solar)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "high_solar",
            "regular_condition_unexp_ft": "high_solar",
            "regular_condition_unexp_pctl": "high_solar",
            "regular_condition_SMV_pt": "high_solar",
            "regular_condition_SMV_ft": "high_solar",
            "regular_condition_PRISM_pctl": "high_solar",
            "post_condition_unexp_pt": "detect",
            "post_condition_unexp_ft": "detect",
            "post_condition_unexp_pctl": "detect",
            "post_condition_SMV_pt": "detect",
            "post_condition_SMV_ft": "detect",
            "post_condition_PRISM_pctl": "detect",
            "ft": "(LAST V (high_solar -> ((! LAST) U detect)))",
            "pt": "((H (! high_solar)) | (! ((! detect) S ((! detect) & high_solar))))",
            "pctl": "P>=1[(G (high_solar => (P>=1[(F detect)])))]",
            "ptExpanded": "((H (! high_solar)) | (! ((! detect) S ((! detect) & high_solar))))",
            "CoCoSpecCode": "(H(not (high_solar)) or not (SI(high_solar,not (detect))))",
            "ftExpanded": "(LAST V (high_solar -> ((! LAST) U detect)))",
            "pctlExpanded": "P>=1[(G (high_solar => (P>=1[(F detect)])))]",
            "ftInfAUExpanded": "(G (high_solar -> (F detect)))",
            "component": "BepiColombo"
        },
        "status": "",
        "_id": "eafc6006-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R4",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Once a safe target has been selected,\nthe spacecraft adjusts its trajectory\nin propulsive powered flight to land\nat the target.",
        "comments": "",
        "fulltext": "if safetargetlocated shuttle shall immediately satisfy AdjustToLand",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "safetargetlocated",
                "AdjustToLand"
            ],
            "qualifier_word": "if",
            "pre_condition": "(safetargetlocated)",
            "regular_condition": "(safetargetlocated)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "shuttle",
            "componentTextRange": [
                21,
                27
            ],
            "timingTextRange": [
                35,
                45
            ],
            "post_condition": "(AdjustToLand)",
            "responseTextRange": [
                47,
                66
            ],
            "diagramVariables": "TC = <b><i>(safetargetlocated)</i></b>, Response = <b><i>(AdjustToLand)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(safetargetlocated)</i></b> is true and any point in the interval where <b><i>(safetargetlocated)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "safetargetlocated",
            "regular_condition_unexp_ft": "safetargetlocated",
            "regular_condition_unexp_pctl": "safetargetlocated",
            "regular_condition_SMV_pt": "safetargetlocated",
            "regular_condition_SMV_ft": "safetargetlocated",
            "regular_condition_PRISM_pctl": "safetargetlocated",
            "post_condition_unexp_pt": "AdjustToLand",
            "post_condition_unexp_ft": "AdjustToLand",
            "post_condition_unexp_pctl": "AdjustToLand",
            "post_condition_SMV_pt": "AdjustToLand",
            "post_condition_SMV_ft": "AdjustToLand",
            "post_condition_PRISM_pctl": "AdjustToLand",
            "ft": "((LAST V (((! safetargetlocated) & ((! LAST) & (X safetargetlocated))) -> (X AdjustToLand))) & (safetargetlocated -> AdjustToLand))",
            "pt": "(H ((safetargetlocated & (Z (! safetargetlocated))) -> AdjustToLand))",
            "pctl": "P>=1[((G (((! safetargetlocated) & (X safetargetlocated)) => (X (P>=1[AdjustToLand])))) & (safetargetlocated => (P>=1[AdjustToLand])))]",
            "ptExpanded": "(H ((safetargetlocated & (Z (! safetargetlocated))) -> AdjustToLand))",
            "CoCoSpecCode": "H(((safetargetlocated and ZtoPre(not (safetargetlocated))) => AdjustToLand))",
            "ftExpanded": "((LAST V (((! safetargetlocated) & ((! LAST) & (X safetargetlocated))) -> (X AdjustToLand))) & (safetargetlocated -> AdjustToLand))",
            "pctlExpanded": "P>=1[((G (((! safetargetlocated) & (X safetargetlocated)) => (X (P>=1[AdjustToLand])))) & (safetargetlocated => (P>=1[AdjustToLand])))]",
            "ftInfAUExpanded": "((G (((! safetargetlocated) & (X safetargetlocated)) -> (X AdjustToLand))) & (safetargetlocated -> AdjustToLand))",
            "component": "shuttle"
        },
        "status": "",
        "_id": "eafc6007-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R58-B",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "During loss-of-signal (LOS) with\nthe ground, Astrobee continues to\nhold its position while recording\nand storing video on its internal file\nsystem.",
        "comments": "",
        "fulltext": "In LOSMode Astrobee shall always satisfy Hold & WorkInternally",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "LOSMode",
                "Hold",
                "WorkInternally"
            ],
            "scope_mode": "LOSMode",
            "scopeTextRange": [
                0,
                9
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                11,
                18
            ],
            "timingTextRange": [
                26,
                31
            ],
            "post_condition": "(Hold & WorkInternally)",
            "responseTextRange": [
                33,
                61
            ],
            "diagramVariables": "M = <b><i>LOSMode</i></b>, Response = <b><i>(Hold & WorkInternally)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>LOSMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "LOSMode",
            "scope_mode_ft": "LOSMode",
            "scope_mode_pctl": "LOSMode",
            "post_condition_unexp_pt": "(Hold & WorkInternally)",
            "post_condition_unexp_ft": "(Hold & WorkInternally)",
            "post_condition_unexp_pctl": "(Hold & WorkInternally)",
            "post_condition_SMV_pt": "(Hold & WorkInternally)",
            "post_condition_SMV_ft": "(Hold & WorkInternally)",
            "post_condition_PRISM_pctl": "(Hold & WorkInternally)",
            "ft": "(LAST V (LOSMode -> (Hold & WorkInternally)))",
            "pt": "(H (LOSMode -> (Hold & WorkInternally)))",
            "pctl": "P>=1[((G ((! (Fin_LOSMode & (! LAST))) | (X (P>=1[(Lin_LOSMode R (Hold & WorkInternally))])))) & (LOSMode => (Lin_LOSMode | (P>=1[(Lin_LOSMode R (Hold & WorkInternally))]))))]",
            "ptExpanded": "(H (LOSMode -> (Hold & WorkInternally)))",
            "CoCoSpecCode": "H((LOSMode => (Hold and WorkInternally)))",
            "ftExpanded": "(LAST V (LOSMode -> (Hold & WorkInternally)))",
            "pctlExpanded": "P>=1[((G ((! (((! LOSMode) & (X LOSMode)) & (! false))) | (X (P>=1[((LOSMode & (X (! LOSMode))) R (Hold & WorkInternally))])))) & (LOSMode => ((LOSMode & (X (! LOSMode))) | (P>=1[((LOSMode & (X (! LOSMode))) R (Hold & WorkInternally))]))))]",
            "ftInfAUExpanded": "(G (LOSMode -> (Hold & WorkInternally)))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc6008-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R13-F",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "During the Cargo delivery Phase the\nonly modes of operation in use is\nSTANDBY and SAFE mode which\nshould both be done when the IM is\nin a stowed configuration",
        "comments": "",
        "fulltext": "In CARGODELIVERYPHASE whenever stowed IM shall eventually satisfy STANDBYMODE & SAFEMODE",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "CARGODELIVERYPHASE",
                "stowed",
                "STANDBYMODE",
                "SAFEMODE"
            ],
            "scope_mode": "CARGODELIVERYPHASE",
            "scopeTextRange": [
                0,
                20
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(stowed)",
            "regular_condition": "(stowed)",
            "conditionTextRange": [
                22,
                36
            ],
            "component_name": "IM",
            "componentTextRange": [
                38,
                39
            ],
            "timingTextRange": [
                47,
                56
            ],
            "post_condition": "(STANDBYMODE & SAFEMODE)",
            "responseTextRange": [
                58,
                87
            ],
            "diagramVariables": "M = <b><i>CARGODELIVERYPHASE</i></b>, CC = <b><i>(stowed)</i></b>, Response = <b><i>(STANDBYMODE & SAFEMODE)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>CARGODELIVERYPHASE</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(stowed)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "CARGODELIVERYPHASE",
            "scope_mode_ft": "CARGODELIVERYPHASE",
            "scope_mode_pctl": "CARGODELIVERYPHASE",
            "regular_condition_unexp_pt": "stowed",
            "regular_condition_unexp_ft": "stowed",
            "regular_condition_unexp_pctl": "stowed",
            "regular_condition_SMV_pt": "stowed",
            "regular_condition_SMV_ft": "stowed",
            "regular_condition_PRISM_pctl": "stowed",
            "post_condition_unexp_pt": "(STANDBYMODE & SAFEMODE)",
            "post_condition_unexp_ft": "(STANDBYMODE & SAFEMODE)",
            "post_condition_unexp_pctl": "(STANDBYMODE & SAFEMODE)",
            "post_condition_SMV_pt": "(STANDBYMODE & SAFEMODE)",
            "post_condition_SMV_ft": "(STANDBYMODE & SAFEMODE)",
            "post_condition_PRISM_pctl": "(STANDBYMODE & SAFEMODE)",
            "ft": "((LAST V ((! (Fin_CARGODELIVERYPHASE & (! LAST))) | (X ((Lin_CARGODELIVERYPHASE | LAST) V (stowed -> ((! (Lin_CARGODELIVERYPHASE | LAST)) U (STANDBYMODE & SAFEMODE))))))) & (CARGODELIVERYPHASE -> ((Lin_CARGODELIVERYPHASE | LAST) V (stowed -> ((! (Lin_CARGODELIVERYPHASE | LAST)) U (STANDBYMODE & SAFEMODE))))))",
            "pt": "((H (Lin_CARGODELIVERYPHASE -> (Y (((! stowed) S ((! stowed) & Fin_CARGODELIVERYPHASE)) | (! ((! (STANDBYMODE & SAFEMODE)) S ((! (STANDBYMODE & SAFEMODE)) & stowed))))))) & (((! Lin_CARGODELIVERYPHASE) S ((! Lin_CARGODELIVERYPHASE) & Fin_CARGODELIVERYPHASE)) -> (((! stowed) S ((! stowed) & Fin_CARGODELIVERYPHASE)) | (! ((! (STANDBYMODE & SAFEMODE)) S ((! (STANDBYMODE & SAFEMODE)) & stowed))))))",
            "pctl": "P>=1[((G ((! (Fin_CARGODELIVERYPHASE & (! LAST))) | (X (Lin_CARGODELIVERYPHASE R (stowed => (P>=1[((! Lin_CARGODELIVERYPHASE) U (STANDBYMODE & SAFEMODE))])))))) & (CARGODELIVERYPHASE => (Lin_CARGODELIVERYPHASE | (Lin_CARGODELIVERYPHASE R (stowed => (P>=1[((! Lin_CARGODELIVERYPHASE) U (STANDBYMODE & SAFEMODE))]))))))]",
            "ptExpanded": "((H (((! CARGODELIVERYPHASE) & (Y CARGODELIVERYPHASE)) -> (Y (((! stowed) S ((! stowed) & (CARGODELIVERYPHASE & (Z (! CARGODELIVERYPHASE))))) | (! ((! (STANDBYMODE & SAFEMODE)) S ((! (STANDBYMODE & SAFEMODE)) & stowed))))))) & (((! ((! CARGODELIVERYPHASE) & (Y CARGODELIVERYPHASE))) S ((! ((! CARGODELIVERYPHASE) & (Y CARGODELIVERYPHASE))) & (CARGODELIVERYPHASE & (Z (! CARGODELIVERYPHASE))))) -> (((! stowed) S ((! stowed) & (CARGODELIVERYPHASE & (Z (! CARGODELIVERYPHASE))))) | (! ((! (STANDBYMODE & SAFEMODE)) S ((! (STANDBYMODE & SAFEMODE)) & stowed))))))",
            "CoCoSpecCode": "(H(((not (CARGODELIVERYPHASE) and YtoPre(CARGODELIVERYPHASE)) => YtoPre((SI((CARGODELIVERYPHASE and ZtoPre(not (CARGODELIVERYPHASE))),not (stowed)) or not (SI(stowed,not ((STANDBYMODE and SAFEMODE)))))))) and (SI((CARGODELIVERYPHASE and ZtoPre(not (CARGODELIVERYPHASE))),not ((not (CARGODELIVERYPHASE) and YtoPre(CARGODELIVERYPHASE)))) => (SI((CARGODELIVERYPHASE and ZtoPre(not (CARGODELIVERYPHASE))),not (stowed)) or not (SI(stowed,not ((STANDBYMODE and SAFEMODE)))))))",
            "ftExpanded": "((LAST V ((! ((((! CARGODELIVERYPHASE) & (! LAST)) & (X CARGODELIVERYPHASE)) & (! LAST))) | (X ((((CARGODELIVERYPHASE & (! LAST)) & (X (! CARGODELIVERYPHASE))) | LAST) V (stowed -> ((! (((CARGODELIVERYPHASE & (! LAST)) & (X (! CARGODELIVERYPHASE))) | LAST)) U (STANDBYMODE & SAFEMODE))))))) & (CARGODELIVERYPHASE -> ((((CARGODELIVERYPHASE & (! LAST)) & (X (! CARGODELIVERYPHASE))) | LAST) V (stowed -> ((! (((CARGODELIVERYPHASE & (! LAST)) & (X (! CARGODELIVERYPHASE))) | LAST)) U (STANDBYMODE & SAFEMODE))))))",
            "pctlExpanded": "P>=1[((G ((! (((! CARGODELIVERYPHASE) & (X CARGODELIVERYPHASE)) & (! false))) | (X ((CARGODELIVERYPHASE & (X (! CARGODELIVERYPHASE))) R (stowed => (P>=1[((! (CARGODELIVERYPHASE & (X (! CARGODELIVERYPHASE)))) U (STANDBYMODE & SAFEMODE))])))))) & (CARGODELIVERYPHASE => ((CARGODELIVERYPHASE & (X (! CARGODELIVERYPHASE))) | ((CARGODELIVERYPHASE & (X (! CARGODELIVERYPHASE))) R (stowed => (P>=1[((! (CARGODELIVERYPHASE & (X (! CARGODELIVERYPHASE)))) U (STANDBYMODE & SAFEMODE))]))))))]",
            "ftInfAUExpanded": "((G ((! ((! CARGODELIVERYPHASE) & (X CARGODELIVERYPHASE))) | (X ((CARGODELIVERYPHASE & (X (! CARGODELIVERYPHASE))) V (stowed -> ((! (CARGODELIVERYPHASE & (X (! CARGODELIVERYPHASE)))) U (STANDBYMODE & SAFEMODE))))))) & (CARGODELIVERYPHASE -> ((CARGODELIVERYPHASE & (X (! CARGODELIVERYPHASE))) V (stowed -> ((! (CARGODELIVERYPHASE & (X (! CARGODELIVERYPHASE)))) U (STANDBYMODE & SAFEMODE))))))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc6009-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R20-B",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "In case of presence of high solar\nirradiation the system will be able\nto shield the electronics by turning\nthem off",
        "comments": "",
        "fulltext": "Whenever solar_irradiation >Normal_solar_radiation BepiColmbo shall immediately satisfy turn_off_electronics",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "solar_irradiation",
                "Normal_solar_radiation",
                "turn_off_electronics"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition": "(solar_irradiation > Normal_solar_radiation)",
            "conditionTextRange": [
                0,
                49
            ],
            "component_name": "BepiColmbo",
            "componentTextRange": [
                51,
                60
            ],
            "timingTextRange": [
                68,
                78
            ],
            "post_condition": "(turn_off_electronics)",
            "responseTextRange": [
                80,
                107
            ],
            "diagramVariables": "CC = <b><i>(solar_irradiation > Normal_solar_radiation)</i></b>, Response = <b><i>(turn_off_electronics)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(solar_irradiation > Normal_solar_radiation)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition_unexp_ft": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition_unexp_pctl": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition_SMV_pt": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition_SMV_ft": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition_PRISM_pctl": "(solar_irradiation > Normal_solar_radiation)",
            "post_condition_unexp_pt": "turn_off_electronics",
            "post_condition_unexp_ft": "turn_off_electronics",
            "post_condition_unexp_pctl": "turn_off_electronics",
            "post_condition_SMV_pt": "turn_off_electronics",
            "post_condition_SMV_ft": "turn_off_electronics",
            "post_condition_PRISM_pctl": "turn_off_electronics",
            "ft": "(LAST V ((solar_irradiation > Normal_solar_radiation) -> turn_off_electronics))",
            "pt": "(H ((solar_irradiation > Normal_solar_radiation) -> turn_off_electronics))",
            "pctl": "P>=1[(G ((solar_irradiation > Normal_solar_radiation) => (P>=1[turn_off_electronics])))]",
            "ptExpanded": "(H ((solar_irradiation > Normal_solar_radiation) -> turn_off_electronics))",
            "CoCoSpecCode": "H(((solar_irradiation > Normal_solar_radiation) => turn_off_electronics))",
            "ftExpanded": "(LAST V ((solar_irradiation > Normal_solar_radiation) -> turn_off_electronics))",
            "pctlExpanded": "P>=1[(G ((solar_irradiation > Normal_solar_radiation) => (P>=1[turn_off_electronics])))]",
            "ftInfAUExpanded": "(G ((solar_irradiation > Normal_solar_radiation) -> turn_off_electronics))",
            "component": "BepiColmbo"
        },
        "status": "",
        "_id": "eafc600a-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R71",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The maximum rotation speed is re-\nstricted within 23,100 rpm to ensure\nthe crew’s safety",
        "comments": "",
        "fulltext": "IntBall2 shall always satisfy RPM <= 23100",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "RPM"
            ],
            "component_name": "IntBall2",
            "componentTextRange": [
                0,
                7
            ],
            "timingTextRange": [
                15,
                20
            ],
            "post_condition": "(RPM <= 23100)",
            "responseTextRange": [
                22,
                41
            ],
            "diagramVariables": "Response = <b><i>(RPM <= 23100)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(RPM <= 23100)",
            "post_condition_unexp_ft": "(RPM <= 23100)",
            "post_condition_unexp_pctl": "(RPM <= 23100)",
            "post_condition_SMV_pt": "(RPM <= 23100)",
            "post_condition_SMV_ft": "(RPM <= 23100)",
            "post_condition_PRISM_pctl": "(RPM <= 23100)",
            "ft": "(LAST V (RPM <= 23100))",
            "pt": "(H (RPM <= 23100))",
            "pctl": "(P>=1[(G (RPM <= 23100))])",
            "ptExpanded": "(H (RPM <= 23100))",
            "CoCoSpecCode": "H((RPM <= 23100))",
            "ftExpanded": "(LAST V (RPM <= 23100))",
            "pctlExpanded": "(P>=1[(G (RPM <= 23100))])",
            "ftInfAUExpanded": "(G (RPM <= 23100))",
            "component": "IntBall2"
        },
        "status": "",
        "_id": "eafc600b-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R63-C",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The robot can periodically update\nmulti-sensor 3D maps of the vehi-\ncle. Visual Imaging tracking can\nall help flight controllers understand\nsystem status",
        "comments": "",
        "fulltext": "Whenever TimeForVisualImaging Astrobee shall eventually satisfy VisualImagingSurvey",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "TimeForVisualImaging",
                "VisualImagingSurvey"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(TimeForVisualImaging)",
            "regular_condition": "(TimeForVisualImaging)",
            "conditionTextRange": [
                0,
                28
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                30,
                37
            ],
            "timingTextRange": [
                45,
                54
            ],
            "post_condition": "(VisualImagingSurvey)",
            "responseTextRange": [
                56,
                82
            ],
            "diagramVariables": "CC = <b><i>(TimeForVisualImaging)</i></b>, Response = <b><i>(VisualImagingSurvey)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(TimeForVisualImaging)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "TimeForVisualImaging",
            "regular_condition_unexp_ft": "TimeForVisualImaging",
            "regular_condition_unexp_pctl": "TimeForVisualImaging",
            "regular_condition_SMV_pt": "TimeForVisualImaging",
            "regular_condition_SMV_ft": "TimeForVisualImaging",
            "regular_condition_PRISM_pctl": "TimeForVisualImaging",
            "post_condition_unexp_pt": "VisualImagingSurvey",
            "post_condition_unexp_ft": "VisualImagingSurvey",
            "post_condition_unexp_pctl": "VisualImagingSurvey",
            "post_condition_SMV_pt": "VisualImagingSurvey",
            "post_condition_SMV_ft": "VisualImagingSurvey",
            "post_condition_PRISM_pctl": "VisualImagingSurvey",
            "ft": "(LAST V (TimeForVisualImaging -> ((! LAST) U VisualImagingSurvey)))",
            "pt": "((H (! TimeForVisualImaging)) | (! ((! VisualImagingSurvey) S ((! VisualImagingSurvey) & TimeForVisualImaging))))",
            "pctl": "P>=1[(G (TimeForVisualImaging => (P>=1[(F VisualImagingSurvey)])))]",
            "ptExpanded": "((H (! TimeForVisualImaging)) | (! ((! VisualImagingSurvey) S ((! VisualImagingSurvey) & TimeForVisualImaging))))",
            "CoCoSpecCode": "(H(not (TimeForVisualImaging)) or not (SI(TimeForVisualImaging,not (VisualImagingSurvey))))",
            "ftExpanded": "(LAST V (TimeForVisualImaging -> ((! LAST) U VisualImagingSurvey)))",
            "pctlExpanded": "P>=1[(G (TimeForVisualImaging => (P>=1[(F VisualImagingSurvey)])))]",
            "ftInfAUExpanded": "(G (TimeForVisualImaging -> (F VisualImagingSurvey)))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc600c-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R5",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Deploy the parachute using nav-\nigated position information once\nsafe parachute deployment veloci-\nties have been reached",
        "comments": "",
        "fulltext": "if parachutedistance <= safeparachutedistance EDL shall immediately satisfy DeployParachute",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "parachutedistance",
                "safeparachutedistance",
                "DeployParachute"
            ],
            "qualifier_word": "if",
            "pre_condition": "(parachutedistance <= safeparachutedistance)",
            "regular_condition": "(parachutedistance <= safeparachutedistance)",
            "conditionTextRange": [
                0,
                44
            ],
            "component_name": "EDL",
            "componentTextRange": [
                46,
                48
            ],
            "timingTextRange": [
                56,
                66
            ],
            "post_condition": "(DeployParachute)",
            "responseTextRange": [
                68,
                90
            ],
            "diagramVariables": "TC = <b><i>(parachutedistance <= safeparachutedistance)</i></b>, Response = <b><i>(DeployParachute)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(parachutedistance <= safeparachutedistance)</i></b> is true and any point in the interval where <b><i>(parachutedistance <= safeparachutedistance)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(parachutedistance <= safeparachutedistance)",
            "regular_condition_unexp_ft": "(parachutedistance <= safeparachutedistance)",
            "regular_condition_unexp_pctl": "(parachutedistance <= safeparachutedistance)",
            "regular_condition_SMV_pt": "(parachutedistance <= safeparachutedistance)",
            "regular_condition_SMV_ft": "(parachutedistance <= safeparachutedistance)",
            "regular_condition_PRISM_pctl": "(parachutedistance <= safeparachutedistance)",
            "post_condition_unexp_pt": "DeployParachute",
            "post_condition_unexp_ft": "DeployParachute",
            "post_condition_unexp_pctl": "DeployParachute",
            "post_condition_SMV_pt": "DeployParachute",
            "post_condition_SMV_ft": "DeployParachute",
            "post_condition_PRISM_pctl": "DeployParachute",
            "ft": "((LAST V (((! (parachutedistance <= safeparachutedistance)) & ((! LAST) & (X (parachutedistance <= safeparachutedistance)))) -> (X DeployParachute))) & ((parachutedistance <= safeparachutedistance) -> DeployParachute))",
            "pt": "(H (((parachutedistance <= safeparachutedistance) & (Z (! (parachutedistance <= safeparachutedistance)))) -> DeployParachute))",
            "pctl": "P>=1[((G (((! (parachutedistance <= safeparachutedistance)) & (X (parachutedistance <= safeparachutedistance))) => (X (P>=1[DeployParachute])))) & ((parachutedistance <= safeparachutedistance) => (P>=1[DeployParachute])))]",
            "ptExpanded": "(H (((parachutedistance <= safeparachutedistance) & (Z (! (parachutedistance <= safeparachutedistance)))) -> DeployParachute))",
            "CoCoSpecCode": "H((((parachutedistance <= safeparachutedistance) and ZtoPre(not ((parachutedistance <= safeparachutedistance)))) => DeployParachute))",
            "ftExpanded": "((LAST V (((! (parachutedistance <= safeparachutedistance)) & ((! LAST) & (X (parachutedistance <= safeparachutedistance)))) -> (X DeployParachute))) & ((parachutedistance <= safeparachutedistance) -> DeployParachute))",
            "pctlExpanded": "P>=1[((G (((! (parachutedistance <= safeparachutedistance)) & (X (parachutedistance <= safeparachutedistance))) => (X (P>=1[DeployParachute])))) & ((parachutedistance <= safeparachutedistance) => (P>=1[DeployParachute])))]",
            "ftInfAUExpanded": "((G (((! (parachutedistance <= safeparachutedistance)) & (X (parachutedistance <= safeparachutedistance))) -> (X DeployParachute))) & ((parachutedistance <= safeparachutedistance) -> DeployParachute))",
            "component": "EDL"
        },
        "status": "",
        "_id": "eafc600d-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R42-A",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "during takeoff and landing, the air-\ncraft motion is controlled by the lift-\ning rotors only",
        "comments": "",
        "fulltext": "In TakeoffMode LPC shall always satisfy LiftingRotors & !FlightSurfaces",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "TakeoffMode",
                "LiftingRotors",
                "FlightSurfaces"
            ],
            "scope_mode": "TakeoffMode",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "LPC",
            "componentTextRange": [
                15,
                17
            ],
            "timingTextRange": [
                25,
                30
            ],
            "post_condition": "(LiftingRotors & ! FlightSurfaces)",
            "responseTextRange": [
                32,
                70
            ],
            "diagramVariables": "M = <b><i>TakeoffMode</i></b>, Response = <b><i>(LiftingRotors & ! FlightSurfaces)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>TakeoffMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "TakeoffMode",
            "scope_mode_ft": "TakeoffMode",
            "scope_mode_pctl": "TakeoffMode",
            "post_condition_unexp_pt": "(LiftingRotors & (! FlightSurfaces))",
            "post_condition_unexp_ft": "(LiftingRotors & (! FlightSurfaces))",
            "post_condition_unexp_pctl": "(LiftingRotors & (! FlightSurfaces))",
            "post_condition_SMV_pt": "(LiftingRotors & (! FlightSurfaces))",
            "post_condition_SMV_ft": "(LiftingRotors & (! FlightSurfaces))",
            "post_condition_PRISM_pctl": "(LiftingRotors & (! FlightSurfaces))",
            "ft": "(LAST V (TakeoffMode -> (LiftingRotors & (! FlightSurfaces))))",
            "pt": "(H (TakeoffMode -> (LiftingRotors & (! FlightSurfaces))))",
            "pctl": "P>=1[((G ((! (Fin_TakeoffMode & (! LAST))) | (X (P>=1[(Lin_TakeoffMode R (LiftingRotors & (! FlightSurfaces)))])))) & (TakeoffMode => (Lin_TakeoffMode | (P>=1[(Lin_TakeoffMode R (LiftingRotors & (! FlightSurfaces)))]))))]",
            "ptExpanded": "(H (TakeoffMode -> (LiftingRotors & (! FlightSurfaces))))",
            "CoCoSpecCode": "H((TakeoffMode => (LiftingRotors and not (FlightSurfaces))))",
            "ftExpanded": "(LAST V (TakeoffMode -> (LiftingRotors & (! FlightSurfaces))))",
            "pctlExpanded": "P>=1[((G ((! (((! TakeoffMode) & (X TakeoffMode)) & (! false))) | (X (P>=1[((TakeoffMode & (X (! TakeoffMode))) R (LiftingRotors & (! FlightSurfaces)))])))) & (TakeoffMode => ((TakeoffMode & (X (! TakeoffMode))) | (P>=1[((TakeoffMode & (X (! TakeoffMode))) R (LiftingRotors & (! FlightSurfaces)))]))))]",
            "ftInfAUExpanded": "(G (TakeoffMode -> (LiftingRotors & (! FlightSurfaces))))",
            "component": "LPC"
        },
        "status": "",
        "_id": "eafc600e-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R29",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "At least one side shall be the pilot\nflying side.",
        "comments": "",
        "fulltext": "FGS shall always satisfy PilotFlying <= 1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "PilotFlying"
            ],
            "component_name": "FGS",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(PilotFlying <= 1)",
            "responseTextRange": [
                17,
                40
            ],
            "diagramVariables": "Response = <b><i>(PilotFlying <= 1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(PilotFlying <= 1)",
            "post_condition_unexp_ft": "(PilotFlying <= 1)",
            "post_condition_unexp_pctl": "(PilotFlying <= 1)",
            "post_condition_SMV_pt": "(PilotFlying <= 1)",
            "post_condition_SMV_ft": "(PilotFlying <= 1)",
            "post_condition_PRISM_pctl": "(PilotFlying <= 1)",
            "ft": "(LAST V (PilotFlying <= 1))",
            "pt": "(H (PilotFlying <= 1))",
            "pctl": "(P>=1[(G (PilotFlying <= 1))])",
            "ptExpanded": "(H (PilotFlying <= 1))",
            "CoCoSpecCode": "H((PilotFlying <= 1))",
            "ftExpanded": "(LAST V (PilotFlying <= 1))",
            "pctlExpanded": "(P>=1[(G (PilotFlying <= 1))])",
            "ftInfAUExpanded": "(G (PilotFlying <= 1))",
            "component": "FGS"
        },
        "status": "",
        "_id": "eafc600f-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R13-G",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "During the Inflatable deploying\nPhase the only modes of operation\nin use is CHECK, SAFE, NOMI-\nNAL TESTING mode which should\nbe done when the IM is in a stowed\nor deployed configuration",
        "comments": "",
        "fulltext": "In INFLATABLEPHASE whenever (stowed|deployed) IM shall eventually satisfy SAFEMODE & CHECKMODE & NOMINALTESTINGMODE",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "INFLATABLEPHASE",
                "stowed",
                "deployed",
                "SAFEMODE",
                "CHECKMODE",
                "NOMINALTESTINGMODE"
            ],
            "scope_mode": "INFLATABLEPHASE",
            "scopeTextRange": [
                0,
                17
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(( stowed | deployed ))",
            "regular_condition": "(( stowed | deployed ))",
            "conditionTextRange": [
                19,
                44
            ],
            "component_name": "IM",
            "componentTextRange": [
                46,
                47
            ],
            "timingTextRange": [
                55,
                64
            ],
            "post_condition": "(SAFEMODE & CHECKMODE & NOMINALTESTINGMODE)",
            "responseTextRange": [
                66,
                114
            ],
            "diagramVariables": "M = <b><i>INFLATABLEPHASE</i></b>, CC = <b><i>(( stowed | deployed ))</i></b>, Response = <b><i>(SAFEMODE & CHECKMODE & NOMINALTESTINGMODE)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>INFLATABLEPHASE</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(( stowed | deployed ))</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "INFLATABLEPHASE",
            "scope_mode_ft": "INFLATABLEPHASE",
            "scope_mode_pctl": "INFLATABLEPHASE",
            "regular_condition_unexp_pt": "(stowed | deployed)",
            "regular_condition_unexp_ft": "(stowed | deployed)",
            "regular_condition_unexp_pctl": "(stowed | deployed)",
            "regular_condition_SMV_pt": "(stowed | deployed)",
            "regular_condition_SMV_ft": "(stowed | deployed)",
            "regular_condition_PRISM_pctl": "(stowed | deployed)",
            "post_condition_unexp_pt": "((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE)",
            "post_condition_unexp_ft": "((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE)",
            "post_condition_unexp_pctl": "((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE)",
            "post_condition_SMV_pt": "((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE)",
            "post_condition_SMV_ft": "((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE)",
            "post_condition_PRISM_pctl": "((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE)",
            "ft": "((LAST V ((! (Fin_INFLATABLEPHASE & (! LAST))) | (X ((Lin_INFLATABLEPHASE | LAST) V ((stowed | deployed) -> ((! (Lin_INFLATABLEPHASE | LAST)) U ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE))))))) & (INFLATABLEPHASE -> ((Lin_INFLATABLEPHASE | LAST) V ((stowed | deployed) -> ((! (Lin_INFLATABLEPHASE | LAST)) U ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE))))))",
            "pt": "((H (Lin_INFLATABLEPHASE -> (Y (((! (stowed | deployed)) S ((! (stowed | deployed)) & Fin_INFLATABLEPHASE)) | (! ((! ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE)) S ((! ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE)) & (stowed | deployed)))))))) & (((! Lin_INFLATABLEPHASE) S ((! Lin_INFLATABLEPHASE) & Fin_INFLATABLEPHASE)) -> (((! (stowed | deployed)) S ((! (stowed | deployed)) & Fin_INFLATABLEPHASE)) | (! ((! ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE)) S ((! ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE)) & (stowed | deployed)))))))",
            "pctl": "P>=1[((G ((! (Fin_INFLATABLEPHASE & (! LAST))) | (X (Lin_INFLATABLEPHASE R ((stowed | deployed) => (P>=1[((! Lin_INFLATABLEPHASE) U ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE))])))))) & (INFLATABLEPHASE => (Lin_INFLATABLEPHASE | (Lin_INFLATABLEPHASE R ((stowed | deployed) => (P>=1[((! Lin_INFLATABLEPHASE) U ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE))]))))))]",
            "ptExpanded": "((H (((! INFLATABLEPHASE) & (Y INFLATABLEPHASE)) -> (Y (((! (stowed | deployed)) S ((! (stowed | deployed)) & (INFLATABLEPHASE & (Z (! INFLATABLEPHASE))))) | (! ((! ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE)) S ((! ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE)) & (stowed | deployed)))))))) & (((! ((! INFLATABLEPHASE) & (Y INFLATABLEPHASE))) S ((! ((! INFLATABLEPHASE) & (Y INFLATABLEPHASE))) & (INFLATABLEPHASE & (Z (! INFLATABLEPHASE))))) -> (((! (stowed | deployed)) S ((! (stowed | deployed)) & (INFLATABLEPHASE & (Z (! INFLATABLEPHASE))))) | (! ((! ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE)) S ((! ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE)) & (stowed | deployed)))))))",
            "CoCoSpecCode": "(H(((not (INFLATABLEPHASE) and YtoPre(INFLATABLEPHASE)) => YtoPre((SI((INFLATABLEPHASE and ZtoPre(not (INFLATABLEPHASE))),not ((stowed or deployed))) or not (SI((stowed or deployed),not (((SAFEMODE and CHECKMODE) and NOMINALTESTINGMODE)))))))) and (SI((INFLATABLEPHASE and ZtoPre(not (INFLATABLEPHASE))),not ((not (INFLATABLEPHASE) and YtoPre(INFLATABLEPHASE)))) => (SI((INFLATABLEPHASE and ZtoPre(not (INFLATABLEPHASE))),not ((stowed or deployed))) or not (SI((stowed or deployed),not (((SAFEMODE and CHECKMODE) and NOMINALTESTINGMODE)))))))",
            "ftExpanded": "((LAST V ((! ((((! INFLATABLEPHASE) & (! LAST)) & (X INFLATABLEPHASE)) & (! LAST))) | (X ((((INFLATABLEPHASE & (! LAST)) & (X (! INFLATABLEPHASE))) | LAST) V ((stowed | deployed) -> ((! (((INFLATABLEPHASE & (! LAST)) & (X (! INFLATABLEPHASE))) | LAST)) U ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE))))))) & (INFLATABLEPHASE -> ((((INFLATABLEPHASE & (! LAST)) & (X (! INFLATABLEPHASE))) | LAST) V ((stowed | deployed) -> ((! (((INFLATABLEPHASE & (! LAST)) & (X (! INFLATABLEPHASE))) | LAST)) U ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE))))))",
            "pctlExpanded": "P>=1[((G ((! (((! INFLATABLEPHASE) & (X INFLATABLEPHASE)) & (! false))) | (X ((INFLATABLEPHASE & (X (! INFLATABLEPHASE))) R ((stowed | deployed) => (P>=1[((! (INFLATABLEPHASE & (X (! INFLATABLEPHASE)))) U ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE))])))))) & (INFLATABLEPHASE => ((INFLATABLEPHASE & (X (! INFLATABLEPHASE))) | ((INFLATABLEPHASE & (X (! INFLATABLEPHASE))) R ((stowed | deployed) => (P>=1[((! (INFLATABLEPHASE & (X (! INFLATABLEPHASE)))) U ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE))]))))))]",
            "ftInfAUExpanded": "((G ((! ((! INFLATABLEPHASE) & (X INFLATABLEPHASE))) | (X ((INFLATABLEPHASE & (X (! INFLATABLEPHASE))) V ((stowed | deployed) -> ((! (INFLATABLEPHASE & (X (! INFLATABLEPHASE)))) U ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE))))))) & (INFLATABLEPHASE -> ((INFLATABLEPHASE & (X (! INFLATABLEPHASE))) V ((stowed | deployed) -> ((! (INFLATABLEPHASE & (X (! INFLATABLEPHASE)))) U ((SAFEMODE & CHECKMODE) & NOMINALTESTINGMODE))))))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc6010-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R58-C",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Once ground signal has been reac-\nquired",
        "comments": "",
        "fulltext": "Whenever !ISSConnection & !Groundsignal Astrobee shall until ISSConnection & Groundsignal satisfy reconnect",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "ISSConnection",
                "Groundsignal",
                "reconnect"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(! ISSConnection & ! Groundsignal)",
            "regular_condition": "(! ISSConnection & ! Groundsignal)",
            "conditionTextRange": [
                0,
                38
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                40,
                47
            ],
            "stop_condition": "(ISSConnection & Groundsignal)",
            "timingTextRange": [
                55,
                88
            ],
            "post_condition": "(reconnect)",
            "responseTextRange": [
                90,
                106
            ],
            "diagramVariables": "CC = <b><i>(! ISSConnection & ! Groundsignal)</i></b>, SC = <b><i>(ISSConnection & Groundsignal)</i></b>, Response = <b><i>(reconnect)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(! ISSConnection & ! Groundsignal)</i></b> is true.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "((! ISSConnection) & (! Groundsignal))",
            "regular_condition_unexp_ft": "((! ISSConnection) & (! Groundsignal))",
            "regular_condition_unexp_pctl": "((! ISSConnection) & (! Groundsignal))",
            "regular_condition_SMV_pt": "((! ISSConnection) & (! Groundsignal))",
            "regular_condition_SMV_ft": "((! ISSConnection) & (! Groundsignal))",
            "regular_condition_PRISM_pctl": "((! ISSConnection) & (! Groundsignal))",
            "post_condition_unexp_pt": "reconnect",
            "post_condition_unexp_ft": "reconnect",
            "post_condition_unexp_pctl": "reconnect",
            "post_condition_SMV_pt": "reconnect",
            "post_condition_SMV_ft": "reconnect",
            "post_condition_PRISM_pctl": "reconnect",
            "stop_condition_unexp_pt": "(ISSConnection & Groundsignal)",
            "stop_condition_unexp_ft": "(ISSConnection & Groundsignal)",
            "stop_condition_PRISM_pctl": "(ISSConnection & Groundsignal)",
            "stop_condition_SMV_pt": "(ISSConnection & Groundsignal)",
            "stop_condition_SMV_ft": "(ISSConnection & Groundsignal)",
            "ft": "(LAST V (((! ISSConnection) & (! Groundsignal)) -> (((ISSConnection & Groundsignal) V (reconnect | (ISSConnection & Groundsignal))) | (LAST V reconnect))))",
            "pt": "(H ((H (! ((! ISSConnection) & (! Groundsignal)))) | (((! (ISSConnection & Groundsignal)) S ((! (ISSConnection & Groundsignal)) & ((! ISSConnection) & (! Groundsignal)))) -> reconnect)))",
            "pctl": "P>=1[(G (((! ISSConnection) & (! Groundsignal)) => (P>=1[((undefined R (reconnect | undefined)) | (LAST R reconnect))])))]",
            "ptExpanded": "(H ((H (ISSConnection | Groundsignal)) | (((! (ISSConnection & Groundsignal)) S ((! (ISSConnection & Groundsignal)) & ((! ISSConnection) & (! Groundsignal)))) -> reconnect)))",
            "CoCoSpecCode": "H((H((ISSConnection or Groundsignal)) or (SI((not (ISSConnection) and not (Groundsignal)),not ((ISSConnection and Groundsignal))) => reconnect)))",
            "ftExpanded": "(LAST V (((! ISSConnection) & (! Groundsignal)) -> (((ISSConnection & Groundsignal) V (reconnect | (ISSConnection & Groundsignal))) | (LAST V reconnect))))",
            "pctlExpanded": "P>=1[(G (((! ISSConnection) & (! Groundsignal)) => (P>=1[(((ISSConnection & Groundsignal) R (reconnect | (ISSConnection & Groundsignal))) | (false R reconnect))])))]",
            "ftInfAUExpanded": "(G (((! ISSConnection) & (! Groundsignal)) -> ((ISSConnection & Groundsignal) V (reconnect | (ISSConnection & Groundsignal)))))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc6011-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R20-C",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "In case of presence of high solar ir-\nradiation the system will be able to\nshield the electronics",
        "comments": "",
        "fulltext": "Whenever solar_irradiation >Normal_solar_radiation BepiColmbo shall immediately satisfy shield_electronics",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "solar_irradiation",
                "Normal_solar_radiation",
                "shield_electronics"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition": "(solar_irradiation > Normal_solar_radiation)",
            "conditionTextRange": [
                0,
                49
            ],
            "component_name": "BepiColmbo",
            "componentTextRange": [
                51,
                60
            ],
            "timingTextRange": [
                68,
                78
            ],
            "post_condition": "(shield_electronics)",
            "responseTextRange": [
                80,
                105
            ],
            "diagramVariables": "CC = <b><i>(solar_irradiation > Normal_solar_radiation)</i></b>, Response = <b><i>(shield_electronics)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(solar_irradiation > Normal_solar_radiation)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition_unexp_ft": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition_unexp_pctl": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition_SMV_pt": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition_SMV_ft": "(solar_irradiation > Normal_solar_radiation)",
            "regular_condition_PRISM_pctl": "(solar_irradiation > Normal_solar_radiation)",
            "post_condition_unexp_pt": "shield_electronics",
            "post_condition_unexp_ft": "shield_electronics",
            "post_condition_unexp_pctl": "shield_electronics",
            "post_condition_SMV_pt": "shield_electronics",
            "post_condition_SMV_ft": "shield_electronics",
            "post_condition_PRISM_pctl": "shield_electronics",
            "ft": "(LAST V ((solar_irradiation > Normal_solar_radiation) -> shield_electronics))",
            "pt": "(H ((solar_irradiation > Normal_solar_radiation) -> shield_electronics))",
            "pctl": "P>=1[(G ((solar_irradiation > Normal_solar_radiation) => (P>=1[shield_electronics])))]",
            "ptExpanded": "(H ((solar_irradiation > Normal_solar_radiation) -> shield_electronics))",
            "CoCoSpecCode": "H(((solar_irradiation > Normal_solar_radiation) => shield_electronics))",
            "ftExpanded": "(LAST V ((solar_irradiation > Normal_solar_radiation) -> shield_electronics))",
            "pctlExpanded": "P>=1[(G ((solar_irradiation > Normal_solar_radiation) => (P>=1[shield_electronics])))]",
            "ftInfAUExpanded": "(G ((solar_irradiation > Normal_solar_radiation) -> shield_electronics))",
            "component": "BepiColmbo"
        },
        "status": "",
        "_id": "eafc6012-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R6",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "LVS begins taking pictures at 4.2\nkm altitude and matching them up\nto an onboard map.",
        "comments": "",
        "fulltext": "Whenever Altitude <= 4.2 LVS shall immediately satisfy TakePictures & Match",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "Altitude",
                "TakePictures",
                "Match"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(Altitude <= 4.2)",
            "regular_condition": "(Altitude <= 4.2)",
            "conditionTextRange": [
                0,
                23
            ],
            "component_name": "LVS",
            "componentTextRange": [
                25,
                27
            ],
            "timingTextRange": [
                35,
                45
            ],
            "post_condition": "(TakePictures & Match)",
            "responseTextRange": [
                47,
                74
            ],
            "diagramVariables": "CC = <b><i>(Altitude <= 4.2)</i></b>, Response = <b><i>(TakePictures & Match)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(Altitude <= 4.2)</i></b> is true.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(Altitude <= 4.2)",
            "regular_condition_unexp_ft": "(Altitude <= 4.2)",
            "regular_condition_unexp_pctl": "(Altitude <= 4.2)",
            "regular_condition_SMV_pt": "(Altitude <= 4.2)",
            "regular_condition_SMV_ft": "(Altitude <= 4.2)",
            "regular_condition_PRISM_pctl": "(Altitude <= 4.2)",
            "post_condition_unexp_pt": "(TakePictures & Match)",
            "post_condition_unexp_ft": "(TakePictures & Match)",
            "post_condition_unexp_pctl": "(TakePictures & Match)",
            "post_condition_SMV_pt": "(TakePictures & Match)",
            "post_condition_SMV_ft": "(TakePictures & Match)",
            "post_condition_PRISM_pctl": "(TakePictures & Match)",
            "ft": "(LAST V ((Altitude <= 4.2) -> (TakePictures & Match)))",
            "pt": "(H ((Altitude <= 4.2) -> (TakePictures & Match)))",
            "pctl": "P>=1[(G ((Altitude <= 4.2) => (P>=1[(TakePictures & Match)])))]",
            "ptExpanded": "(H ((Altitude <= 4.2) -> (TakePictures & Match)))",
            "CoCoSpecCode": "H(((Altitude <= 4.2) => (TakePictures and Match)))",
            "ftExpanded": "(LAST V ((Altitude <= 4.2) -> (TakePictures & Match)))",
            "pctlExpanded": "P>=1[(G ((Altitude <= 4.2) => (P>=1[(TakePictures & Match)])))]",
            "ftInfAUExpanded": "(G ((Altitude <= 4.2) -> (TakePictures & Match)))",
            "component": "LVS"
        },
        "status": "",
        "_id": "eafc6013-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R30",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "At most one side shall be the pilot\nflying side.",
        "comments": "",
        "fulltext": "FGS shall always satisfy PilotFlying >= 1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "PilotFlying"
            ],
            "component_name": "FGS",
            "componentTextRange": [
                0,
                2
            ],
            "timingTextRange": [
                10,
                15
            ],
            "post_condition": "(PilotFlying >= 1)",
            "responseTextRange": [
                17,
                40
            ],
            "diagramVariables": "Response = <b><i>(PilotFlying >= 1)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(PilotFlying >= 1)",
            "post_condition_unexp_ft": "(PilotFlying >= 1)",
            "post_condition_unexp_pctl": "(PilotFlying >= 1)",
            "post_condition_SMV_pt": "(PilotFlying >= 1)",
            "post_condition_SMV_ft": "(PilotFlying >= 1)",
            "post_condition_PRISM_pctl": "(PilotFlying >= 1)",
            "ft": "(LAST V (PilotFlying >= 1))",
            "pt": "(H (PilotFlying >= 1))",
            "pctl": "(P>=1[(G (PilotFlying >= 1))])",
            "ptExpanded": "(H (PilotFlying >= 1))",
            "CoCoSpecCode": "H((PilotFlying >= 1))",
            "ftExpanded": "(LAST V (PilotFlying >= 1))",
            "pctlExpanded": "(P>=1[(G (PilotFlying >= 1))])",
            "ftInfAUExpanded": "(G (PilotFlying >= 1))",
            "component": "FGS"
        },
        "status": "",
        "_id": "eafc6014-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R63-D",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "The robot can periodically update\nmulti-sensor 3D maps of the vehi-\ncle. Thermal imaging tracking can\nall help flight controllers understand\nsystem status",
        "comments": "",
        "fulltext": "Whenever TimeForThermalImaging Astrobee shall eventually satisfy ThermalImagingSurvey",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "TimeForThermalImaging",
                "ThermalImagingSurvey"
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(TimeForThermalImaging)",
            "regular_condition": "(TimeForThermalImaging)",
            "conditionTextRange": [
                0,
                29
            ],
            "component_name": "Astrobee",
            "componentTextRange": [
                31,
                38
            ],
            "timingTextRange": [
                46,
                55
            ],
            "post_condition": "(ThermalImagingSurvey)",
            "responseTextRange": [
                57,
                84
            ],
            "diagramVariables": "CC = <b><i>(TimeForThermalImaging)</i></b>, Response = <b><i>(ThermalImagingSurvey)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: every point in the interval where <b><i>(TimeForThermalImaging)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "TimeForThermalImaging",
            "regular_condition_unexp_ft": "TimeForThermalImaging",
            "regular_condition_unexp_pctl": "TimeForThermalImaging",
            "regular_condition_SMV_pt": "TimeForThermalImaging",
            "regular_condition_SMV_ft": "TimeForThermalImaging",
            "regular_condition_PRISM_pctl": "TimeForThermalImaging",
            "post_condition_unexp_pt": "ThermalImagingSurvey",
            "post_condition_unexp_ft": "ThermalImagingSurvey",
            "post_condition_unexp_pctl": "ThermalImagingSurvey",
            "post_condition_SMV_pt": "ThermalImagingSurvey",
            "post_condition_SMV_ft": "ThermalImagingSurvey",
            "post_condition_PRISM_pctl": "ThermalImagingSurvey",
            "ft": "(LAST V (TimeForThermalImaging -> ((! LAST) U ThermalImagingSurvey)))",
            "pt": "((H (! TimeForThermalImaging)) | (! ((! ThermalImagingSurvey) S ((! ThermalImagingSurvey) & TimeForThermalImaging))))",
            "pctl": "P>=1[(G (TimeForThermalImaging => (P>=1[(F ThermalImagingSurvey)])))]",
            "ptExpanded": "((H (! TimeForThermalImaging)) | (! ((! ThermalImagingSurvey) S ((! ThermalImagingSurvey) & TimeForThermalImaging))))",
            "CoCoSpecCode": "(H(not (TimeForThermalImaging)) or not (SI(TimeForThermalImaging,not (ThermalImagingSurvey))))",
            "ftExpanded": "(LAST V (TimeForThermalImaging -> ((! LAST) U ThermalImagingSurvey)))",
            "pctlExpanded": "P>=1[(G (TimeForThermalImaging => (P>=1[(F ThermalImagingSurvey)])))]",
            "ftInfAUExpanded": "(G (TimeForThermalImaging -> (F ThermalImagingSurvey)))",
            "component": "Astrobee"
        },
        "status": "",
        "_id": "eafc6015-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R72",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "Once the variances of the deriva-\ntives of acceleration and angular ve-\nlocity from the IMU exceed pre-\ndefined upper thresholds, the status\nshifts to collision mode.",
        "comments": "",
        "fulltext": "If (VelocityVariancesc >UpperVelocityThreshold) & (AccelerationVariances >UpperAccelerationThreshold) IntBall2 shall immediately satisfy CollisionMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "probability": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "VelocityVariancesc",
                "UpperVelocityThreshold",
                "AccelerationVariances",
                "UpperAccelerationThreshold",
                "CollisionMode"
            ],
            "qualifier_word": "if",
            "pre_condition": "(( VelocityVariancesc > UpperVelocityThreshold ) & ( AccelerationVariances > UpperAccelerationThreshold ))",
            "regular_condition": "(( VelocityVariancesc > UpperVelocityThreshold ) & ( AccelerationVariances > UpperAccelerationThreshold ))",
            "conditionTextRange": [
                0,
                100
            ],
            "component_name": "IntBall2",
            "componentTextRange": [
                102,
                109
            ],
            "timingTextRange": [
                117,
                127
            ],
            "post_condition": "(CollisionMode)",
            "responseTextRange": [
                129,
                149
            ],
            "diagramVariables": "TC = <b><i>(( VelocityVariancesc > UpperVelocityThreshold ) & ( AccelerationVariances > UpperAccelerationThreshold ))</i></b>, Response = <b><i>(CollisionMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( VelocityVariancesc > UpperVelocityThreshold ) & ( AccelerationVariances > UpperAccelerationThreshold ))</i></b> is true and any point in the interval where <b><i>(( VelocityVariancesc > UpperVelocityThreshold ) & ( AccelerationVariances > UpperAccelerationThreshold ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold))",
            "regular_condition_unexp_ft": "((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold))",
            "regular_condition_unexp_pctl": "((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold))",
            "regular_condition_SMV_pt": "((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold))",
            "regular_condition_SMV_ft": "((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold))",
            "regular_condition_PRISM_pctl": "((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold))",
            "post_condition_unexp_pt": "CollisionMode",
            "post_condition_unexp_ft": "CollisionMode",
            "post_condition_unexp_pctl": "CollisionMode",
            "post_condition_SMV_pt": "CollisionMode",
            "post_condition_SMV_ft": "CollisionMode",
            "post_condition_PRISM_pctl": "CollisionMode",
            "ft": "((LAST V (((! ((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold))) & ((! LAST) & (X ((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold))))) -> (X CollisionMode))) & (((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold)) -> CollisionMode))",
            "pt": "(H ((((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold)) & (Z (! ((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold))))) -> CollisionMode))",
            "pctl": "P>=1[((G (((! ((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold))) & (X ((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold)))) => (X (P>=1[CollisionMode])))) & (((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold)) => (P>=1[CollisionMode])))]",
            "ptExpanded": "(H ((((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold)) & (Z (! ((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold))))) -> CollisionMode))",
            "CoCoSpecCode": "H(((((VelocityVariancesc > UpperVelocityThreshold) and (AccelerationVariances > UpperAccelerationThreshold)) and ZtoPre(not (((VelocityVariancesc > UpperVelocityThreshold) and (AccelerationVariances > UpperAccelerationThreshold))))) => CollisionMode))",
            "ftExpanded": "((LAST V (((! ((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold))) & ((! LAST) & (X ((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold))))) -> (X CollisionMode))) & (((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold)) -> CollisionMode))",
            "pctlExpanded": "P>=1[((G (((! ((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold))) & (X ((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold)))) => (X (P>=1[CollisionMode])))) & (((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold)) => (P>=1[CollisionMode])))]",
            "ftInfAUExpanded": "((G (((! ((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold))) & (X ((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold)))) -> (X CollisionMode))) & (((VelocityVariancesc > UpperVelocityThreshold) & (AccelerationVariances > UpperAccelerationThreshold)) -> CollisionMode))",
            "component": "IntBall2"
        },
        "status": "",
        "_id": "eafc6016-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R13-H",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "During the On orbit tests and ops\nPhase the only modes of operation\nin use is CHECK, SAFE, NOM-\nINAL TESTING and NOMINAL\nCREW mode which should be done\nwhen the IM is in a deployed con-\nfiguration",
        "comments": "",
        "fulltext": "In ONORBITSPHASE whenever deployed IM shall eventually satisfy SAFEMODE & CHECKMODE & NOMINALCREWMODE & NOMINALTESTINGMODE",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "holding",
            "probability": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "ONORBITSPHASE",
                "deployed",
                "SAFEMODE",
                "CHECKMODE",
                "NOMINALCREWMODE",
                "NOMINALTESTINGMODE"
            ],
            "scope_mode": "ONORBITSPHASE",
            "scopeTextRange": [
                0,
                15
            ],
            "qualifier_word": "whenever",
            "pre_condition": "(deployed)",
            "regular_condition": "(deployed)",
            "conditionTextRange": [
                17,
                33
            ],
            "component_name": "IM",
            "componentTextRange": [
                35,
                36
            ],
            "timingTextRange": [
                44,
                53
            ],
            "post_condition": "(SAFEMODE & CHECKMODE & NOMINALCREWMODE & NOMINALTESTINGMODE)",
            "responseTextRange": [
                55,
                121
            ],
            "diagramVariables": "M = <b><i>ONORBITSPHASE</i></b>, CC = <b><i>(deployed)</i></b>, Response = <b><i>(SAFEMODE & CHECKMODE & NOMINALCREWMODE & NOMINALTESTINGMODE)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>ONORBITSPHASE</i></b> holds.\nTRIGGER: every point in the interval where <b><i>(deployed)</i></b> is true.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_holding_eventually_satisfaction.svg",
            "scope_mode_pt": "ONORBITSPHASE",
            "scope_mode_ft": "ONORBITSPHASE",
            "scope_mode_pctl": "ONORBITSPHASE",
            "regular_condition_unexp_pt": "deployed",
            "regular_condition_unexp_ft": "deployed",
            "regular_condition_unexp_pctl": "deployed",
            "regular_condition_SMV_pt": "deployed",
            "regular_condition_SMV_ft": "deployed",
            "regular_condition_PRISM_pctl": "deployed",
            "post_condition_unexp_pt": "(((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE)",
            "post_condition_unexp_ft": "(((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE)",
            "post_condition_unexp_pctl": "(((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE)",
            "post_condition_SMV_pt": "(((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE)",
            "post_condition_SMV_ft": "(((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE)",
            "post_condition_PRISM_pctl": "(((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE)",
            "ft": "((LAST V ((! (Fin_ONORBITSPHASE & (! LAST))) | (X ((Lin_ONORBITSPHASE | LAST) V (deployed -> ((! (Lin_ONORBITSPHASE | LAST)) U (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE))))))) & (ONORBITSPHASE -> ((Lin_ONORBITSPHASE | LAST) V (deployed -> ((! (Lin_ONORBITSPHASE | LAST)) U (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE))))))",
            "pt": "((H (Lin_ONORBITSPHASE -> (Y (((! deployed) S ((! deployed) & Fin_ONORBITSPHASE)) | (! ((! (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE)) S ((! (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE)) & deployed))))))) & (((! Lin_ONORBITSPHASE) S ((! Lin_ONORBITSPHASE) & Fin_ONORBITSPHASE)) -> (((! deployed) S ((! deployed) & Fin_ONORBITSPHASE)) | (! ((! (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE)) S ((! (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE)) & deployed))))))",
            "pctl": "P>=1[((G ((! (Fin_ONORBITSPHASE & (! LAST))) | (X (Lin_ONORBITSPHASE R (deployed => (P>=1[((! Lin_ONORBITSPHASE) U (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE))])))))) & (ONORBITSPHASE => (Lin_ONORBITSPHASE | (Lin_ONORBITSPHASE R (deployed => (P>=1[((! Lin_ONORBITSPHASE) U (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE))]))))))]",
            "ptExpanded": "((H (((! ONORBITSPHASE) & (Y ONORBITSPHASE)) -> (Y (((! deployed) S ((! deployed) & (ONORBITSPHASE & (Z (! ONORBITSPHASE))))) | (! ((! (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE)) S ((! (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE)) & deployed))))))) & (((! ((! ONORBITSPHASE) & (Y ONORBITSPHASE))) S ((! ((! ONORBITSPHASE) & (Y ONORBITSPHASE))) & (ONORBITSPHASE & (Z (! ONORBITSPHASE))))) -> (((! deployed) S ((! deployed) & (ONORBITSPHASE & (Z (! ONORBITSPHASE))))) | (! ((! (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE)) S ((! (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE)) & deployed))))))",
            "CoCoSpecCode": "(H(((not (ONORBITSPHASE) and YtoPre(ONORBITSPHASE)) => YtoPre((SI((ONORBITSPHASE and ZtoPre(not (ONORBITSPHASE))),not (deployed)) or not (SI(deployed,not ((((SAFEMODE and CHECKMODE) and NOMINALCREWMODE) and NOMINALTESTINGMODE)))))))) and (SI((ONORBITSPHASE and ZtoPre(not (ONORBITSPHASE))),not ((not (ONORBITSPHASE) and YtoPre(ONORBITSPHASE)))) => (SI((ONORBITSPHASE and ZtoPre(not (ONORBITSPHASE))),not (deployed)) or not (SI(deployed,not ((((SAFEMODE and CHECKMODE) and NOMINALCREWMODE) and NOMINALTESTINGMODE)))))))",
            "ftExpanded": "((LAST V ((! ((((! ONORBITSPHASE) & (! LAST)) & (X ONORBITSPHASE)) & (! LAST))) | (X ((((ONORBITSPHASE & (! LAST)) & (X (! ONORBITSPHASE))) | LAST) V (deployed -> ((! (((ONORBITSPHASE & (! LAST)) & (X (! ONORBITSPHASE))) | LAST)) U (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE))))))) & (ONORBITSPHASE -> ((((ONORBITSPHASE & (! LAST)) & (X (! ONORBITSPHASE))) | LAST) V (deployed -> ((! (((ONORBITSPHASE & (! LAST)) & (X (! ONORBITSPHASE))) | LAST)) U (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE))))))",
            "pctlExpanded": "P>=1[((G ((! (((! ONORBITSPHASE) & (X ONORBITSPHASE)) & (! false))) | (X ((ONORBITSPHASE & (X (! ONORBITSPHASE))) R (deployed => (P>=1[((! (ONORBITSPHASE & (X (! ONORBITSPHASE)))) U (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE))])))))) & (ONORBITSPHASE => ((ONORBITSPHASE & (X (! ONORBITSPHASE))) | ((ONORBITSPHASE & (X (! ONORBITSPHASE))) R (deployed => (P>=1[((! (ONORBITSPHASE & (X (! ONORBITSPHASE)))) U (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE))]))))))]",
            "ftInfAUExpanded": "((G ((! ((! ONORBITSPHASE) & (X ONORBITSPHASE))) | (X ((ONORBITSPHASE & (X (! ONORBITSPHASE))) V (deployed -> ((! (ONORBITSPHASE & (X (! ONORBITSPHASE)))) U (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE))))))) & (ONORBITSPHASE -> ((ONORBITSPHASE & (X (! ONORBITSPHASE))) V (deployed -> ((! (ONORBITSPHASE & (X (! ONORBITSPHASE)))) U (((SAFEMODE & CHECKMODE) & NOMINALCREWMODE) & NOMINALTESTINGMODE))))))",
            "component": "IM"
        },
        "status": "",
        "_id": "eafc6017-8400-11f0-b368-a12b6bcaa6f5"
    },
    {
        "reqid": "R42-B",
        "parent_reqid": "",
        "project": "SpaceRequirements",
        "rationale": "during takeoff and landing, the air-\ncraft motion is controlled by the lift-\ning rotors only",
        "comments": "",
        "fulltext": "In LandingMode LPC shall always satisfy LiftingRotors & !FlightSurfaces",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "probability": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "LandingMode",
                "LiftingRotors",
                "FlightSurfaces"
            ],
            "scope_mode": "LandingMode",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "LPC",
            "componentTextRange": [
                15,
                17
            ],
            "timingTextRange": [
                25,
                30
            ],
            "post_condition": "(LiftingRotors & ! FlightSurfaces)",
            "responseTextRange": [
                32,
                70
            ],
            "diagramVariables": "M = <b><i>LandingMode</i></b>, Response = <b><i>(LiftingRotors & ! FlightSurfaces)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>LandingMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "LandingMode",
            "scope_mode_ft": "LandingMode",
            "scope_mode_pctl": "LandingMode",
            "post_condition_unexp_pt": "(LiftingRotors & (! FlightSurfaces))",
            "post_condition_unexp_ft": "(LiftingRotors & (! FlightSurfaces))",
            "post_condition_unexp_pctl": "(LiftingRotors & (! FlightSurfaces))",
            "post_condition_SMV_pt": "(LiftingRotors & (! FlightSurfaces))",
            "post_condition_SMV_ft": "(LiftingRotors & (! FlightSurfaces))",
            "post_condition_PRISM_pctl": "(LiftingRotors & (! FlightSurfaces))",
            "ft": "(LAST V (LandingMode -> (LiftingRotors & (! FlightSurfaces))))",
            "pt": "(H (LandingMode -> (LiftingRotors & (! FlightSurfaces))))",
            "pctl": "P>=1[((G ((! (Fin_LandingMode & (! LAST))) | (X (P>=1[(Lin_LandingMode R (LiftingRotors & (! FlightSurfaces)))])))) & (LandingMode => (Lin_LandingMode | (P>=1[(Lin_LandingMode R (LiftingRotors & (! FlightSurfaces)))]))))]",
            "ptExpanded": "(H (LandingMode -> (LiftingRotors & (! FlightSurfaces))))",
            "CoCoSpecCode": "H((LandingMode => (LiftingRotors and not (FlightSurfaces))))",
            "ftExpanded": "(LAST V (LandingMode -> (LiftingRotors & (! FlightSurfaces))))",
            "pctlExpanded": "P>=1[((G ((! (((! LandingMode) & (X LandingMode)) & (! false))) | (X (P>=1[((LandingMode & (X (! LandingMode))) R (LiftingRotors & (! FlightSurfaces)))])))) & (LandingMode => ((LandingMode & (X (! LandingMode))) | (P>=1[((LandingMode & (X (! LandingMode))) R (LiftingRotors & (! FlightSurfaces)))]))))]",
            "ftInfAUExpanded": "(G (LandingMode -> (LiftingRotors & (! FlightSurfaces))))",
            "component": "LPC"
        },
        "status": "",
        "_id": "eafc6018-8400-11f0-b368-a12b6bcaa6f5"
    }
]